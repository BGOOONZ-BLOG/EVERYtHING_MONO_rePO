{
    "componentChunkName": "component---src-templates-advanced-js",
    "path": "/",
    "result": {
        "data": { "sitePage": { "id": "SitePage /" } },
        "pageContext": {
            "url": "/",
            "relativePath": "index.md",
            "relativeDir": "",
            "base": "index.md",
            "name": "index",
            "frontmatter": {
                "title": "Bryan Guner Web Dev Resource Hub",
                "sections": [
                    {
                        "section_id": "hero",
                        "type": "section_hero",
                        "title": "I am a musician/electrical engineer turned web developer",
                        "image": "images/cool annimation.gif",
                        "content": "###### **A passionate frontend developer from New Jersey U.S.A**\n\n[](https://www.vagrantup.com/)[![](https://img.icons8.com/color/96/000000/gmail.png)](mailto:bryan.guner@gmail.com)[![](https://img.icons8.com/color/96/000000/youtube.png)](https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA/videos)[![](https://img.icons8.com/color/96/000000/instagram-new.png)](https://www.instagram.com/bgoonz/?hl=en)[![](https://img.icons8.com/color/96/000000/pinterest--v1.png)](https://www.pinterest.com/bryanguner/\\_saved/)[![](https://img.icons8.com/color/96/000000/linkedin.png)](https://www.linkedin.com/in/bryan-guner-046199128/) [![](https://img.icons8.com/color/96/000000/medium-logo.png)](https://bryanguner.medium.com/)\n\n[](https://webpack.js.org/)[ ](https://www.adobe.com/products/xd.html)\n",
                        "actions": []
                    },
                    {
                        "section_id": "features",
                        "type": "section_grid",
                        "col_number": "three",
                        "grid_items": [
                            {
                                "content": "Memoization, Tabulation, and Sorting Algorithms by Example\nWhy is looking at runtime not a reliable method of calculating time complexity?\n",
                                "actions": [{ "label": "Get Started", "url": "/docs", "style": "link" }],
                                "title": "A Quick Guide To Big O",
                                "image": "images/my-back.png",
                                "title_url": "https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522"
                            },
                            {
                                "content": "*Python has a built in help function that let’s you see a description of the source code without having to navigate to it… “-SickNasty … Autor Unknown”  .*\n",
                                "actions": [
                                    {
                                        "label": "View Posts",
                                        "url": "https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb",
                                        "style": "link"
                                    }
                                ],
                                "image_alt": "python",
                                "title": "Python Guide",
                                "title_url": "https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb",
                                "image": "images/smiling-maple.png"
                            },
                            {
                                "content": "This section exists for me to day dream ideas for the future... and maybe... just maybe, hold myself accountable to them.\n",
                                "actions": [{ "label": "Learn More", "url": "/notes-template", "style": "link" }],
                                "title": "Guitar Effects Triggering w DTW",
                                "title_url": "https://github.com/bgoonz/Revamped-Automatic-Guitar-Effect-Triggering",
                                "image": "images/panoramic-owl.png"
                            },
                            {
                                "title_url": "https://bryanguner.medium.com/introductory-react-part-2-cda01615a186",
                                "image_alt": "lorem-ipsum",
                                "content": "As I learn to build web applications in React I will blog about it in this series in an attempt to capture the questions that a complete beginner might encounter that a more seasoned developer would take for granted!\n",
                                "actions": [],
                                "type": "grid_item",
                                "title": "Beginner Guide React",
                                "image": "images/successful-panda.gif"
                            },
                            {
                                "title_url": "https://dev.to/bgoonz/scope-and-context-in-javascript-5cma",
                                "image_alt": "lorem-ipsum",
                                "content": "Scope & Context in JS\n\nThe **scope** of a program in JavaScript is the set of variables that are available for use within the program. \n",
                                "actions": [],
                                "type": "grid_item",
                                "image": "images/pleasant-birch.png",
                                "title": "Scope & Closure"
                            },
                            {
                                "image_alt": "Every idea needs a medium",
                                "content": "PostgreSQL Cheat Sheet, Everything You Need to Get Started With VSCode + Extensions & Resources, Super Simple Intro To HTML,  Understanding Git... etc....\n",
                                "actions": [],
                                "type": "grid_item",
                                "title": "My Medium Blog",
                                "image": "images/curious-mustard.png",
                                "title_url": "https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b"
                            }
                        ]
                    },
                    {
                        "title": "Current Interests",
                        "section_id": "interests",
                        "subtitle": "From github repositories to existential questions.",
                        "col_number": "three",
                        "grid_items": [
                            {
                                "title": "Angolia",
                                "title_url": "lorem-ipsum",
                                "image_alt": "lorem-ipsum",
                                "content": "## Full Text Search\n\n[Full Text Search](https://www.algolia.com/)\n\n## &#xA;\n",
                                "actions": [],
                                "type": "grid_item",
                                "image": "images/spectacular-turmeric.png"
                            },
                            {
                                "title": "Convolutional Neural Networks",
                                "title_url": "lorem-ipsum",
                                "image_alt": "lorem-ipsum",
                                "content": "Artificial neural networks, usually simply called neural networks, are computing systems vaguely inspired by the biological [neural networks](https://github.com/tensorflow/tensorflow)![](/\\_static/app-assets/neural.PNG)\n\n",
                                "actions": [],
                                "type": "grid_item",
                                "image": "images/neural.PNG"
                            },
                            {
                                "title": "Jamstack",
                                "title_url": "lorem-ipsum",
                                "image_alt": "lorem-ipsum",
                                "content": "## Why Jamstack\n\n*Jamstack is the new standard architecture for the web. Using Git workflows and modern build tools, pre-rendered content is served to a CDN and made dynamic through APIs and serverless functions. Technologies in the stack include JavaScript frameworks, Static Site Generators, Headless CMSs, and CDNs.*\n",
                                "actions": [],
                                "type": "grid_item",
                                "image": "images/jamstack.png"
                            }
                        ],
                        "type": "section_grid"
                    },
                    {
                        "section_id": "features-two-col",
                        "type": "section_grid",
                        "title": "Resume & Portfolio",
                        "col_number": "two",
                        "grid_items": [
                            {
                                "title": "Resume",
                                "actions": [
                                    { "label": "Learn More", "url": "https://1drv.ms/b/s!AkGiZ9n9CRDSpLsZsnPtiN7p77vq6A", "style": "link" },
                                    {
                                        "label": "Download PDF",
                                        "url": "#",
                                        "style": "link",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    }
                                ],
                                "image": "images/resume.JPG",
                                "title_url": "https://github.com/bgoonz/resume-cv-portfolio-samples/raw/master/2021-resume/bryan-guner-resume-2021.pdf"
                            },
                            {
                                "title": "Showcase",
                                "content": "![](/\\_static/app-assets/lambda-demo1.gif)My Projects!\n",
                                "actions": [{ "label": "Learn More", "url": "/showcase", "style": "link" }],
                                "image": "images/My Post.png"
                            }
                        ]
                    },
                    {
                        "title": "Embed Your Repo In My Website",
                        "section_id": "lorem-ipsum",
                        "image_alt": "lorem-ipsum",
                        "image_position": "left",
                        "content": "<iframe width=\"800\" height=\"575\"\n src=\"https://stackblitz.com/edit/sdk-github-project-earatb?devtoolsheight=33\\&embed=1\\&file=index.ts\" title=\"YouTube video\n player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n",
                        "actions": [
                            {
                                "label": "Go To Content Playground",
                                "url": "/gallery",
                                "style": "primary",
                                "icon_class": "dev",
                                "new_window": false,
                                "no_follow": false,
                                "type": "action"
                            }
                        ],
                        "type": "section_content"
                    },
                    {
                        "title": "Code Playground(s)",
                        "section_id": "code-playground",
                        "image_alt": "lorem-ipsum",
                        "image_position": "left",
                        "content": "<iframe width=\"800\" height=\"575\"\n  src=\"https://code-playground.netlify.app/index.html\" title=\"YouTube video\n  player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n  encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                        "actions": [],
                        "type": "section_content"
                    },
                    {
                        "title": "Music",
                        "section_id": "guitar",
                        "image_alt": "bryan-guner",
                        "image_position": "left",
                        "content": "<iframe width=\"560\" height=\"415\" src=\"https://www.youtube.com/embed/xGZSWvFess8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                        "actions": [],
                        "type": "section_content"
                    },
                    {
                        "title": "Nextjs & SanityCMS Blog W Comments",
                        "section_id": "blog",
                        "image_alt": "blog",
                        "image_position": "left",
                        "content": "<iframe width=\"800\" height=\"575\"\n src=\"https://blog-w-comments.vercel.app/\" title=\"YouTube video\n player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                        "actions": [],
                        "type": "section_content"
                    },
                    {
                        "title": "Mini Projects",
                        "section_id": "lorem-ipsum",
                        "image_alt": "lorem-ipsum",
                        "image_position": "left",
                        "content": "<iframe width=\"800\" height=\"575\"\n src=\"https://embedable-content.netlify.app/\" title=\"YouTube video\n player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                        "actions": [],
                        "type": "section_content"
                    },
                    {
                        "title": "Blog-Archive",
                        "section_id": "lorem-ipsum",
                        "image_alt": "lorem-ipsum",
                        "image_position": "left",
                        "content": "<iframe width=\"800\" height=\"575\"\n  src=\"https://bgoonz.blogspot.com/\" title=\"YouTube video\n  player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n  encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                        "actions": [],
                        "type": "section_content"
                    },
                    {
                        "title": "Contact",
                        "section_id": "lorem-ipsum",
                        "actions": [
                            {
                                "label": "Contact",
                                "url": "mailto:bryan.guner@gmail.com",
                                "style": "primary",
                                "icon_class": "dev",
                                "new_window": false,
                                "no_follow": false,
                                "type": "action"
                            }
                        ],
                        "type": "section_cta"
                    }
                ],
                "seo": {
                    "title": "Web-Dev-Hub",
                    "description": "The preview of the Web-Dev-Hub",
                    "extra": [
                        { "name": "og:type", "value": "website", "keyName": "property" },
                        { "name": "og:title", "value": "Web-Dev-Hub", "keyName": "property" },
                        { "name": "og:description", "value": "The preview of the Web-Dev-Hub", "keyName": "property" },
                        { "name": "og:image", "value": "images/4.jpg", "keyName": "property", "relativeUrl": true },
                        { "name": "twitter:card", "value": "summary_large_image" },
                        { "name": "twitter:title", "value": "Web-Dev-Hub" },
                        { "name": "twitter:description", "value": "The preview of the Web-Dev-Hub" },
                        { "name": "twitter:image", "value": "images/4.jpg", "relativeUrl": true }
                    ]
                },
                "template": "advanced"
            },
            "html": "",
            "pages": [
                {
                    "url": "/",
                    "relativePath": "index.md",
                    "relativeDir": "",
                    "base": "index.md",
                    "name": "index",
                    "frontmatter": {
                        "title": "Bryan Guner Web Dev Resource Hub",
                        "sections": [
                            {
                                "section_id": "hero",
                                "type": "section_hero",
                                "title": "I am a musician/electrical engineer turned web developer",
                                "image": "images/cool annimation.gif",
                                "content": "###### **A passionate frontend developer from New Jersey U.S.A**\n\n[](https://www.vagrantup.com/)[![](https://img.icons8.com/color/96/000000/gmail.png)](mailto:bryan.guner@gmail.com)[![](https://img.icons8.com/color/96/000000/youtube.png)](https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA/videos)[![](https://img.icons8.com/color/96/000000/instagram-new.png)](https://www.instagram.com/bgoonz/?hl=en)[![](https://img.icons8.com/color/96/000000/pinterest--v1.png)](https://www.pinterest.com/bryanguner/\\_saved/)[![](https://img.icons8.com/color/96/000000/linkedin.png)](https://www.linkedin.com/in/bryan-guner-046199128/) [![](https://img.icons8.com/color/96/000000/medium-logo.png)](https://bryanguner.medium.com/)\n\n[](https://webpack.js.org/)[ ](https://www.adobe.com/products/xd.html)\n",
                                "actions": []
                            },
                            {
                                "section_id": "features",
                                "type": "section_grid",
                                "col_number": "three",
                                "grid_items": [
                                    {
                                        "content": "Memoization, Tabulation, and Sorting Algorithms by Example\nWhy is looking at runtime not a reliable method of calculating time complexity?\n",
                                        "actions": [{ "label": "Get Started", "url": "/docs", "style": "link" }],
                                        "title": "A Quick Guide To Big O",
                                        "image": "images/my-back.png",
                                        "title_url": "https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522"
                                    },
                                    {
                                        "content": "*Python has a built in help function that let’s you see a description of the source code without having to navigate to it… “-SickNasty … Autor Unknown”  .*\n",
                                        "actions": [
                                            {
                                                "label": "View Posts",
                                                "url": "https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb",
                                                "style": "link"
                                            }
                                        ],
                                        "image_alt": "python",
                                        "title": "Python Guide",
                                        "title_url": "https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb",
                                        "image": "images/smiling-maple.png"
                                    },
                                    {
                                        "content": "This section exists for me to day dream ideas for the future... and maybe... just maybe, hold myself accountable to them.\n",
                                        "actions": [{ "label": "Learn More", "url": "/notes-template", "style": "link" }],
                                        "title": "Guitar Effects Triggering w DTW",
                                        "title_url": "https://github.com/bgoonz/Revamped-Automatic-Guitar-Effect-Triggering",
                                        "image": "images/panoramic-owl.png"
                                    },
                                    {
                                        "title_url": "https://bryanguner.medium.com/introductory-react-part-2-cda01615a186",
                                        "image_alt": "lorem-ipsum",
                                        "content": "As I learn to build web applications in React I will blog about it in this series in an attempt to capture the questions that a complete beginner might encounter that a more seasoned developer would take for granted!\n",
                                        "actions": [],
                                        "type": "grid_item",
                                        "title": "Beginner Guide React",
                                        "image": "images/successful-panda.gif"
                                    },
                                    {
                                        "title_url": "https://dev.to/bgoonz/scope-and-context-in-javascript-5cma",
                                        "image_alt": "lorem-ipsum",
                                        "content": "Scope & Context in JS\n\nThe **scope** of a program in JavaScript is the set of variables that are available for use within the program. \n",
                                        "actions": [],
                                        "type": "grid_item",
                                        "image": "images/pleasant-birch.png",
                                        "title": "Scope & Closure"
                                    },
                                    {
                                        "image_alt": "Every idea needs a medium",
                                        "content": "PostgreSQL Cheat Sheet, Everything You Need to Get Started With VSCode + Extensions & Resources, Super Simple Intro To HTML,  Understanding Git... etc....\n",
                                        "actions": [],
                                        "type": "grid_item",
                                        "title": "My Medium Blog",
                                        "image": "images/curious-mustard.png",
                                        "title_url": "https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b"
                                    }
                                ]
                            },
                            {
                                "title": "Current Interests",
                                "section_id": "interests",
                                "subtitle": "From github repositories to existential questions.",
                                "col_number": "three",
                                "grid_items": [
                                    {
                                        "title": "Angolia",
                                        "title_url": "lorem-ipsum",
                                        "image_alt": "lorem-ipsum",
                                        "content": "## Full Text Search\n\n[Full Text Search](https://www.algolia.com/)\n\n## &#xA;\n",
                                        "actions": [],
                                        "type": "grid_item",
                                        "image": "images/spectacular-turmeric.png"
                                    },
                                    {
                                        "title": "Convolutional Neural Networks",
                                        "title_url": "lorem-ipsum",
                                        "image_alt": "lorem-ipsum",
                                        "content": "Artificial neural networks, usually simply called neural networks, are computing systems vaguely inspired by the biological [neural networks](https://github.com/tensorflow/tensorflow)![](/\\_static/app-assets/neural.PNG)\n\n",
                                        "actions": [],
                                        "type": "grid_item",
                                        "image": "images/neural.PNG"
                                    },
                                    {
                                        "title": "Jamstack",
                                        "title_url": "lorem-ipsum",
                                        "image_alt": "lorem-ipsum",
                                        "content": "## Why Jamstack\n\n*Jamstack is the new standard architecture for the web. Using Git workflows and modern build tools, pre-rendered content is served to a CDN and made dynamic through APIs and serverless functions. Technologies in the stack include JavaScript frameworks, Static Site Generators, Headless CMSs, and CDNs.*\n",
                                        "actions": [],
                                        "type": "grid_item",
                                        "image": "images/jamstack.png"
                                    }
                                ],
                                "type": "section_grid"
                            },
                            {
                                "section_id": "features-two-col",
                                "type": "section_grid",
                                "title": "Resume & Portfolio",
                                "col_number": "two",
                                "grid_items": [
                                    {
                                        "title": "Resume",
                                        "actions": [
                                            { "label": "Learn More", "url": "https://1drv.ms/b/s!AkGiZ9n9CRDSpLsZsnPtiN7p77vq6A", "style": "link" },
                                            {
                                                "label": "Download PDF",
                                                "url": "#",
                                                "style": "link",
                                                "icon_class": "dev",
                                                "new_window": false,
                                                "no_follow": false,
                                                "type": "action"
                                            }
                                        ],
                                        "image": "images/resume.JPG",
                                        "title_url": "https://github.com/bgoonz/resume-cv-portfolio-samples/raw/master/2021-resume/bryan-guner-resume-2021.pdf"
                                    },
                                    {
                                        "title": "Showcase",
                                        "content": "![](/\\_static/app-assets/lambda-demo1.gif)My Projects!\n",
                                        "actions": [{ "label": "Learn More", "url": "/showcase", "style": "link" }],
                                        "image": "images/My Post.png"
                                    }
                                ]
                            },
                            {
                                "title": "Embed Your Repo In My Website",
                                "section_id": "lorem-ipsum",
                                "image_alt": "lorem-ipsum",
                                "image_position": "left",
                                "content": "<iframe width=\"800\" height=\"575\"\n src=\"https://stackblitz.com/edit/sdk-github-project-earatb?devtoolsheight=33\\&embed=1\\&file=index.ts\" title=\"YouTube video\n player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n",
                                "actions": [
                                    {
                                        "label": "Go To Content Playground",
                                        "url": "/gallery",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    }
                                ],
                                "type": "section_content"
                            },
                            {
                                "title": "Code Playground(s)",
                                "section_id": "code-playground",
                                "image_alt": "lorem-ipsum",
                                "image_position": "left",
                                "content": "<iframe width=\"800\" height=\"575\"\n  src=\"https://code-playground.netlify.app/index.html\" title=\"YouTube video\n  player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n  encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                                "actions": [],
                                "type": "section_content"
                            },
                            {
                                "title": "Music",
                                "section_id": "guitar",
                                "image_alt": "bryan-guner",
                                "image_position": "left",
                                "content": "<iframe width=\"560\" height=\"415\" src=\"https://www.youtube.com/embed/xGZSWvFess8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                                "actions": [],
                                "type": "section_content"
                            },
                            {
                                "title": "Nextjs & SanityCMS Blog W Comments",
                                "section_id": "blog",
                                "image_alt": "blog",
                                "image_position": "left",
                                "content": "<iframe width=\"800\" height=\"575\"\n src=\"https://blog-w-comments.vercel.app/\" title=\"YouTube video\n player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                                "actions": [],
                                "type": "section_content"
                            },
                            {
                                "title": "Mini Projects",
                                "section_id": "lorem-ipsum",
                                "image_alt": "lorem-ipsum",
                                "image_position": "left",
                                "content": "<iframe width=\"800\" height=\"575\"\n src=\"https://embedable-content.netlify.app/\" title=\"YouTube video\n player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                                "actions": [],
                                "type": "section_content"
                            },
                            {
                                "title": "Blog-Archive",
                                "section_id": "lorem-ipsum",
                                "image_alt": "lorem-ipsum",
                                "image_position": "left",
                                "content": "<iframe width=\"800\" height=\"575\"\n  src=\"https://bgoonz.blogspot.com/\" title=\"YouTube video\n  player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n  encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                                "actions": [],
                                "type": "section_content"
                            },
                            {
                                "title": "Contact",
                                "section_id": "lorem-ipsum",
                                "actions": [
                                    {
                                        "label": "Contact",
                                        "url": "mailto:bryan.guner@gmail.com",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    }
                                ],
                                "type": "section_cta"
                            }
                        ],
                        "seo": {
                            "title": "Web-Dev-Hub",
                            "description": "The preview of the Web-Dev-Hub",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Web-Dev-Hub", "keyName": "property" },
                                { "name": "og:description", "value": "The preview of the Web-Dev-Hub", "keyName": "property" },
                                { "name": "og:image", "value": "images/4.jpg", "keyName": "property", "relativeUrl": true },
                                { "name": "twitter:card", "value": "summary_large_image" },
                                { "name": "twitter:title", "value": "Web-Dev-Hub" },
                                { "name": "twitter:description", "value": "The preview of the Web-Dev-Hub" },
                                { "name": "twitter:image", "value": "images/4.jpg", "relativeUrl": true }
                            ]
                        },
                        "template": "advanced"
                    },
                    "html": ""
                },
                {
                    "url": "/repos/",
                    "relativePath": "repos.md",
                    "relativeDir": "",
                    "base": "repos.md",
                    "name": "repos",
                    "frontmatter": {
                        "title": "Resource Repos & Sites",
                        "subtitle": "Here are some of my github repositories to pay around with!",
                        "seo": { "title": "", "description": "", "robots": [], "extra": [], "type": "stackbit_page_meta" },
                        "template": "page",
                        "image": "images/perpetual-comet.jpeg"
                    },
                    "html": "<h1>My Top Repos / Websites:</h1>\n<ul>\n<li><a href=\"https://github.com/bgoonz/PYTHON_PRAC\">Python Practice</a></li>\n<li><a href=\"https://lambda-resources.netlify.app/\">Lambda Bootcamp Website</a></li>\n<li><a href=\"https://github.com/bgoonz/React_Notes_V3\">React Notes</a></li>\n<li><a href=\"https://github.com/bgoonz/Project-Showcase\">Project Showcase</a></li>\n<li><a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\">Data Structures &#x26; Algorithms</a></li>\n<li><a href=\"https://github.com/bgoonz/Lambda-Resource-Static-Assets\">Lambda Site Static Content Server</a></li>\n<li><a href=\"https://github.com/bgoonz/mini-project-showcase\">Mini-Project Showcase</a></li>\n<li><a href=\"https://github.com/bgoonz/Useful-Snippets-js\">Useful Snippets</a></li>\n<li><a href=\"https://github.com/bgoonz/Markdown-Templates\">Markdown Templates</a></li>\n<li><a href=\"https://github.com/bgoonz/zumzi-chat-messenger\">Zumzi Video Conferencing App (mesibo api backend)</a></li>\n</ul>"
                },
                {
                    "url": "/notes-template/",
                    "relativePath": "notes-template.md",
                    "relativeDir": "",
                    "base": "notes-template.md",
                    "name": "notes-template",
                    "frontmatter": {
                        "title": "Notes Template",
                        "subtitle": "The Notes Template provides you with a blueprint of default post and page styles.",
                        "image": "images/back.jpeg",
                        "seo": {
                            "title": "Theme Notes Template",
                            "description": "A reference for suggested typographic treatment and styles for your content",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Theme Notes Template", "keyName": "property" },
                                {
                                    "name": "og:description",
                                    "value": "A reference for suggested typographic treatment and styles for your content",
                                    "keyName": "property"
                                },
                                { "name": "og:image", "value": "images/5.jpg", "keyName": "property", "relativeUrl": true },
                                { "name": "twitter:card", "value": "summary_large_image" },
                                { "name": "twitter:title", "value": "Theme Notes Template" },
                                { "name": "twitter:description", "value": "A reference for suggested typographic treatment and styles for your content" },
                                { "name": "twitter:image", "value": "images/5.jpg", "relativeUrl": true }
                            ]
                        },
                        "template": "page"
                    },
                    "html": "<h1>Title</h1>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<ul>\n<li>\n<p>Description:</p>\n<blockquote>\n<p>/_ Description here _/</p>\n</blockquote>\n</li>\n</ul>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>ToC:</h2>\n<ul>\n<li>\n<p><a href=\"#title\">Title</a></p>\n<ul>\n<li><a href=\"#toc\">ToC:</a></li>\n<li><a href=\"#main-notes\">Main Notes:</a></li>\n<li><a href=\"#resource-links\">Resource Links:</a></li>\n<li><a href=\"#10-x-10-table\">10 X 10 Table</a></li>\n<li><a href=\"#headers\">Headers</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#h1\">H1</a></p>\n<ul>\n<li>\n<p><a href=\"#h2\">H2</a></p>\n<ul>\n<li>\n<p><a href=\"#h3\">H3</a></p>\n<ul>\n<li>\n<p><a href=\"#h4\">H4</a></p>\n<ul>\n<li>\n<p><a href=\"#h5\">H5</a></p>\n<ul>\n<li><a href=\"#h6\">H6</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#alt-h1\">Alt-H1</a></p>\n<ul>\n<li><a href=\"#alt-h2\">Alt-H2</a></li>\n<li><a href=\"#emphasis\">Emphasis</a></li>\n<li><a href=\"#lists\">Lists</a></li>\n<li><a href=\"#links\">Links</a></li>\n<li><a href=\"#images\">Images</a></li>\n<li><a href=\"#code-and-syntax-highlighting\">Code and Syntax Highlighting</a></li>\n<li><a href=\"#tables\">Tables</a></li>\n<li><a href=\"#blockquotes\">Blockquotes</a></li>\n<li><a href=\"#inline-html\">Inline HTML</a></li>\n<li><a href=\"#horizontal-rule\">Horizontal Rule</a></li>\n<li><a href=\"#line-breaks\">Line Breaks</a></li>\n<li><a href=\"#youtube-videos\">YouTube Videos</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#this-is-an-h1\">This is an H1</a></p>\n<ul>\n<li>\n<p><a href=\"#this-is-an-h2\">This is an H2</a></p>\n<ul>\n<li>\n<p><a href=\"#this-is-an-h3\">This is an H3</a></p>\n<ul>\n<li><a href=\"#this-is-an-h4\">This is an H4</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#quoting\">Quoting</a></li>\n<li><a href=\"#unordered-lists\">Unordered Lists</a></li>\n<li><a href=\"#ordered-lists\">Ordered Lists</a></li>\n<li><a href=\"#video-embeds\">Video Embeds</a></li>\n<li><a href=\"#code-blocks\">Code Blocks</a></li>\n<li><a href=\"#tables-1\">Tables</a></li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>Main Notes:</h2>\n<pre><code class=\"language-html\"></code></pre>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<pre><code class=\"language-js\"></code></pre>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>Resource Links:</h2>\n<ol>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n</ol>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>10 X 10 Table</h2>\n<table>\n<tbody>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<a name=\"headers\"/>\n<h2>Headers</h2>\n<pre><code class=\"language-no-highlight\"># H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n</code></pre>\n<h1>H1</h1>\n<h2>H2</h2>\n<h3>H3</h3>\n<h4>H4</h4>\n<h5>H5</h5>\n<h6>H6</h6>\n<p>Alternatively, for H1 and H2, an underline-ish style:</p>\n<h1>Alt-H1</h1>\n<h2>Alt-H2</h2>\n<a name=\"emphasis\"/>\n<h2>Emphasis</h2>\n<pre><code class=\"language-no-highlight\">Emphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n</code></pre>\n<p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p>\n<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>\n<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>\n<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>\n<a name=\"lists\"/>\n<h2>Lists</h2>\n<p>(In this example, leading and trailing spaces are shown with with dots: ⋅)</p>\n<pre><code class=\"language-no-highlight\">1. First ordered list item\n2. Another item\n⋅⋅* Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n⋅⋅1. Ordered sub-list\n4. And another item.\n\n⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅\n⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n</code></pre>\n<ol>\n<li>First ordered list item</li>\n<li>Another item</li>\n<li>Unordered sub-list.</li>\n<li>Actual numbers don't matter, just that it's a number</li>\n<li>Ordered sub-list</li>\n<li>\n<p>And another item.</p>\n<p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).</p>\n<p>To have a line break without a paragraph, you will need to use two trailing spaces.<br>\nNote that this line is separate, but within the same paragraph.<br>\n(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p>\n</li>\n<li>Unordered list can use asterisks</li>\n<li>Or minuses</li>\n<li>Or pluses</li>\n</ol>\n<a name=\"links\"/>\n<h2>Links</h2>\n<p>There are two ways to create links.</p>\n<pre><code class=\"language-no-highlight\">[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or &#x3C;http://www.example.com> and sometimes\nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n</code></pre>\n<p><a href=\"https://www.google.com\">I'm an inline-style link</a></p>\n<p><a href=\"https://www.google.com\" title=\"Google&#x27;s Homepage\">I'm an inline-style link with title</a></p>\n<p><a href=\"https://www.mozilla.org\">I'm a reference-style link</a></p>\n<p><a href=\"../blob/master/LICENSE\">I'm a relative reference to a repository file</a></p>\n<p><a href=\"http://slashdot.org\">You can use numbers for reference-style link definitions</a></p>\n<p>Or leave it empty and use the <a href=\"http://www.reddit.com\">link text itself</a>.</p>\n<p>URLs and URLs in angle brackets will automatically get turned into links.\n<a href=\"http://www.example.com\">http://www.example.com</a> or <a href=\"http://www.example.com\">http://www.example.com</a> and sometimes\nexample.com (but not on Github, for example).</p>\n<p>Some text to show that the reference links can follow later.</p>\n<a name=\"images\"/>\n<h2>Images</h2>\n<pre><code class=\"language-no-highlight\">Here's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\"\n</code></pre>\n<p>Here's our logo (hover to see the title text):</p>\n<p>Inline-style:\n<img src=\"https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png\" alt=\"alt text\" title=\"Logo Title Text 1\"></p>\n<p>Reference-style:\n<img src=\"https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png\" alt=\"alt text\" title=\"Logo Title Text 2\"></p>\n<a name=\"code\"/>\n<h2>Code and Syntax Highlighting</h2>\n<p>Code blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and <em>Markdown Here</em> -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. <em>Markdown Here</em> supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the <a href=\"http://softwaremaniacs.org/media/soft/highlight/test.html\">highlight.js demo page</a>.</p>\n<pre><code class=\"language-no-highlight\">Inline `code` has `back-ticks around` it.\n</code></pre>\n<p>Inline <code>code</code> has <code>back-ticks around</code> it.</p>\n<p>Blocks of code are either fenced by lines with three back-ticks <code>`<code></code></code>, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.</p>\n<pre lang=\"no-highlight\"><code>```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n```\n \n```python\ns = \"Python syntax highlighting\"\nprint s\n```\n \n```\nNo language indicated, so no syntax highlighting. \nBut let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n```\n</code></pre>\n<pre><code class=\"language-javascript\">var s = 'JavaScript syntax highlighting';\nalert(s);\n</code></pre>\n<pre><code class=\"language-python\">s = \"Python syntax highlighting\"\nprint s\n</code></pre>\n<pre><code>No language indicated, so no syntax highlighting in Markdown Here (varies on Github).\nBut let's throw in a &#x3C;b>tag&#x3C;/b>.\n</code></pre>\n<a name=\"tables\"/>\n<h2>Tables</h2>\n<p>Tables aren't part of the core Markdown spec, but they are part of GFM and <em>Markdown Here</em> supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application.</p>\n<pre><code class=\"language-no-highlight\">Colons can be used to align columns.\n\n| Tables        |      Are      |  Cool |\n| ------------- | :-----------: | ----: |\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      |   centered    |   $12 |\n| zebra stripes |   are neat    |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\n\n| Markdown | Less      | Pretty     |\n| -------- | --------- | ---------- |\n| *Still*  | `renders` | **nicely** |\n| 1        | 2         | 3          |\n</code></pre>\n<p>Colons can be used to align columns.</p>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th align=\"center\">Are</th>\n<th align=\"right\">Cool</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>col 3 is</td>\n<td align=\"center\">right-aligned</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td>col 2 is</td>\n<td align=\"center\">centered</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td>zebra stripes</td>\n<td align=\"center\">are neat</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody>\n</table>\n<p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.</p>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>Less</th>\n<th>Pretty</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>Still</em></td>\n<td><code>renders</code></td>\n<td><strong>nicely</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<a name=\"blockquotes\"/>\n<h2>Blockquotes</h2>\n<pre><code class=\"language-no-highlight\">> Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n</code></pre>\n<blockquote>\n<p>Blockquotes are very handy in email to emulate reply text.\nThis line is part of the same quote.</p>\n</blockquote>\n<p>Quote break.</p>\n<blockquote>\n<p>This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p>\n</blockquote>\n<a name=\"html\"/>\n<h2>Inline HTML</h2>\n<p>You can also use raw HTML in your Markdown, and it'll mostly work pretty well.</p>\n<pre><code class=\"language-no-highlight\">&#x3C;dl>\n  &#x3C;dt>Definition list&#x3C;/dt>\n  &#x3C;dd>Is something people use sometimes.&#x3C;/dd>\n\n  &#x3C;dt>Markdown in HTML&#x3C;/dt>\n  &#x3C;dd>Does *not* work **very** well. Use HTML &#x3C;em>tags&#x3C;/em>.&#x3C;/dd>\n&#x3C;/dl>\n</code></pre>\n<dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n<a name=\"hr\"/>\n<h2>Horizontal Rule</h2>\n<pre><code>Three or more...\n\n[![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png)](#-)\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n</code></pre>\n<p>Three or more...</p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p>Hyphens</p>\n<hr>\n<p>Asterisks</p>\n<hr>\n<p>Underscores</p>\n<a name=\"lines\"/>\n<h2>Line Breaks</h2>\n<p>My basic recommendation for learning how line breaks work is to experiment and discover -- hit &#x3C;Enter> once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \"Markdown Toggle\" is your friend.</p>\n<p>Here are some things to try out:</p>\n<pre><code>Here's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n</code></pre>\n<p>Here's a line for us to start with.</p>\n<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>\n<p>This line is also begins a separate paragraph, but...<br>\nThis line is only separated by a single newline, so it's a separate line in the <em>same paragraph</em>.</p>\n<p>(Technical note: <em>Markdown Here</em> uses GFM line breaks, so there's no need to use MD's two-space line breaks.)</p>\n<a name=\"videos\"/>\n<h2>YouTube Videos</h2>\n<p>They can't be added directly but you can add an image with a link to the video like this:</p>\n<pre><code class=\"language-no-highlight\">&#x3C;a href=\"http://www.youtube.com/watch?feature=player_embedded&#x26;v=YOUTUBE_VIDEO_ID_HERE\n\" target=\"_blank\">&#x3C;img src=\"http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\"\nalt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" />&#x3C;/a>\n</code></pre>\n<p>Or, in pure Markdown, but losing the image sizing and border:</p>\n<pre><code class=\"language-no-highlight\">[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\n</code></pre>\n<p><strong>This is a paragraph</strong>. Pellentesque habitant morbi <em>tristique senectus et netus et malesuada</em> fames ac turpis egestas. Vestibulum <a href=\"https://www.google.com\">tortor quam</a>, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit <mark>amet est et sapien ullamcorper</mark> pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi.</p>\n<h1>This is an H1</h1>\n<p>Quisque facilisis erat a dui. Nam malesuada ornare dolor. Cras gravida, this is marked text ornare, erat elit consectetuer erat, id egestas pede nibh eget odio. Proin tincidunt, velit vel porta elementum, magna diam molestie sapien, non aliquet massa pede eu diam. Aliquam iaculis. Fusce et ipsum et nulla tristique facilisis.</p>\n<h2>This is an H2</h2>\n<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Morbi commodo, ipsum sed pharetra gravida, orci magna rhoncus neque, id pulvinar odio lorem non turpis. Nullam sit amet enim. Suspendisse id velit vitae ligula volutpat condimentum. Aliquam erat volutpat. Sed quis velit. Nulla facilisi. Nulla libero.</p>\n<h3>This is an H3</h3>\n<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Morbi commodo, ipsum sed pharetra gravida, orci magna rhoncus neque, id pulvinar odio lorem non turpis. Nullam sit amet enim. Suspendisse id velit vitae ligula volutpat condimentum. Aliquam erat volutpat. Sed quis velit. Nulla facilisi. Nulla libero.</p>\n<h4>This is an H4</h4>\n<p>Quisque facilisis erat a dui. Nam malesuada ornare dolor. Cras gravida, diam sit amet rhoncus ornare, erat elit consectetuer erat, id egestas pede nibh eget odio. Proin tincidunt, velit vel porta elementum, magna diam molestie sapien, non aliquet massa pede eu diam. Aliquam iaculis.</p>\n<h2>Quoting</h2>\n<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</p>\n<blockquote>\n<p>Creativity is allowing yourself to make mistakes. Design is knowing which ones to keep. - Scott Adams</p>\n</blockquote>\n<p>Morbi commodo, ipsum sed pharetra gravida, orci magna rhoncus neque, id pulvinar odio lorem non turpis. Nullam sit amet enim. Suspendisse id velit vitae ligula volutpat condimentum. Aliquam erat volutpat. Sed quis velit. Nulla facilisi. Nulla libero.</p>\n<hr />\n<h2>Unordered Lists</h2>\n<ul>\n<li>Donec non tortor in arcu mollis feugiat</li>\n<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit</li>\n<li>Donec id eros eget quam aliquam gravida</li>\n<li>Vivamus convallis urna id felis</li>\n<li>Nulla porta tempus sapien</li>\n</ul>\n<h2>Ordered Lists</h2>\n<ol>\n<li>Donec non tortor in arcu mollis feugiat</li>\n<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit</li>\n<li>Donec id eros eget quam aliquam gravida</li>\n<li>Vivamus convallis urna id felis</li>\n<li>Nulla porta tempus sapien</li>\n</ol>\n<h2>Video Embeds</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8uuFIi-ghPI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2>Code Blocks</h2>\n<p>Blocks of code are either fenced by <code>lines with three back-ticks</code>, or are indented with four spaces.</p>\n<pre><code>&#x3C;!-- Some example CSS code -->\nbody {\n  color:red;\n}\n</code></pre>\n<pre><code class=\"language-javascript\">window.$docsify = {\n    coverpage: true,\n\n    // Custom file name\n    coverpage: 'cover.md',\n\n    // mutiple covers\n    coverpage: ['/', '/zh-cn/'],\n\n    // mutiple covers and custom file name\n    coverpage: {\n        '/': 'cover.md',\n        '/zh-cn/': 'cover.md'\n    }\n};\n</code></pre>\n<h2>Tables</h2>\n<div class=\"responsive-table\">\n  <table>\n      <caption>Table with thead, tfoot, and tbody</caption>\n    <thead>\n      <tr>\n        <th>Header content 1</th>\n        <th>Header content 2</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Body content 1</td>\n        <td>Body content 2</td>\n      </tr>\n    </tbody>\n    <tfoot>\n      <tr>\n        <td>Footer content 1</td>\n        <td>Footer content 2</td>\n      </tr>\n    </tfoot>\n  </table>\n</div>\n<div class=\"note\"><strong>Note:</strong> Both of the features you used above are parts of the Document Object Model (DOM) API, which allows you to manipulate documents.</div>\n<div class=\"important\"><strong>Important:</strong> In this article, try entering the example code lines into your JavaScript console to see what happens. For more details on JavaScript consoles, see Discover browser developer tools.</div>"
                },
                {
                    "url": "/showcase/",
                    "relativePath": "showcase.md",
                    "relativeDir": "",
                    "base": "showcase.md",
                    "name": "showcase",
                    "frontmatter": {
                        "title": "Showcase",
                        "sections": [
                            {
                                "section_id": "hero",
                                "type": "section_hero",
                                "title": "Showcase",
                                "image": "images/charming-dolphin.gif",
                                "content": "Some of my more engaging projects!\n"
                            },
                            {
                                "section_id": "showcase",
                                "type": "section_grid",
                                "col_number": "three",
                                "grid_items": [
                                    {
                                        "title": "Git HTML PREVIEW",
                                        "title_url": "https://github.com/bgoonz/GIT-HTML-PREVIEW-TOOL",
                                        "image": "images/futuristic-mars.gif",
                                        "content": "Preview html files by pasting their url into the search bar\n\n**Access-Control-Allow-Origin Header When Site A tries to fetch content from Site B**\n",
                                        "actions": [
                                            {
                                                "label": "Live Site",
                                                "url": "/https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/",
                                                "style": "icon",
                                                "icon_class": "github",
                                                "new_window": true,
                                                "no_follow": false,
                                                "type": "action"
                                            }
                                        ],
                                        "image_alt": "git html preview"
                                    },
                                    {
                                        "title": "Guitar Effects Automation Using Subsequence Dynamic Time Warping",
                                        "title_url": "https://github.com/bgoonz/Revamped-Automatic-Guitar-Effect-Triggering",
                                        "image": "images/curious-europa.gif",
                                        "content": "**Modified subsequence dynamic time warping feature detection using pure data implemented in python**\n",
                                        "actions": [
                                            {
                                                "label": "Slide Show",
                                                "url": "https://1drv.ms/p/s!AkGiZ9n9CRDSpY88x407JwfEKNrDxg?e=faHSx9",
                                                "style": "link",
                                                "icon_class": "dev",
                                                "new_window": true,
                                                "no_follow": false,
                                                "type": "action"
                                            }
                                        ]
                                    },
                                    {
                                        "title": "Data Structures Interactive Learning Hub",
                                        "title_url": "https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/",
                                        "image": "images/ds-algo.gif",
                                        "content": "**Big O notation is the language we use for talking about how long an algorithm takes to run. It's how we compare the efficiency of different approaches to a problem.**\n",
                                        "actions": [
                                            {
                                                "label": "Live Site",
                                                "url": "https://github.com/bgoonz/DS-ALGO-OFFICIAL",
                                                "style": "icon",
                                                "icon_class": "github",
                                                "new_window": true,
                                                "no_follow": false,
                                                "type": "action"
                                            }
                                        ]
                                    },
                                    {
                                        "title": "Learning Redux",
                                        "title_url": "https://learning-redux42.netlify.app/",
                                        "image_alt": "lorem-ipsum",
                                        "content": "***React Redux provides a pair of custom React hooks that allow your React components to interact with the Redux store.***\n",
                                        "actions": [
                                            {
                                                "label": "Website",
                                                "url": "https://learning-redux42.netlify.app/",
                                                "style": "icon",
                                                "icon_class": "dev",
                                                "new_window": true,
                                                "no_follow": false,
                                                "type": "action"
                                            }
                                        ],
                                        "type": "grid_item",
                                        "image": "images/best-birch.gif"
                                    },
                                    {
                                        "title": "Mihir-Beg-Music.com",
                                        "title_url": "https://panoramic-eggplant-452e4.netlify.app/",
                                        "image": "images/7a8bc98e902a2f6dea90386cdfb154c2.png",
                                        "content": "Artist Showcase & Podcasting Site\n",
                                        "actions": [
                                            {
                                                "label": "Live Site",
                                                "url": "https://panoramic-eggplant-452e4.netlify.app/",
                                                "style": "link",
                                                "icon_class": "dev",
                                                "new_window": true,
                                                "no_follow": false,
                                                "type": "action"
                                            }
                                        ]
                                    },
                                    {
                                        "title": "Aux Blog w NextJS",
                                        "title_url": "https://bgoonz-blog-v3-0.netlify.app/",
                                        "image_alt": "get in touch",
                                        "content": "**Here lives my alternate/backup blog site!**\n",
                                        "actions": [
                                            {
                                                "label": "git repo",
                                                "url": "https://github.com/bgoonz/alternate-blog-theme",
                                                "style": "icon",
                                                "icon_class": "github",
                                                "new_window": true,
                                                "no_follow": false,
                                                "type": "action"
                                            }
                                        ],
                                        "type": "grid_item",
                                        "image": "images/21ecc2f26e2641c8e9aae5479481bbe2 (5).png"
                                    },
                                    {
                                        "title": "Potluck Planner",
                                        "title_url": "https://potluck-landing.netlify.app/",
                                        "image_alt": "lorem-ipsum",
                                        "content": "## Potluck Planner\n\nIf you have ever tried to organize a potluck through text messages, online to-do lists or spreadsheets, you'll understand why this app is essential.In the world of social gatherings and potlucks the \"Potluck Planner\" is king. This is your place for all things pot luck.\n\n",
                                        "actions": [],
                                        "type": "grid_item",
                                        "image": "images/potluck-planner.JPG"
                                    },
                                    {
                                        "title": "Zumzi Video Conferencing",
                                        "title_url": "https://github.com/bgoonz/zumzi-chat-messenger",
                                        "image_alt": "video chat",
                                        "content": "**Features:   Live Streaming, Screen Sharing, Fine control over all video & audio parameters and user permissions, Supports video streaming at various resolutions: Standard, HD, FHD and 4K, Group Chat, One-to-One chat, Invite Participants**\n",
                                        "actions": [
                                            {
                                                "label": "Live Site",
                                                "url": "https://goofy-perlman-0f61df.netlify.app/",
                                                "style": "link",
                                                "icon_class": "dev",
                                                "new_window": true,
                                                "no_follow": false,
                                                "type": "action"
                                            }
                                        ],
                                        "type": "grid_item",
                                        "image": "images/energetic-sunflower.png"
                                    },
                                    {
                                        "title": "Web Audio Workstation",
                                        "title_url": "lorem-ipsum",
                                        "image_alt": "lorem-ipsum",
                                        "content": "Made using jQuery and Vanilla JS\n\n",
                                        "actions": [
                                            {
                                                "label": "Go To Live Site",
                                                "url": "https://mihirbegmusiclab.netlify.app/",
                                                "style": "link",
                                                "icon_class": "dev",
                                                "new_window": true,
                                                "no_follow": false,
                                                "type": "action"
                                            },
                                            {
                                                "label": "Github Repo",
                                                "url": "https://github.com/bgoonz/MihirBegMusicLab",
                                                "style": "link",
                                                "icon_class": "dev",
                                                "new_window": true,
                                                "no_follow": false,
                                                "type": "action"
                                            }
                                        ],
                                        "type": "grid_item",
                                        "image": "images/royal-kangaroo.JPG"
                                    }
                                ]
                            }
                        ],
                        "seo": {
                            "title": "Showcase",
                            "description": "This is the showcase page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Showcase", "keyName": "property" },
                                { "name": "og:description", "value": "This is the showcase page", "keyName": "property" },
                                { "name": "og:image", "value": "images/5.jpg", "keyName": "property", "relativeUrl": true },
                                { "name": "twitter:card", "value": "summary_large_image" },
                                { "name": "twitter:title", "value": "Showcase" },
                                { "name": "twitter:description", "value": "This is the showcase page" },
                                { "name": "twitter:image", "value": "images/5.jpg", "relativeUrl": true }
                            ]
                        },
                        "template": "advanced"
                    },
                    "html": ""
                },
                {
                    "url": "/review/",
                    "relativePath": "review.md",
                    "relativeDir": "",
                    "base": "review.md",
                    "name": "review",
                    "frontmatter": {
                        "title": "review",
                        "sections": [],
                        "seo": { "title": "", "description": "", "robots": [], "extra": [], "type": "stackbit_page_meta" },
                        "template": "advanced"
                    },
                    "html": "<hr>\n<h2>description: Review</h2>\n<h1>Review-Of-Previous-Concepts</h1>\n<h3>Review of Concepts</h3>\n<h3>Running JS Locally Concepts</h3>\n<ul>\n<li>\n<p>Match the commands <code>ls</code>, <code>cd</code>, <code>pwd</code> to their descriptions</p>\n<ul>\n<li><code>ls</code> lists contents of current directory</li>\n<li>\n<p><code>cd</code> changes current directory</p>\n<ul>\n<li><code>cd ..</code> takes you up one level</li>\n<li><code>cd</code> alone takes you back home</li>\n</ul>\n</li>\n<li><code>pwd</code> returns current directory</li>\n</ul>\n</li>\n<li>Given a folder structure diagram, a list of 'cd (path)' commands and target files, match the paths to the target files.</li>\n<li>Use VSCode to create a folder. Within the folder create a .js file containing <code>console.log('hello new world');</code> and save it.</li>\n<li>Use node to execute a JavaScript file in the terminal</li>\n</ul>\n<h3>Plain Old JS Object Lesson Concepts</h3>\n<ul>\n<li>\n<p>Label variables as either Primitive vs. Reference</p>\n<ul>\n<li>\n<p>primitives: strings, booleans, numbers, null and undefined</p>\n<ul>\n<li>primitives are immutable</li>\n</ul>\n</li>\n<li>\n<p>refereces: objects (including arrays)</p>\n<ul>\n<li>references are mutable</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Identify when to use <code>.</code> vs <code>[]</code> when accessing values of an object</p>\n<ul>\n<li>\n<p>dot syntax <code>object.key</code></p>\n<ul>\n<li>easier to read</li>\n<li>easier to write</li>\n<li>cannot use variables as keys</li>\n<li>keys cannot begin with a number</li>\n</ul>\n</li>\n<li>\n<p>bracket notation <code>object[\"key]</code></p>\n<ul>\n<li>allows variables as keys</li>\n<li>strings that start with numbers can be use as keys</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Write an object literal with a variable key using interpolation</p>\n<ul>\n<li>\n<p>put it in brackets to access the value of the variable, rather than just make the value that string</p>\n<pre><code class=\"language-javascript\">let a = 'b';\nlet obj = { a: 'letter_a', [a]: 'letter b' };\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Use the <code>obj[key] !== undefined</code> pattern to check if a given variable that contains a key exists in an object</p>\n<ul>\n<li>can also use <code>(key in object)</code> syntax interchangeably (returns a boolean)</li>\n</ul>\n</li>\n<li>\n<p>Utilize Object.keys and Object.values in a function</p>\n<ul>\n<li><code>Object.keys(obj)</code> returns an array of all the keys in <code>obj</code></li>\n<li><code>Object.values(obj)</code> returns an array of the values in <code>obj</code></li>\n</ul>\n</li>\n<li>\n<p>Iterate through an object using a <code>for in</code> loop</p>\n<pre><code class=\"language-javascript\">let printValues = function (obj) {\n    for (let key in obj) {\n        let value = obj[key];\n        console.log(value);\n    }\n};\n</code></pre>\n</li>\n<li>\n<p>Define a function that utilizes <code>...rest</code> syntax to accept an arbitrary number of arguments</p>\n<ul>\n<li><code>...rest</code> syntax will store all additional arguments in an array</li>\n<li>\n<p>array will be empty if there are no additional arguments</p>\n<pre><code class=\"language-javascript\">let myFunction = function (str, ...strs) {\n    console.log('The first string is ' + str);\n    console.log('The rest of the strings are:');\n    strs.forEach(function (str) {\n        console.log(str);\n    });\n};\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3></h3>\n<ul>\n<li>\n<p>Use <code>...spread</code> syntax for Object literals and Array literals</p>\n<pre><code class=\"language-javascript\">let arr1 = ['a', 'b', 'c'];\nlet longer = [...arr1, 'd', 'e']; // [\"a\", \"b\", \"c\", \"d\", \"e\"]\n// without spread syntax, this would give you a nested array\nlet withoutRest = [arr1, 'd', 'e']; // [[\"a\", \"b\", \"c\"], \"d\", \"e\"]\n</code></pre>\n</li>\n<li>\n<p>Destructure an array to reference specific elements</p>\n<p>```javascript</p>\n<p>let array = [35,9];</p>\n<p>let [firstEl, secondEl] = array;</p>\n<p>console.log(firstEl); // => 35</p>\n<p>console.log(secondEl); // => 9</p>\n</li>\n</ul>\n<p>// can also destructure using ... syntax let array = [35,9,14]; let [head, ...tail] = array; console.log(head); // => 35 console.log(tail); // => [9, 14]</p>\n<pre><code class=\"language-javascript\">- Destructure an object to reference specific values\n   - if you want to use variable names that don't match the keys, you can use aliasing\n      - `let { oldkeyname: newkeyname } = object`\n   - rule of thumb—only destructure values from objects that are two levels deep\n```javascript\nlet obj = {\n   name: \"Wilfred\",\n   appearance: [\"short\", \"mustache\"],\n   favorites: {\n      color: \"mauve\",\n      food: \"spaghetti squash\",\n      number: 3\n   }\n}\n// with variable names that match keys\nlet { name, appearance } = obj;\nconsole.log(name); // \"Wilfred\"\nconsole.log(appearance); // [\"short\", \"mustache\"]\n\n// with new variable names (aliasing)\nlet {name: myName, appearance: myAppearance} = obj;\n\nconsole.log(myName); // \"Wilfred\"\nconsole.log(myAppearance); // [\"short\", \"mustache\"]\n\n// in a function call\nlet sayHello = function({name}) {\nconsole.log(\"Hello, \" + name); // \"Hello Wilfred\"\n}\n\n// nested objects + aliasing\nlet { favorites: {color, food: vegetable} } = obj;\nconsole.log(color, vegetable); //=> mauve spaghetti squash\n</code></pre>\n<ul>\n<li>\n<p>Write a function that accepts a array as an argument and returns an object representing the count of each character in the array</p>\n<pre><code class=\"language-javascript\">//\nlet elementCounts = function (array) {\n    let obj = {};\n    array.forEach(function (el) {\n        if (el in obj) obj[el] += 1;\n        else obj[el] = 1;\n    });\n    return obj;\n};\nconsole.log(elementCounts(['e', 'f', 'g', 'f'])); // => Object {e: 1, f: 2, g: 1}\n</code></pre>\n</li>\n</ul>\n<h3>Callbacks Lesson Concepts</h3>\n<ul>\n<li>\n<p>Given multiple plausible reasons, identify why functions are called \"First Class Objects\" in JavaScript.</p>\n<ul>\n<li>they can be stored in variables, passed as arguments to other functions, and serve as return value for a function</li>\n<li>supports same basic operations as other types (strings, bools, numbers)</li>\n<li>higher-order functions take functions as arguments or return functions as values</li>\n</ul>\n</li>\n<li>\n<p>Given a code snippet containing an anonymous callback, a named callback, and multiple <code>console.log</code>s, predict what will be printed</p>\n<ul>\n<li>what is this referring to?</li>\n</ul>\n</li>\n<li>Write a function that takes in a value and two callbacks. The function should return the result of the callback that is greater.</li>\n</ul>\n<pre><code class=\"language-javascript\">let greaterCB = function (val, callback1, callback2) {\n    if (callback1(val) > callback2(val)) {\n        return callback1(val);\n    }\n    return callback2(val);\n};\n\nlet greaterCB = function (val, callback1, callback2) {\n    if (callback1(val) > callback2(val)) {\n        return callback1(val);\n    }\n    return callback2(val);\n};\n</code></pre>\n<p>// shorter version let greaterCB = function(val, callback1, callback2) { return Math.max(callback1(val), callback2(val)); } // even shorter, cause why not let greaterCB = (val, cb1, cb2) => Math.max(cb1(val), cb2(val));</p>\n<pre><code class=\"language-javascript\">- Write a function, myMap, that takes in an array and a callback as arguments. The function should mimic the behavior of `Array#map`.\n```javascript\nlet myMap = function(array, callback) {\n   let newArr = [];\n   for (let i = 0; i &#x3C; array.length; i ++) {\n      mapped = callback(array[i], i, array);\n      newArr.push(mapped);\n   }\n   return newArr;\n}\nconsole.log( myMap([16,25,36], Math.sqrt)); // => [4, 5, 6];\n\nlet myMapArrow = (array, callback) => {\n   let newArr = [];\n   array.forEach( (ele, ind, array) => {\n      newArr.push(callback(ele, ind, array));\n   })\n   return newArr;\n}\nconsole.log(myMapArrow([16,25,36], Math.sqrt)); // => [4, 5, 6];\n</code></pre>\n<ul>\n<li>\n<p>Write a function, myFilter, that takes in an array and a callback as arguments. The function should mimic the behavior of <code>Array#filter</code>.</p>\n<pre><code class=\"language-javascript\">let myFilter = function (array, callback) {\n    let filtered = [];\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (callback(array[i])) {\n            filtered.push(array[i], i, array);\n        }\n    }\n};\n</code></pre>\n</li>\n<li>\n<p>Write a function, myEvery, that takes in an array and a callback as arguments. The function should mimic the behavior of <code>Array#every</code>.</p>\n<pre><code class=\"language-javascript\">let myEvery = function (array, callback) {\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (!callback(array[i], i, array)) {\n            return false;\n        }\n    }\n    return true;\n};\n// with arrow function syntax\nlet myEvery = (array, callback) => {\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (!callback(array[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n</code></pre>\n</li>\n</ul>\n<h3>Scope Lesson Concepts</h3>\n<ul>\n<li>\n<p>Identify the difference between <code>const</code>, <code>let</code>, and <code>var</code> declarations</p>\n<ul>\n<li><code>const</code> - cannot reassign variable, scoped to block</li>\n<li><code>let</code> - can reassign variable, scoped to block</li>\n<li><code>var</code> - outdated, may or may not be reassigned, scoped to function. can be not just reassigned, but also redeclared!</li>\n<li>a variable will always evaluate to the value it contains regardless of how it was declared</li>\n</ul>\n</li>\n<li>\n<p>Explain the difference between <code>const</code>, <code>let</code>, and <code>var</code> declarations</p>\n<ul>\n<li>\n<p><code>var</code> is function scoped—so if you declare it anywhere in a function, the declaration (but not assignment) is \"hoisted\"</p>\n<ul>\n<li>so it will exist in memory as \"undefined\" which is bad and unpredictable</li>\n</ul>\n</li>\n<li><code>var</code> will also allow you to redeclare a variable, while <code>let</code> or <code>const</code> will raise a syntax error. you shouldn't be able to do that!</li>\n<li><code>const</code> won't let you reassign a variable, but if it points to a mutable object, you will still be able to change the value by mutating the object</li>\n<li>block-scoped variables allow new variables with the same name in new scopes</li>\n<li>block-scoped still performs hoisting of all variables within the block, but it doesn't initialize to the value of <code>undefined</code> like <code>var</code> does, so it throws a specific reference error if you try to access the value before it has been declared</li>\n<li>\n<p>if you do not use <code>var</code> or <code>let</code> or <code>const</code> when initializing, it will be declared as global—THIS IS BAD</p>\n<ul>\n<li>if you assign a value without a declaration, it exists in the global scope (so then it would be accessible by all outer scopes, so bad). however, there's no hoisting, so it doesn't exist in the scope until after the line is run</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining</p>\n<ul>\n<li>scope of a program means the set of variables that are available for use within the program</li>\n<li>\n<p>global scope is represented by the <code>window</code> object in the browser and the <code>global</code> object in Node.js</p>\n<ul>\n<li>global variables are available everywhere, and so increase the risk of name collisions</li>\n</ul>\n</li>\n<li>\n<p>local scope is the set of variables available for use within the function</p>\n<ul>\n<li>when we enter a function, we enter a new scope</li>\n<li>includes functions arguments, local variables declared inside function, and any variables that were already declared when the function is defined (hmm about that last one)</li>\n</ul>\n</li>\n<li>for blocks (denoted by curly braces <code>{}</code>, as in conditionals or <code>for</code> loops), variables can be block scoped</li>\n<li>\n<p>inner scope does not have access to variables in the outer scope</p>\n<ul>\n<li>scope chaining—if a given variable is not found in immediate scope, javascript will search all accessible outer scopes until variable is found</li>\n<li>so an inner scope can access outer scope variables</li>\n<li>but an outer scope can never access inner scope variables</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Define an arrow function</p>\n<p>```javascript</p>\n<p>let arrowFunction = (param1, param2) => {</p>\n<p>let sum = param1 + param2;</p>\n<p>return sum;</p>\n<p>}</p>\n</li>\n</ul>\n<p>// with 1 param you can remove parens around parameters let arrowFunction = param => { param += 1; return param; }</p>\n<p>// if your return statement is one line, you can use implied return let arrowFunction = param => param + 1;</p>\n<p>// you don't have to assign to variable, can be anonymous // if you never need to use it again param => param + 1;</p>\n<p>```</p>\n<ul>\n<li>\n<p>Given an arrow function, deduce the value of <code>this</code> without executing the code</p>\n<ul>\n<li>arrow functions are automatically bound to the context they were declared in</li>\n<li>unlike regular function which use the context they are invoked in (unless they have been bound using <code>Function#bind</code>)</li>\n<li>if you implement an arrow function as a method in an object the context it will be bound to is NOT the object itself, but the global context</li>\n<li>\n<p>so you can't use an arrow function to define a method directly</p>\n<p>```javascript</p>\n<p>let obj = {</p>\n<p>name: \"my object\",</p>\n<p>unboundFunc: function () {</p>\n<p>return this.name;</p>\n<p>// this function will be able to be called on different objects</p>\n<p>},</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3></h3>\n<p>boundToGlobal: () => { return this.name; // this function, no matter how you call it, will be called // on the global object, and it cannot be rebound // this is because it was defined using arrow syntax },</p>\n<pre><code class=\"language-javascript\">makeFuncBoundToObj: function () {\n    return () => {\n        return this.name;\n    }\n    // this function will return a function that will be bound\n    // to the object where we call the outer method\n    // because the arrow syntax is nested inside one of this\n    // function's methods, it cannot be rebound\n},\n\nmakeUnboundFunc: function () {\n    return function () {\n        return this.name;\n    }\n    //this function will return a function that will still be unbound\n},\n\nimmediatelyInvokedFunc: function () {\n    return this.name;\n}(), // this property will be set to the return value of this anonymous function,\n// which is invoked during the object definition;\n// basically, it's a way to check the context inside of an object, at this moment\n\ninnerObj: {\n    name: \"inner object\",\n    innerArrowFunc: () =>  {\n        return this.name;\n    } // the context inside a nested object is not the parent, it's still\n    // the global object. entering an object definition doesn't change the context\n},\n\n\nlet otherObj = { name: \"my other object\" }\n// call unboundFunc on obj, we get \"my object\" console.log(\"unboundFunc: \", obj.unboundFunc()); // => \"my object\" // assign unboundFunc to a variable and call it let newFunc = obj.unboundFunc; // this newFunc will default to being called on global object console.log(\"newFunc: \",newFunc()); // => undefined // but you could bind it directly to a different object if you wanted console.log(\"newFunc: \", newFunc.bind(otherObj)()); // \"my other object\"\n// meanwhile, obj.boundToGlobal will only ever be called on global object console.log(\"boundToGlobal: \", obj.boundToGlobal()); //=> undefined let newBoundFunc = obj.boundToGlobal; console.log(\"newBoundFunc: \", newBoundFunc()); // => undefined // even if you try to directly bind to another object, it won't work! console.log(\"newBoundFunc: \", newBoundFunc.bind(otherObj)()); // => undefined\n// let's make a new function that will always be bound to the context // where we call our function maker let boundFunc = obj.makeFuncBoundToObj();// note that we're invoking, not just assigning console.log(\"boundFunc: \", boundFunc()); // => \"my object\" // we can't rebind this function console.log(\"boundFunc: \", boundFunc.bind(otherObj)()) // =>\"my object\"\n// but if I call makeFuncBoundToObj on another context // the new bound function is stuck with that other context let boundToOther = obj.makeFuncBoundToObj.bind(otherObj)(); console.log(\"boundToOther: \", boundToOther()); // => \"my other object\" console.log(\"boundToOther: \", boundToOther.bind(obj)()) // \"my other object\"\n// the return value of my immediately invoked function // shows that the context inside of the object is the // global object, not the object itself // context only changes inside a function that is called // on an object console.log(\"immediatelyInvokedFunc: \", obj.immediatelyInvokedFunc); // => undefined\n// even though we're inside a nested object, the context is // still the same as it was outside the outer object // in this case, the global object console.log(\"innerArrowFunc: \", obj.innerObj.innerArrowFunc()); // => undefined\n</code></pre>\n<p>}</p>\n<pre><code class=\"language-javascript\">- Implement a closure and explain how the closure effects scope\n   - a closure is \"the combination of a function and the lexical environment within which that function was declared\"\n      - alternatively, \"when an inner function uses or changes variables in an outer function\"\n   - closures have access to any variables within their own scope + scope of outer functions + global scope — the set of all these available variables is \"lexical environemnt\"\n   - closure keeps reference to all variables **even if the outer function has returned**\n      - each function has a private mutable state that cannot be accessed externally\n      - the inner function will maintain a reference to the scope in which it was declared. so it has access to variables that were initialized in any outer scope—even if that scope\n      - if a variable exists in the scope of what could have been accessed by a function (e.g. global scope, outer function, etc), does that variable wind up in the closure even if it never got accessed?\n      - if you change the value of a variable (e.g. i++) you will change the value of that variable in the scope that it was declared in\n\n\n```javascript\nfunction createCounter() {\n   // this function starts a counter at 0, then returns a\n   // new function that can access and change that counter\n   //\n   // each new counter you create will have a single internal\n   // state, that can be changed only by calling the function.\n   // you can't access that state from outside of the function,\n   // even though the count variable in question is initialized\n   // by the outer function, and it remains accessible to the\n   // inner function after the outer function returns.\n   let count = 0;\n   return function() {\n      count ++;\n      return count;\n   }\n}\n\nlet counter = createCounter();\nconsole.log(counter()); //=> 1\nconsole.log(counter()); //=> 2\n// so the closure here comes into play because\n// an inner function is accessing and changing\n// a variable from an outer function\n\n// the closure is the combination of the counter\n// function and the all the variables that existed\n// in the scope that it was declared in. because\n// inner blocks/functions have access to outer\n// scopes, that includes the scope of the outer\n// function.\n\n// so counter variable is a closure, in that\n// it contains the inner count value that was\n// initialized by the outer createCounter() function\n// count has been captured or closed over\n\n// this state is private, so if i run createCounter again\n// i get a totally separate count that doesn't interact\n// with the previous one and each of the new functions\n// will have their own internal state based on the\n// initial declaration in the now-closed outer function\n\nlet counter2 = createCounter();\nconsole.log(counter2()); // => 1\n\n// if i set a new function equal to my existing counter\n// the internal state is shared with the new function\nlet counter3 = counter2;\nconsole.log(counter3());\n</code></pre>\n<ul>\n<li>\n<p>Define a method that references <code>this</code> on an object literal</p>\n<ul>\n<li>\n<p>when we use <code>this</code> in a method it refers to the object that the method is invoked on</p>\n<ul>\n<li>it will let you access other pieces of information from within that object, or even other methods</li>\n<li>method style invocation - <code>object.method(args)</code> (e.g. built in examples like <code>Array#push</code>, or <code>String#toUpperCase</code>)</li>\n</ul>\n</li>\n<li>context is set every time we invoke a function</li>\n<li>function style invocation sets the context to the global object no matter what</li>\n<li>being inside an object does not make the context that object! you still have to use method-style invocation</li>\n</ul>\n</li>\n<li>\n<p>Utilize the built in <code>Function#bind</code> on a callback to maintain the context of this</p>\n<ul>\n<li>when we call bind on a function, we get an exotic function back—so the context will always be the same for that new function</li>\n</ul>\n<pre><code class=\"language-text\">let cat = {\npurr: function () {\nconsole.log(\"meow\");\n},\npurrMore: function () {\nthis.purr();\n},\n};\nlet sayMeow = cat.purrMore; console.log(sayMeow()); // TypeError: this.purr is not a function\n\n\n// we can use the built in Function.bind to ensure our context, our this, // is the cat object let boundCat = sayMeow.bind(cat);\nboundCat(); // prints \"meow\"\n</code></pre>\n<p>``</p>\n</li>\n</ul>\n<h3></h3>\n<h3></h3>\n<pre><code class=\"language-javascript\">   - `bind` can also work with arguments, so you can have a version of a function with particular arguments and a particular context. the first arg will be the context aka the `this` you want it to use. the next arguments will be the functions arguments that you are binding\n      - if you just want to bind it to those arguments in particular, you can use `null` as the first argument, so the context won't be bound, just the arguments\n- Given a code snippet, identify what `this` refers to\n   - important to recognize the difference between scope and context\n      - scope works like a dictionary that has all the variables that are available within a given block, plus a pointer back the next outer scope (which itself has pointers to new scopes until you reach the global scope. so you can think about a whole given block's scope as a kind of linked list of dictionaries) (also, this is not to say that scope is actually implemented in this way, that is just the schema that i can use to understand it)\n      - context refers to the value of the `this` keyword\n   - the keyword `this` exists in every function and it evaluates to the object that is currently invoking that function\n   - so the context is fairly straightforward when we talk about methods being called on specific objects\n   - you could, however, call an object's method on something other than that object, and then this would refer to the context where/how it was called, e.g.\n```javascript\nlet dog = {\n   name: \"Bowser\",\n   changeName: function () {\n      this.name = \"Layla\";\n  },\n};\n\n// note this is **not invoked** - we are assigning the function itself\nlet change = dog.changeName;\nconsole.log(change()); // undefined\n\n// our dog still has the same name\nconsole.log(dog); // { name: 'Bowser', changeName: [Function: changeName] }\n\n// instead of changing the dog we changed the global name!!!\nconsole.log(this); // Object [global] {etc, etc, etc,  name: 'Layla'}\n</code></pre>\n<ul>\n<li>\n<p>CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!</p>\n<ul>\n<li>could throw an error if it expects this to have some other method or whatever that doesn't exist</li>\n<li>you could also overwrite values or assign values to exist in a space where they should not exist</li>\n</ul>\n</li>\n<li>\n<p>if you call a function as a callback, it will set <code>this</code> to be the outer function itself, even if the function you were calling is a method that was called on a particular object</p>\n<pre><code class=\"language-text\">let cat = {\npurr: function () {\nconsole.log(\"meow\");\n},\npurrMore: function () {\nthis.purr();\n},\n};\nglobal.setTimeout(cat.purrMore, 5000); // 5 seconds later: TypeError: this.purr is not a function\n</code></pre>\n</li>\n</ul>\n<p>we can use strict mode with <code>\"use strict\";</code> this will prevent you from accessing the global object with <code>this</code> in functions, so if you try to call <code>this</code> in the global context and change a value, you will get a type error, and the things you try to access will be undefined</p>\n<h3></h3>\n<p>let sayMeow = cat.purrMore; console.log(sayMeow()); // TypeError: this.purr is not a function</p>\n<p>// we can use the built in Function.bind to ensure our context, our <code>this</code>, // is the cat object let boundCat = sayMeow.bind(cat);</p>\n<p>boundCat(); // prints \"meow\"</p>\n<pre><code class=\"language-text\">   - `bind` can also work with arguments, so you can have a version of a function with particular arguments and a particular context. the first arg will be the context aka the `this` you want it to use. the next arguments will be the functions arguments that you are binding\n      - if you just want to bind it to those arguments in particular, you can use `null` as the first argument, so the context won't be bound, just the arguments\n- Given a code snippet, identify what `this` refers to\n   - important to recognize the difference between scope and context\n      - scope works like a dictionary that has all the variables that are available within a given block, plus a pointer back the next outer scope (which itself has pointers to new scopes until you reach the global scope. so you can think about a whole given block's scope as a kind of linked list of dictionaries) (also, this is not to say that scope is actually implemented in this way, that is just the schema that i can use to understand it)\n      - context refers to the value of the `this` keyword\n   - the keyword `this` exists in every function and it evaluates to the object that is currently invoking that function\n   - so the context is fairly straightforward when we talk about methods being called on specific objects\n   - you could, however, call an object's method on something other than that object, and then this would refer to the context where/how it was called, e.g.\n```javascript\nlet dog = {\n   name: \"Bowser\",\n   changeName: function () {\n      this.name = \"Layla\";\n  },\n};\n\n// note this is **not invoked** - we are assigning the function itself\nlet change = dog.changeName;\nconsole.log(change()); // undefined\n\n// our dog still has the same name\nconsole.log(dog); // { name: 'Bowser', changeName: [Function: changeName] }\n\n// instead of changing the dog we changed the global name!!!\nconsole.log(this); // Object [global] {etc, etc, etc,  name: 'Layla'}\n</code></pre>\n<ul>\n<li>\n<p>CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!</p>\n<ul>\n<li>could throw an error if it expects this to have some other method or whatever that doesn't exist</li>\n<li>you could also overwrite values or assign values to exist in a space where they should not exist</li>\n</ul>\n</li>\n<li>\n<p>if you call a function as a callback, it will set <code>this</code> to be the outer function itself, even if the function you were calling is a method that was called on a particular object</p>\n<p>```javascript</p>\n<p>let cat = {</p>\n<p>purr: function () {</p>\n<p>console.log(\"meow\");</p>\n<p>},</p>\n<p>purrMore: function () {</p>\n<p>this.purr();</p>\n<p>},</p>\n<p>};</p>\n</li>\n</ul>\n<p>global.setTimeout(cat.purrMore, 5000); // 5 seconds later: TypeError: this.purr is not a function</p>\n<p>```</p>\n<ul>\n<li>we can use strict mode with <code>\"use strict\";</code> this will prevent you from accessing the global object with <code>this</code> in functions, so if you try to call <code>this</code> in the global context and change a value, you will get a type error, and the things you try to access will be undefined</li>\n</ul>\n<h3>POJOs</h3>\n<h4>1. Label variables as either Primitive vs. Reference</h4>\n<p>Javascript considers most data types to be 'primitive', these data types are immutable, and are passed by value. The more complex data types: Array and Object are mutable, are considered 'reference' data types, and are passed by reference.</p>\n<ul>\n<li>Boolean - Primitive</li>\n<li>Null - Primitive</li>\n<li>Undefined - Primitive</li>\n<li>Number - Primitive</li>\n<li>String - Primitive</li>\n<li>Array - Reference</li>\n<li>Object - Reference</li>\n<li>Function - Reference</li>\n</ul>\n<h4>2. Identify when to use . vs [] when accessing values of an object</h4>\n<pre><code class=\"language-javascript\">let obj = { one: 1, two: 2 };\n\n// Choose the square brackets property accessor when the property name is determined at\n// runtime, or if the property name is not a valid identifier\nlet myKey = 'one';\nconsole.log(obj[myKey]);\n\n// Choose the dot property accessor when the property name is known ahead of time.\nconsole.log(obj.two);\n</code></pre>\n<h4>3. Write an object literal with a variable key using interpolation</h4>\n<pre><code class=\"language-javascript\">let keyName = 'two';\n\n// If the key is not known, you can use an alternative `[]` syntax for\n// object initialization only\nlet obj2 = { [keyName]: 2 };\nconsole.log(obj2);\n</code></pre>\n<h4>4. Use the obj[key] !== undefined pattern to check if a given variable that contains a key exists in an object</h4>\n<pre><code class=\"language-javascript\">function doesKeyExist(obj, key) {\n    // obj[key] !== undefined\n    // or:\n    return key in obj;\n}\n\nlet course = { bootcamp: 'Lambda', course: 'Bootcamp Prep' };\nconsole.log(doesKeyExist(course, 'course')); // => true\nconsole.log(doesKeyExist(course, 'name')); // => false\n</code></pre>\n<h4>5. Utilize Object.keys and Object.values in a function</h4>\n<pre><code class=\"language-javascript\">function printKeys(object) {\n    return Object.keys(object);\n}\n\nfunction printValues(object) {\n    return Object.values(object);\n}\n\nconsole.log(printKeys({ dog: 'Strelka', dog2: 'Belka' }));\nconsole.log(printValues({ dog: 'Strelka', dog2: 'Belka' }));\n</code></pre>\n<h4>6. Iterate through an object using a for in loop</h4>\n<pre><code class=\"language-javascript\">let player = { name: 'Sergey', skill: 'hockey' };\n\nfor (let key in player) {\n    console.log(key, player[key]);\n}\n\nconsole.log(Object.entries(player));\n</code></pre>\n<h4>7. Define a function that utilizes ...rest syntax to accept an arbitrary number of arguments</h4>\n<pre><code class=\"language-javascript\">function restSum(...otherNums) {\n    let sum = 0;\n    console.log(otherNums);\n    otherNums.forEach(function (num) {\n        sum += num;\n    });\n\n    return sum;\n}\n\nconsole.log(restSum(3, 5, 6)); // => 14\nconsole.log(restSum(1, 2, 3, 4, 5, 6, 7, 8, 9)); // => 45\nconsole.log(restSum(0)); // => 0\n</code></pre>\n<h4>8. Use ...spread syntax for Object literals and Array literals</h4>\n<pre><code class=\"language-javascript\">let numArray = [1, 2, 3];\nlet moreNums = [...numArray, 4, 5, 6];\n\nconsole.log(moreNums);\n\nlet shoe = { color: 'red', size: 10 };\nlet newShoe = { ...shoe, brand: 'Nike', size: 12 };\nconsole.log(newShoe);\nnewShoe.color = 'black';\nconsole.log(newShoe);\n\nconsole.log(shoe);\n</code></pre>\n<h4>9. Destructure an array to reference specific elements</h4>\n<pre><code class=\"language-javascript\">let arr = ['one', 'two', 'three'];\n\nlet [first] = arr;\nconsole.log(first);\n</code></pre>\n<h4>10. Destructure an object to reference specific values</h4>\n<pre><code class=\"language-javascript\">let me = {\n    name: 'Ian',\n    instruments: ['bass', 'synth', 'guitar'],\n    siblings: {\n        brothers: ['Alistair'],\n        sisters: ['Meghan']\n    }\n};\n\nlet {\n    name,\n    instruments: musical_instruments,\n    siblings: { sisters }\n} = me;\n\nconsole.log(name);\nconsole.log(musical_instruments);\nconsole.log(sisters);\n</code></pre>\n<h4>11. Write a function that accepts a string as an argument and returns an object representing the count of each character in the array</h4>\n<pre><code class=\"language-javascript\">function charCount(inputString) {\n    let res = inputString.split('').reduce(function (accum, el) {\n        if (el in accum) {\n            accum[el] = accum[el] + 1;\n        } else {\n            accum[el] = 1;\n        }\n        return accum;\n    }, {});\n    return res;\n}\n\nconsole.log(charCount('aaabbbeebbcdkjfalksdfjlkasdfasdfiiidkkdingds'));\n</code></pre>\n<h3></h3>\n<h3>Review of Concepts</h3>\n<h4>1. Identify the difference between const, let, and var declarations</h4>\n<h4>2. Explain the difference between const, let, and var declarations</h4>\n<pre><code class=\"language-javascript\">var a = 'a';\n</code></pre>\n<ul>\n<li><code>var</code> is the historical keyword used for variable declaration.</li>\n<li><code>var</code> declares variables in function scope, or global scope if not inside a function.</li>\n<li>We consider <code>var</code> to be <em>deprecated</em> and it is never used in this course.</li>\n</ul>\n<pre><code class=\"language-javascript\">let b = 'b';\n</code></pre>\n<ul>\n<li><code>let</code> is the keyword we use most often for variable declaration.</li>\n<li><code>let</code> declares variables in block scope.</li>\n<li>variables declared with <code>let</code> are re-assignable.</li>\n</ul>\n<pre><code class=\"language-javascript\">const c = 'c';\n</code></pre>\n<ul>\n<li><code>const</code> is a specialized form of <code>let</code> that can only be used to <strong>initialize</strong> a variable.</li>\n<li>Except when it is declared, you cannot assign to a <code>const</code> variable.</li>\n<li><code>const</code> scopes variables the same way that <code>let</code> does.</li>\n</ul>\n<h4>3. Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining</h4>\n<p>Consider this <code>run</code> function, inside which <code>foo</code> and <code>bar</code> have <code>function scope</code>. <code>i</code> and <code>baz</code> are scoped to the block expression.</p>\n<pre><code class=\"language-javascript\">// function and block scope in this example\nfunction run() {\n    var foo = 'Foo';\n    let bar = 'Bar';\n\n    console.log(foo, bar);\n\n    {\n        console.log(foo);\n        let baz = 'Bazz';\n        console.log(baz);\n    }\n\n    console.log(baz); // ReferenceError\n}\n\nrun();\n</code></pre>\n<p>Notice that referencing <code>baz</code> from outside it's block results in JavaScript throwing a ReferenceError.</p>\n<p>Consider this <code>run</code> function, inside of which <code>foo</code> has <code>function scope</code>.</p>\n<pre><code class=\"language-javascript\">function run() {\n    console.log(foo); // undefined\n    var foo = 'Foo';\n    console.log(foo); // Foo\n}\n\nrun();\n</code></pre>\n<p>Consider this <code>func1</code> function and it's nested scopes.</p>\n<pre><code class=\"language-javascript\">// global scope\nfunction func1(arg1) {\n    // func1 scope\n\n    return function func2(arg2) {\n        // func2 scope\n\n        return function func3(arg3) {\n            // func3 scope\n\n            console.log(arg1, arg2, arg3);\n        };\n    };\n}\n</code></pre>\n<h4>6. Implement a closure and explain how the closure effects scope</h4>\n<pre><code class=\"language-javascript\">const adder = (arg1) => {\n    return (arg2) => {\n        return arg1 + arg2;\n    };\n};\n\nconst func2 = adder(2);\nconst result = func2(2);\nconsole.log(result); // => 4;\n</code></pre>\n<h4>4. Define an arrow function</h4>\n<pre><code class=\"language-javascript\">const returnValue = (val) => val;\n</code></pre>\n<p>This simple construct will create a function that accepts <code>val</code> as a parameter, and returns <code>val</code> immediately. We do not need to type <code>return val</code>, because this is a single-line function.</p>\n<p>Identically, we could write</p>\n<pre><code class=\"language-javascript\">const returnValue = (val) => {\n    return val;\n};\n</code></pre>\n<h4>5. Given an arrow function, deduce the value of <code>this</code> without executing the code</h4>\n<pre><code class=\"language-javascript\">function fDAdder(arr) {\n    console.log(this);\n\n    return arr.reduce((acc, ele) => {\n        return acc + ele;\n    });\n}\n\nfDAdder([1, 2, 4, 6]);\n</code></pre>\n<p>If we use a <em>function declaration</em> style function, the <code>this</code> variable is set to the <code>global</code> object (i.e. <code>Object [global]</code> in Node.JS and <code>Window</code> in your browser).</p>\n<pre><code class=\"language-javascript\">const adder = (arr) => {\n    console.log(this);\n    arr.reduce((acc, ele) => (sum += ele));\n};\nadder([1, 2, 4, 6]);\n</code></pre>\n<p>In this example, we use a <em>fat arrow</em> style function. Note that when we declare a funciton like this <code>this</code> becomes</p>\n<h4>7. Define a method that references this on an object literal</h4>\n<pre><code class=\"language-javascript\">const pokemon = {\n    firstname: 'Pika',\n    lastname: 'Chu',\n    getPokeName: function () {\n        const fullname = `${this.firstname} ${this.lastname}`;\n        return fullname;\n    }\n};\n\nconsole.log(pokemon.getPokeName());\n</code></pre>\n<h4>8. Utilize the built in Function#bind on a callback to maintain the context of <code>this</code></h4>\n<pre><code class=\"language-javascript\">const pokemon = {\n    firstname: 'Pika',\n    lastname: 'Chu',\n    getPokeName: function () {\n        const fullname = `${this.firstname} ${this.lastname}`;\n        return fullname;\n    }\n};\n\nconst logPokemon = pokemon.getPokename.bind(pokemon);\n\nlogPokemon('sushi', 'algorithms'); // Pika Chu loves sushi and algorithms\n</code></pre>\n<h4>9. Given a code snippet, identify what <code>this</code> refers to</h4>\n<pre><code class=\"language-javascript\">function Person(name) {\n    // this.name = name;\n    // let that = this;\n\n    setTimeout(function () {\n        // console.log(this); // => Window\n        // console.log(that); // => [Function] => Person\n        // this.sayName(); // => no method error\n        that.sayName();\n    }, 1000);\n}\n\nPerson.prototype.sayName = function () {\n    console.log(this.name);\n};\n\nconst jane = new Person('Jane');\n</code></pre>"
                },
                {
                    "url": "/blog/python-for-js-dev/",
                    "relativePath": "blog/python-for-js-dev.md",
                    "relativeDir": "blog",
                    "base": "python-for-js-dev.md",
                    "name": "python-for-js-dev",
                    "frontmatter": {
                        "title": "Python Resources",
                        "date": "2021-06-03",
                        "image": "images/2.jpg",
                        "seo": {
                            "title": "python",
                            "description": "Commodo ante vis placerat interdum massa massa primis",
                            "extra": [
                                { "name": "og:type", "value": "article", "keyName": "property" },
                                { "name": "og:title", "value": "python", "keyName": "property" },
                                { "name": "og:description", "value": "Commodo ante vis placerat interdum massa massa primis", "keyName": "property" },
                                { "name": "og:image", "value": "images/2.jpg", "keyName": "property", "relativeUrl": true },
                                { "name": "twitter:card", "value": "summary_large_image" },
                                { "name": "twitter:title", "value": "python" },
                                { "name": "twitter:description", "value": "Commodo ante vis placerat interdum massa massa primis" },
                                { "name": "twitter:image", "value": "images/2.jpg", "relativeUrl": true }
                            ]
                        },
                        "template": "post",
                        "thumb_image": "images/violet-pluto.png",
                        "thumb_image_alt": "python logo"
                    },
                    "html": "<h1>Python Study Guide for a JavaScript Programmer\n</h1>\n<p><img src=\"https://miro.medium.com/max/1970/1*3V9VOfPk_hrFdbEAd3j-QQ.png\"><img src=\"https://miro.medium.com/max/52/0*eC4EvZcv6hhH88jX.png?q=20\"><img src=\"https://miro.medium.com/max/647/0*eC4EvZcv6hhH88jX.png\"><img src=\"https://miro.medium.com/max/60/0*Ez_1PZ93N4FfvkRr.png?q=20\"><img src=\"https://miro.medium.com/max/608/0*Ez_1PZ93N4FfvkRr.png\"><img src=\"https://miro.medium.com/max/60/0*eE3E5H0AoqkhqK1z.png?q=20\"><img src=\"https://miro.medium.com/max/1648/0*eE3E5H0AoqkhqK1z.png\"><img src=\"https://miro.medium.com/max/60/0*Q0CMqFd4PozLDFPB.png?q=20\"><img src=\"https://miro.medium.com/max/1638/0*Q0CMqFd4PozLDFPB.png\"><img src=\"https://miro.medium.com/max/3216/0*HQpndNhm1Z_xSoHb.png\"><img src=\"https://miro.medium.com/max/60/0*qHzGRLTOMTf30miT.png?q=20\"><img src=\"https://miro.medium.com/max/1614/0*qHzGRLTOMTf30miT.png\">[</p>\n<p>](<a href=\"https://github.com/bgoonz\">https://github.com/bgoonz</a>)</p>\n<iframe src=\"https://py-prac-42.netlify.app/\" width=\"100%\" height=\"1200px\"><iframe>\n<h1>Applications of Tutorial &#x26; Cheat Sheet Respectivley (At Bottom Of Tutorial):</h1>\n<h1>Basics</h1>\n<ul>\n<li><strong>PEP8</strong> : Python Enhancement Proposals, style-guide for Python.</li>\n<li>print is the equivalent of console.log.</li>\n</ul>\n<blockquote>\n<p>‘print() == console.log()’</p>\n</blockquote>\n<h1># is used to make comments in your code.</h1>\n<blockquote>\n<p><em>Python has a built in help function that let’s you see a description of the source code without having to navigate to it… “-SickNasty … Autor Unknown”</em></p>\n</blockquote>\n<h1>Numbers</h1>\n<ul>\n<li>Python has three types of numbers:</li>\n<li><strong>Integer</strong></li>\n<li><strong>Positive and Negative Counting Numbers.</strong></li>\n</ul>\n<p>No Decimal Point</p>\n<blockquote>\n<p>Created by a literal non-decimal point number … <strong>or</strong> … with the <em>int()</em> constructor.</p>\n</blockquote>\n<p><strong>3. Complex Numbers</strong></p>\n<blockquote>\n<p>Consist of a real part and imaginary part.</p>\n</blockquote>\n<h2>Boolean is a subtype of integer in Python.🤷‍♂️</h2>\n<blockquote>\n<p>If you came from a background in JavaScript and learned to accept the premise(s) of the following meme…</p>\n</blockquote>\n<blockquote>\n<p>Than I am sure you will find the means to suspend your disbelief.</p>\n</blockquote>\n<h1>KEEP IN MIND:</h1>\n<blockquote>\n<p><strong>The i is switched to a j in programming.</strong></p>\n</blockquote>\n<p>T*his is because the letter i is common place as the de facto index for any and all enumerable entities so it just makes sense not to compete for name-**space *<em>when there’s another 25 letters that don’t get used for every loop under the sun. My most medium apologies to Leonhard Euler.</em></p>\n<ul>\n<li><strong>Type Casting</strong> : The process of converting one number to another.</li>\n</ul>\n<p><strong>The arithmetic operators are the same between JS and Python, with two additions:</strong></p>\n<ul>\n<li><em>“**” : Double asterisk for exponent.</em></li>\n<li><em>“//” : Integer Division.</em></li>\n<li><strong>There are no spaces between math operations in Python.</strong></li>\n<li><strong>Integer Division gives the other part of the number from Module; it is a way to do round down numbers replacing Math.floor() in JS.</strong></li>\n<li><strong>There are no ++ and -- in Python, the only shorthand operators are:</strong></li>\n</ul>\n<h1>Strings</h1>\n<ul>\n<li>Python uses both single and double quotes.</li>\n<li>You can escape strings like so 'Jodi asked, \"What\\'s up, Sam?\"'</li>\n<li>Multiline strings use triple quotes.</li>\n</ul>\n<p><strong>Use the len() function to get the length of a string.</strong></p>\n<h1><strong>Python uses zero-based indexing</strong></h1>\n<h2>Python allows negative indexing (thank god!)</h2>\n<ul>\n<li>Python let’s you use ranges</li>\n</ul>\n<p>You can think of this as roughly equivalent to the slice method called on a JavaScript object or string… *(mind you that in JS … strings are wrapped in an object (under the hood)… upon which the string methods are actually called. As a immutable privative type <strong>by textbook definition</strong>, a string literal could not hope to invoke most of it’s methods without violating the state it was bound to on initialization if it were not for this bit of syntactic sugar.)*</p>\n<ul>\n<li>The end range is exclusive just like slice in JS.</li>\n</ul>\n<!---->\n<ul>\n<li>The index string function is the equiv. of indexOf() in JS</li>\n</ul>\n<!---->\n<ul>\n<li>The count function finds out how many times a substring appears in a string… pretty nifty for a hard coded feature of the language.</li>\n</ul>\n<!---->\n<ul>\n<li><strong>You can use + to concatenate strings, just like in JS.</strong></li>\n<li><strong>You can also use “*” to repeat strings or multiply strings.</strong></li>\n<li><strong>Use the format() function to use placeholders in a string to input values later on.</strong></li>\n</ul>\n<!---->\n<ul>\n<li>*Shorthand way to use format function is:\n*print(f'Your name is {first<em>name} {last</em>name}')</li>\n</ul>\n<h2>Some useful string methods.</h2>\n<ul>\n<li><strong>Note that in JS join is used on an Array, in Python it is used on String.</strong></li>\n</ul>\n<!---->\n<ul>\n<li>There are also many handy testing methods.</li>\n</ul>\n<h1>Variables and Expressions</h1>\n<ul>\n<li><strong>Duck-Typing</strong> : Programming Style which avoids checking an object’s type to figure out what it can do.</li>\n<li>Duck Typing is the fundamental approach of Python.</li>\n<li>Assignment of a value automatically declares a variable.</li>\n</ul>\n<!---->\n<ul>\n<li><strong><em>You can chain variable assignments to give multiple var names the same value.</em></strong></li>\n</ul>\n<h2>Use with caution as this is highly unreadable</h2>\n<h2>The value and type of a variable can be re-assigned at any time.</h2>\n<ul>\n<li>*NaN does not exist in Python, but you can 'create' it like so:\n<strong>print(float(\"nan\"))*</strong></li>\n<li><em>Python replaces null with none.</em></li>\n<li><strong>*none is an object</strong> and can be directly assigned to a variable.*</li>\n</ul>\n<blockquote>\n<p>Using none is a convenient way to check to see why an action may not be operating correctly in your program.</p>\n</blockquote>\n<h1>Boolean Data Type</h1>\n<ul>\n<li>One of the biggest benefits of Python is that it reads more like English than JS does.</li>\n</ul>\n<!---->\n<ul>\n<li>By default, Python considers an object to be true UNLESS it is one of the following:</li>\n<li>Constant None or False</li>\n<li>Zero of any numeric type.</li>\n<li>Empty Sequence or Collection.</li>\n<li>True and False must be capitalized</li>\n</ul>\n<h1>Comparison Operators</h1>\n<ul>\n<li>Python uses all the same equality operators as JS.</li>\n<li>In Python, equality operators are processed from left to right.</li>\n<li>Logical operators are processed in this order:</li>\n<li><strong>NOT</strong></li>\n<li><strong>AND</strong></li>\n<li><strong>OR</strong></li>\n</ul>\n<blockquote>\n<p>Just like in JS, you can use parentheses to change the inherent order of operations.</p>\n<p><strong>Short Circuit</strong> : Stopping a program when a true or false has been reached.</p>\n</blockquote>\n<h1>Identity vs Equality</h1>\n<ul>\n<li>In the Python community it is better to use is and is not over == or !=</li>\n</ul>\n<h1>If Statements</h1>\n<blockquote>\n<p>Remember the order of elif statements matter.</p>\n</blockquote>\n<h1>While Statements</h1>\n<ul>\n<li>Break statement also exists in Python.</li>\n</ul>\n<!---->\n<ul>\n<li>As are continue statements</li>\n</ul>\n<h1>Try/Except Statements</h1>\n<ul>\n<li>Python equivalent to try/catch</li>\n</ul>\n<!---->\n<ul>\n<li>You can name an error to give the output more specificity.</li>\n</ul>\n<!---->\n<ul>\n<li>You can also use the pass commmand to by pass a certain error.</li>\n</ul>\n<!---->\n<ul>\n<li>The pass method won't allow you to bypass every single error so you can chain an exception series like so:</li>\n</ul>\n<!---->\n<ul>\n<li>You can use an else statement to end a chain of except statements.</li>\n</ul>\n<!---->\n<ul>\n<li>finally is used at the end to clean up all actions under any circumstance.</li>\n</ul>\n<!---->\n<ul>\n<li>Using duck typing to check to see if some value is able to use a certain method.</li>\n</ul>\n<h1>Pass</h1>\n<ul>\n<li>Pass Keyword is required to write the JS equivalent of :</li>\n</ul>\n<h1>Functions</h1>\n<ul>\n<li><strong>Function definition includes:</strong></li>\n<li><strong>The def keyword</strong></li>\n<li><strong>The name of the function</strong></li>\n<li><strong>A list of parameters enclosed in parentheses.</strong></li>\n<li><strong>A colon at the end of the line.</strong></li>\n<li><strong>One tab indentation for the code to run.</strong></li>\n<li><strong>You can use default parameters just like in JS</strong></li>\n</ul>\n<h2><strong>Keep in mind, default parameters must always come after regular parameters.</strong></h2>\n<ul>\n<li><em>You can specify arguments by name without destructuring in Python.</em></li>\n</ul>\n<!---->\n<ul>\n<li>The lambda keyword is used to create anonymous functions and are supposed to be one-liners.</li>\n</ul>\n<p>toUpper = lambda s: s.upper()</p>\n<h1>Notes</h1>\n<h2>Formatted Strings</h2>\n<blockquote>\n<p>Remember that in Python join() is called on a string with an array/list passed in as the argument.\nPython has a very powerful formatting engine.\nformat() is also applied directly to strings.</p>\n</blockquote>\n<h1>Comma Thousands Separator</h1>\n<h1>Date and Time</h1>\n<h1>Percentage</h1>\n<h1>Data Tables</h1>\n<p><strong>Python can be used to display html, css, and JS.</strong>\n<em>It is common to use Python as an API (Application Programming Interface)</em></p>\n<h2>Structured Data</h2>\n<h2>Sequence : The most basic data structure in Python where the index determines the order.</h2>\n<blockquote>\n<p>List\nTuple\nRange\nCollections : Unordered data structures, hashable values.</p>\n</blockquote>\n<h2>Dictionaries\nSets</h2>\n<h2>Iterable : Generic name for a sequence or collection; any object that can be iterated through.</h2>\n<h2>Can be mutable or immutable.\nBuilt In Data Types</h2>\n<h1>Lists are the python equivalent of arrays.</h1>\n<h1>You can instantiate</h1>\n<h2>Test if a value is in a list.</h2>\n<h2>Instantiated with parentheses</h2>\n<h2>Sometimes instantiated without</h2>\n<h2>Tuple() built in can be used to convert other data into a tuple</h2>\n<h2>Ranges : A list of numbers which can’t be changed; often used with for loops.</h2>\n<p><strong>Declared using one to three parameters</strong>.</p>\n<blockquote>\n<p>Start : opt. default 0, first # in sequence.\nStop : required next number past the last number in the sequence.\nStep : opt. default 1, difference between each number in the sequence.</p>\n</blockquote>\n<h2>Dictionaries : Mappable collection where a hashable value is used as a key to ref. an object stored in the dictionary.</h2>\n<h2>Mutable.</h2>\n<p><strong><em>Declared with curly braces of the built in dict()</em></strong></p>\n<blockquote>\n<p><em>Benefit of dictionaries in Python is that it doesn’t matter how it is defined, if the keys and values are the same the dictionaries are considered equal.</em></p>\n</blockquote>\n<p><strong>Use the in operator to see if a key exists in a dictionary.</strong></p>\n<p>S<strong>ets : Unordered collection of distinct objects; objects that need to be hashable.</strong></p>\n<blockquote>\n<p><em>Always be unique, duplicate items are auto dropped from the set.</em></p>\n</blockquote>\n<h2>Common Uses:</h2>\n<blockquote>\n<p>Removing Duplicates\nMembership Testing\nMathematical Operators: Intersection, Union, Difference, Symmetric Difference.</p>\n</blockquote>\n<p><strong>Standard Set is mutable, Python has a immutable version called frozenset.\nSets created by putting comma seperated values inside braces:</strong></p>\n<h2>Also can use set constructor to automatically put it into a set.</h2>\n<p><strong>filter(function, iterable) : creates new iterable of the same type which includes each item for which the function returns true.</strong></p>\n<p><strong>map(function, iterable) : creates new iterable of the same type which includes the result of calling the function on every item of the iterable.</strong></p>\n<p><strong>sorted(iterable, key=None, reverse=False) : creates a new sorted list from the items in the iterable.</strong></p>\n<p><strong>Output is always a list</strong></p>\n<p><strong>key: opt function which coverts and item to a value to be compared.</strong></p>\n<p><strong>reverse: optional boolean.</strong></p>\n<p><strong>enumerate(iterable, start=0) : starts with a sequence and converts it to a series of tuples</strong></p>\n<h2>(0, ‘First’), (1, ‘Second’), (2, ‘Third’), (3, ‘Fourth’)</h2>\n<h2>(1, ‘First’), (2, ‘Second’), (3, ‘Third’), (4, ‘Fourth’)</h2>\n<blockquote>\n<p>zip(*iterables) : creates a zip object filled with tuples that combine 1 to 1 the items in each provided iterable.\nFunctions that analyze iterable</p>\n</blockquote>\n<p><strong>len(iterable) : returns the count of the number of items.</strong></p>\n<p><strong>max(*args, key=None) : returns the largest of two or more arguments.</strong></p>\n<p><strong>max(iterable, key=None) : returns the largest item in the iterable.</strong></p>\n<p><em>key optional function which converts an item to a value to be compared.\nmin works the same way as max</em></p>\n<p><strong>sum(iterable) : used with a list of numbers to generate the total.</strong></p>\n<p><em>There is a faster way to concatenate an array of strings into one string, so do not use sum for that.</em></p>\n<p><strong>any(iterable) : returns True if any items in the iterable are true.</strong></p>\n<p><strong>all(iterable) : returns True is all items in the iterable are true.</strong></p>\n<h1>Working with dictionaries</h1>\n<p><strong>dir(dictionary) : returns the list of keys in the dictionary.\nWorking with sets</strong></p>\n<p><strong>Union : The pipe | operator or union(*sets) function can be used to produce a new set which is a combination of all elements in the provided set.</strong></p>\n<h2>Intersection : The &#x26; operator ca be used to produce a new set of only the elements that appear in all sets.</h2>\n<p><strong>Symmetric Difference : The ^ operator can be used to produce a new set of only the elements that appear in exactly one set and not in both.</strong></p>\n<h1><strong>For Statements\nIn python, there is only one for loop.</strong></h1>\n<p>Always Includes:</p>\n<blockquote>\n<p>1. The for keyword\n2. A variable name\n3. The ‘in’ keyword\n4. An iterable of some kid\n5. A colon\n6. On the next line, an indented block of code called the for clause.</p>\n</blockquote>\n<p><strong>You can use break and continue statements inside for loops as well.</strong></p>\n<p><strong>You can use the range function as the iterable for the for loop.</strong></p>\n<p><strong><em>Common technique is to use the len() on a pre-defined list with a for loop to iterate over the indices of the list.</em></strong></p>\n<p><strong>You can loop and destructure at the same time.</strong></p>\n<blockquote>\n<p>Prints 1, 2</p>\n<p>Prints 3, 4</p>\n<p>Prints 5, 6</p>\n</blockquote>\n<p><strong>You can use values() and keys() to loop over dictionaries.</strong></p>\n<p><em>Prints red</em></p>\n<p><em>Prints 42</em></p>\n<p><em>Prints color</em></p>\n<p><em>Prints age</em></p>\n<p><strong>For loops can also iterate over both keys and values.</strong></p>\n<p><strong>Getting tuples</strong></p>\n<p><em>Prints (‘color’, ‘red’)</em></p>\n<p><em>Prints (‘age’, 42)</em></p>\n<p><em>Destructuring to values</em></p>\n<p><em>Prints Key: age Value: 42</em></p>\n<p><em>Prints Key: color Value: red</em></p>\n<p><strong>Looping over string</strong></p>\n<p><strong>When you order arguments within a function or function call, the args need to occur in a particular order:</strong></p>\n<p><em>formal positional args.</em></p>\n<p>*args</p>\n<p><em>keyword args with default values</em></p>\n<p>**kwargs</p>\n<h1><strong>Importing in Python</strong></h1>\n<p><strong>Modules are similar to packages in Node.js</strong>\nCome in different types:</p>\n<p>Built-In,</p>\n<p>Third-Party,</p>\n<p>Custom.</p>\n<p><strong>All loaded using import statements.</strong></p>\n<h1><strong>Terms</strong></h1>\n<blockquote>\n<p>module : Python code in a separate file.\npackage : Path to a directory that contains modules.\n<a href=\"http://init.py/\"><strong>init.py</strong></a> : Default file for a package.\nsubmodule : Another file in a module’s folder.\nfunction : Function in a module.</p>\n</blockquote>\n<p><strong>A module can be any file but it is usually created by placing a special file init.py into a folder. pic</strong></p>\n<p><em>Try to avoid importing with wildcards in Python.</em></p>\n<p><em>Use multiple lines for clarity when importing.</em></p>\n<h1>Watching Out for Python 2</h1>\n<p><strong>Python 3 removed &#x3C;> and only uses !=</strong></p>\n<p><strong>format() was introduced with P3</strong></p>\n<p><strong>All strings in P3 are unicode and encoded.\nmd5 was removed.</strong></p>\n<p><strong>ConfigParser was renamed to configparser\nsets were killed in favor of set() class.</strong></p>\n<h2><strong>print was a statement in P2, but is a function in P3.</strong></h2>\n<h1>Topics revisited (in python syntax)</h1>\n<h1>Cheat Sheet:</h1>\n<h2>If you found this guide helpful feel free to checkout my github/gists where I host similar content:</h2>\n<p><a href=\"https://gist.github.com/bgoonz\">bgoonz’s gists · GitHub</a></p>\n<p>Or Checkout my personal Resource Site:</p>\n<h1>Python Cheat Sheet:</h1>\n<h1>If you found this guide helpful feel free to checkout my GitHub/gists where I host similar content:</h1>"
                },
                {
                    "url": "/blog/data-structures/",
                    "relativePath": "blog/data-structures.md",
                    "relativeDir": "blog",
                    "base": "data-structures.md",
                    "name": "data-structures",
                    "frontmatter": {
                        "title": "Data Structures",
                        "subtitle": "lorem-ipsum",
                        "date": "2021-06-03",
                        "thumb_image_alt": "lorem-ipsum",
                        "excerpt": "A guide to computational complexity",
                        "seo": { "title": "", "description": "", "robots": [], "extra": [], "type": "stackbit_page_meta" },
                        "template": "post",
                        "image": "images/dtw.jpg",
                        "thumb_image": "images/green-spruce.png"
                    },
                    "html": "<h2>Data Structures &#x26; Algorithms</h2>\n<p><a href=\"https://github.com/bgoonz/Data-Structures-Algos-Codebase\">DS Algo Codebase</a></p>\n<p><a href=\"#115-distinct-subsequenceshttpsleetcodecomproblemsdistinct-subsequencesdescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/distinct-subsequences/description/\">115. Distinct Subsequences</a></h2>\n<h3>Problem:</h3>\n<p>Given a string <strong>S</strong> and a string <strong>T</strong>, count the number of distinct subsequences of <strong>S</strong> which equals <strong>T</strong>.</p>\n<p>A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, <code>\"ACE\"</code> is a subsequence of <code>\"ABCDE\"</code> while <code>\"AEC\"</code> is not).</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: S = \"rabbbit\", T = \"rabbit\"\nOutput: 3\nExplanation:\n\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\n(The caret symbol ^ means the chosen letters)\n\nrabbbit\n^^^^ ^^\nrabbbit\n^^ ^^^^\nrabbbit\n^^^ ^^^\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: S = \"babgbag\", T = \"bag\"\nOutput: 5\nExplanation:\n\nAs shown below, there are 5 ways you can generate \"bag\" from S.\n(The caret symbol ^ means the chosen letters)\n\nbabgbag\n^^ ^\nbabgbag\n^^    ^\nbabgbag\n^    ^^\nbabgbag\n  ^  ^^\nbabgbag\n    ^^^\n</code></pre>\n<h3>Solution:</h3>\n<p>Define <code>f(i, j)</code> to be the number of ways that generate <code>T[0...j)</code> from <code>S[0...i)</code>.</p>\n<p>For <code>f(i, j)</code> you can always skip <code>S[i-1]</code>, but can only take it when <code>S[i-1] === T[j-1]</code>.</p>\n<pre><code class=\"language-javascript\">f(0, j) = 0, j > 0 // nothing to delete\nf(i, 0) = 1 // delete all\nf(i, j) = f(i-1, j) + (S[i-1] === T[j-1] ? f(i-1, j-1) : 0)\n</code></pre>\n<p>Dynamic array can be used.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nlet numDistinct = function (s, t) {\n    const lens = s.length;\n    const lent = t.length;\n    const dp = new Array(lent + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i &#x3C;= lens; i++) {\n        for (let j = lent; j >= 1; j--) {\n            if (s[i - 1] === t[j - 1]) {\n                dp[j] += dp[j - 1];\n            }\n        }\n    }\n    return dp[lent];\n};\n</code></pre>\n<hr>\n<p>Difficulty: Medium\nRelated Topics:\n\"Tree\": <a href=\"https://leetcode.com/tag/tree\">https://leetcode.com/tag/tree</a>\n\"Depth-first Search\": <a href=\"https://leetcode.com/tag/depth-first-search\">https://leetcode.com/tag/depth-first-search</a>\nSimilar Questions:\n\"Populating Next Right Pointers in Each Node II\": <a href=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii\">https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii</a>\n\"Binary Tree Right Side View\": <a href=\"https://leetcode.com/problems/binary-tree-right-side-view\">https://leetcode.com/problems/binary-tree-right-side-view</a></p>\n<hr>\n<p><a href=\"#116-populating-next-right-pointers-in-each-nodehttpsleetcodecomproblemspopulating-next-right-pointers-in-each-nodedescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/\">116. Populating Next Right Pointers in Each Node</a></h2>\n<h3>Problem:</h3>\n<p>Given a binary tree</p>\n<pre><code>struct TreeLinkNode {\n  TreeLinkNode *left;\n  TreeLinkNode *right;\n  TreeLinkNode *next;\n}\n</code></pre>\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\n<p>Initially, all next pointers are set to <code>NULL</code>.</p>\n<p><strong>Note:</strong></p>\n<ul>\n<li>You may only use constant extra space.</li>\n<li>Recursive approach is fine, implicit stack space does not count as extra space for this problem.</li>\n<li>You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).</li>\n</ul>\n<p><strong>Example:</strong></p>\n<p>Given the following perfect binary tree,</p>\n<pre><code>     1\n   /  \\\n  2    3\n / \\  / \\\n4  5  6  7\n</code></pre>\n<p>After calling your function, the tree should look like:</p>\n<pre><code>     1 -> NULL\n   /  \\\n  2 -> 3 -> NULL\n / \\  / \\\n4->5->6->7 -> NULL\n</code></pre>\n<h3>Solution:</h3>\n<h4>ONE</h4>\n<p>Recursive.</p>\n<p>For every <code>node</code>:</p>\n<ul>\n<li>Left child: points to <code>node.right</code>.</li>\n<li>Right child: points to <code>node.next.left</code> if <code>node.next</code> exists.</li>\n</ul>\n<pre><code class=\"language-javascript\">/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n    if (root.left !== null) {\n        root.left.next = root.right;\n        connect(root.left);\n    }\n    if (root.right !== null) {\n        if (root.next !== null) {\n            root.right.next = root.next.left;\n        }\n        connect(root.right);\n    }\n};\n</code></pre>\n<h4>TWO</h4>\n<p>Level order traversal.</p>\n<pre><code class=\"language-javascript\">/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n\n    const queue = [NaN, root];\n    while (queue.length > 1) {\n        const node = queue.shift();\n        if (node !== node) {\n            for (let i = 0; i &#x3C; queue.length; i++) {\n                queue[i].next = queue[i + 1] || null;\n            }\n            queue.push(NaN);\n        } else {\n            if (node.left !== null) {\n                queue.push(node.left);\n            }\n            if (node.right !== null) {\n                queue.push(node.right);\n            }\n        }\n    }\n};\n</code></pre>\n<hr>\n<p>Difficulty: Medium\nRelated Topics:\n\"Tree\": <a href=\"https://leetcode.com/tag/tree\">https://leetcode.com/tag/tree</a>\n\"Depth-first Search\": <a href=\"https://leetcode.com/tag/depth-first-search\">https://leetcode.com/tag/depth-first-search</a>\nSimilar Questions:\n\"Populating Next Right Pointers in Each Node\": <a href=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node\">https://leetcode.com/problems/populating-next-right-pointers-in-each-node</a></p>\n<hr>\n<p><a href=\"#117-populating-next-right-pointers-in-each-node-iihttpsleetcodecomproblemspopulating-next-right-pointers-in-each-node-iidescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/description/\">117. Populating Next Right Pointers in Each Node II</a></h2>\n<h3>Problem:</h3>\n<p>Given a binary tree</p>\n<pre><code>struct TreeLinkNode {\n  TreeLinkNode *left;\n  TreeLinkNode *right;\n  TreeLinkNode *next;\n}\n</code></pre>\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\n<p>Initially, all next pointers are set to <code>NULL</code>.</p>\n<p><strong>Note:</strong></p>\n<ul>\n<li>You may only use constant extra space.</li>\n<li>Recursive approach is fine, implicit stack space does not count as extra space for this problem.</li>\n</ul>\n<p><strong>Example:</strong></p>\n<p>Given the following binary tree,</p>\n<pre><code>     1\n   /  \\\n  2    3\n / \\    \\\n4   5    7\n</code></pre>\n<p>After calling your function, the tree should look like:</p>\n<pre><code>     1 -> NULL\n   /  \\\n  2 -> 3 -> NULL\n / \\    \\\n4-> 5 -> 7 -> NULL\n</code></pre>\n<h3>Solution:</h3>\n<h4>ONE</h4>\n<p>Recursive. See <a href=\"./116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node.md\">116. Populating Next Right Pointers in Each Node</a>.</p>\n<p>The tree may not be perfect now. So keep finding <code>next</code> until there is a node with children, or <code>null</code>.</p>\n<p>This also means post-order traversal is required.</p>\n<pre><code class=\"language-javascript\">/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n    let next = null;\n    for (let node = root.next; node !== null; node = node.next) {\n        if (node.left !== null) {\n            next = node.left;\n            break;\n        }\n        if (node.right !== null) {\n            next = node.right;\n            break;\n        }\n    }\n    if (root.right !== null) {\n        root.right.next = next;\n    }\n    if (root.left !== null) {\n        root.left.next = root.right || next;\n    }\n    connect(root.right);\n    connect(root.left);\n};\n</code></pre>\n<h4>TWO</h4>\n<p>Level order traversal. Exact same as <a href=\"./116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node.md\">116. Populating Next Right Pointers in Each Node</a>.</p>\n<pre><code class=\"language-javascript\">/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n\n    const queue = [NaN, root];\n    while (queue.length > 1) {\n        const node = queue.shift();\n        if (node !== node) {\n            for (let i = 0; i &#x3C; queue.length; i++) {\n                queue[i].next = queue[i + 1] || null;\n            }\n            queue.push(NaN);\n        } else {\n            if (node.left !== null) {\n                queue.push(node.left);\n            }\n            if (node.right !== null) {\n                queue.push(node.right);\n            }\n        }\n    }\n};\n</code></pre>\n<hr>\n<p>Difficulty: Easy\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\nSimilar Questions:\n\"Pascal's Triangle II\": <a href=\"https://leetcode.com/problems/pascals-triangle-ii\">https://leetcode.com/problems/pascals-triangle-ii</a></p>\n<hr>\n<p><a href=\"#118-pascals-trianglehttpsleetcodecomproblemspascals-triangledescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/pascals-triangle/description/\">118. Pascal's Triangle</a></h2>\n<h3>Problem:</h3>\n<p>Given a non-negative integer <em>numRows</em>, generate the first <em>numRows</em> of Pascal's triangle.</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" alt=\"PascalTriangleAnimated2.gif\"></p>\n<p>In Pascal's triangle, each number is the sum of the two numbers directly above it.</p>\n<p><strong>Example:</strong></p>\n<pre><code>Input: 5\nOutput:\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n</code></pre>\n<h3>Solution:</h3>\n<p>Dynamic Programming 101.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {number} numRows\n * @return {number[][]}\n */\nlet generate = function (numRows) {\n    if (numRows &#x3C;= 0) {\n        return [];\n    }\n\n    const result = [[1]];\n    for (let i = 1; i &#x3C; numRows; i++) {\n        const lastRow = result[i - 1];\n        const row = [1];\n        for (let j = 1; j &#x3C; i; j++) {\n            row[j] = lastRow[j] + lastRow[j - 1];\n        }\n        row.push(1);\n        result.push(row);\n    }\n\n    return result;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Easy\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\nSimilar Questions:\n\"Pascal's Triangle\": <a href=\"https://leetcode.com/problems/pascals-triangle\">https://leetcode.com/problems/pascals-triangle</a></p>\n<hr>\n<p><a href=\"#119-pascals-triangle-iihttpsleetcodecomproblemspascals-triangle-iidescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/pascals-triangle-ii/description/\">119. Pascal's Triangle II</a></h2>\n<h3>Problem:</h3>\n<p>Given a non-negative index <em>k</em> where <em>k</em> ≤ 33, return the <em>k</em>th index row of the Pascal's triangle.</p>\n<p>Note that the row index starts from 0.</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" alt=\"PascalTriangleAnimated2.gif\"></p>\n<p>In Pascal's triangle, each number is the sum of the two numbers directly above it.</p>\n<p><strong>Example:</strong></p>\n<pre><code>Input: 3\nOutput: [1,3,3,1]\n</code></pre>\n<p><strong>Follow up:</strong></p>\n<p>Could you optimize your algorithm to use only <em>O</em>(<em>k</em>) extra space?</p>\n<h3>Solution:</h3>\n<p>Dynamic Programming 101 with dynamic array.</p>\n<p>State <code>(i, j)</code> depends on <code>(i-1, j)</code> and <code>(i-1, j-1)</code>. So to access <code>(i-1, j-1)</code> iteration must be from right to left.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nlet getRow = function (rowIndex) {\n    if (rowIndex &#x3C; 0) {\n        return [];\n    }\n\n    const row = [1];\n    for (let i = 1; i &#x3C;= rowIndex; i++) {\n        for (let j = i - 1; j > 0; j--) {\n            row[j] += row[j - 1];\n        }\n        row.push(1);\n    }\n\n    return row;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Medium\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\n\"Dynamic Programming\": <a href=\"https://leetcode.com/tag/dynamic-programming\">https://leetcode.com/tag/dynamic-programming</a></p>\n<hr>\n<p><a href=\"#120-trianglehttpsleetcodecomproblemstriangledescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/triangle/description/\">120. Triangle</a></h2>\n<h3>Problem:</h3>\n<p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p>\n<p>For example, given the following triangle</p>\n<pre><code>[\n     [2],\n    [3,4],\n   [6,5,7],\n  [4,1,8,3]\n]\n</code></pre>\n<p>The minimum path sum from top to bottom is <code>11</code> (i.e., <strong>2</strong> + <strong>3</strong> + <strong>5</strong> + <strong>1</strong> = 11).</p>\n<p><strong>Note:</strong></p>\n<p>Bonus point if you are able to do this using only <em>O</em>(<em>n</em>) extra space, where <em>n</em> is the total number of rows in the triangle.</p>\n<h3>Solution:</h3>\n<p>Define <code>f(i, j)</code> to be the minimum path sum from <code>triangle[0][0]</code> to <code>triangle[i][j]</code>.</p>\n<pre><code>f(i, 0) = f(i-1, j) + triangle[i][0]\nf(i, j) = min( f(i-1, j-1), f(i-1, j) ) + triangle[i][j], 0 &#x3C; j &#x3C; i\nf(i, i) = f(i-1, i-1) + triangle[i][i], i > 0\n</code></pre>\n<p>Dynamic array can be used.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {number[][]} triangle\n * @return {number}\n */\nlet minimumTotal = function (triangle) {\n    if (triangle.length &#x3C;= 0) {\n        return 0;\n    }\n\n    const dp = [triangle[0][0]];\n    for (let i = 1; i &#x3C; triangle.length; i++) {\n        dp[i] = dp[i - 1] + triangle[i][i];\n        for (let j = i - 1; j >= 1; j--) {\n            dp[j] = Math.min(dp[j], dp[j - 1]) + triangle[i][j];\n        }\n        dp[0] += triangle[i][0];\n    }\n    return Math.min(...dp);\n};\n</code></pre>\n<hr>\n<p>Difficulty: Easy\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\n\"Dynamic Programming\": <a href=\"https://leetcode.com/tag/dynamic-programming\">https://leetcode.com/tag/dynamic-programming</a>\nSimilar Questions:\n\"Maximum Subarray\": <a href=\"https://leetcode.com/problems/maximum-subarray\">https://leetcode.com/problems/maximum-subarray</a>\n\"Best Time to Buy and Sell Stock II\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii</a>\n\"Best Time to Buy and Sell Stock III\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii</a>\n\"Best Time to Buy and Sell Stock IV\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv</a>\n\"Best Time to Buy and Sell Stock with Cooldown\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown</a></p>\n<hr>\n<p><a href=\"#121-best-time-to-buy-and-sell-stockhttpsleetcodecomproblemsbest-time-to-buy-and-sell-stockdescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/\">121. Best Time to Buy and Sell Stock</a></h2>\n<h3>Problem:</h3>\n<p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p>\n<p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>\n<p>Note that you cannot sell a stock before you buy one.</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n</code></pre>\n<h3>Solution:</h3>\n<p>Only care about positive profits. Take the frist item as base and scan to the right. If we encounter an item <code>j</code> whose price <code>price[j]</code> is lower than the base (which means if we sell now the profit would be negative), we sell <code>j-1</code> instead and make <code>j</code> the new base.</p>\n<p>Because <code>price[j]</code> is lower that the base, using <code>j</code> as new base is guaranteed to gain more profit comparing to the old one.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    let max = 0;\n    let base = prices[0];\n    for (let i = 1; i &#x3C; prices.length; i++) {\n        const profit = prices[i] - base;\n        if (profit > max) {\n            max = profit;\n        } else if (profit &#x3C; 0) {\n            base = prices[i];\n        }\n    }\n    return max;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Easy\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\n\"Greedy\": <a href=\"https://leetcode.com/tag/greedy\">https://leetcode.com/tag/greedy</a>\nSimilar Questions:\n\"Best Time to Buy and Sell Stock\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock</a>\n\"Best Time to Buy and Sell Stock III\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii</a>\n\"Best Time to Buy and Sell Stock IV\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv</a>\n\"Best Time to Buy and Sell Stock with Cooldown\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown</a>\n\"Best Time to Buy and Sell Stock with Transaction Fee\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee</a></p>\n<hr>\n<p><a href=\"#122-best-time-to-buy-and-sell-stock-iihttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock-iidescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/\">122. Best Time to Buy and Sell Stock II</a></h2>\n<h3>Problem:</h3>\n<p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p>\n<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p>\n<p><strong>Note:</strong> You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n             engaging multiple transactions at the same time. You must sell before buying again.\n</code></pre>\n<p><strong>Example 3:</strong></p>\n<pre><code>Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n</code></pre>\n<h3>Solution:</h3>\n<p>Sell immediately after the price drops. Or in other perspective, it is the sum of all the incremental pairs (buy in then immediately sell out).</p>\n<pre><code class=\"language-javascript\">/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    let max = 0;\n    for (let i = 1; i &#x3C; prices.length; i++) {\n        if (prices[i] > prices[i - 1]) {\n            max += prices[i] - prices[i - 1];\n        }\n    }\n    return max;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Hard\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\n\"Dynamic Programming\": <a href=\"https://leetcode.com/tag/dynamic-programming\">https://leetcode.com/tag/dynamic-programming</a>\nSimilar Questions:\n\"Best Time to Buy and Sell Stock\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock</a>\n\"Best Time to Buy and Sell Stock II\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii</a>\n\"Best Time to Buy and Sell Stock IV\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv</a>\n\"Maximum Sum of 3 Non-Overlapping Subarrays\": <a href=\"https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays\">https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays</a></p>\n<hr>\n<p><a href=\"#123-best-time-to-buy-and-sell-stock-iiihttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock-iiidescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/\">123. Best Time to Buy and Sell Stock III</a></h2>\n<h3>Problem:</h3>\n<p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p>\n<p>Design an algorithm to find the maximum profit. You may complete at most <em>two</em> transactions.</p>\n<p><strong>Note:</strong>You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n             engaging multiple transactions at the same time. You must sell before buying again.\n</code></pre>\n<p><strong>Example 3:</strong></p>\n<pre><code>Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n</code></pre>\n<h3>Solution:</h3>\n<p>Multiple transactions may not be engaged in at the same time. That means if we view the days that involed in the same transaction as a group, there won't be any intersection. We may complete at most <em>two</em> transactions, so divide the days into two groups, <code>[0...k]</code> and <code>[k...n-1]</code>. Notice <code>k</code> exists in both groups because technically we can sell out then immediately buy in at the same day.</p>\n<p>Define <code>p1(i)</code> to be the max profit of day <code>[0...i]</code>. This is just like the problem of <a href=\"./121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock.md\">121. Best Time to Buy and Sell Stock</a>.</p>\n<pre><code>p1(0) = 0\np1(i) = max( p1(i-1), prices[i] - min(prices[0], ..., prices[i-1]) ), 0 &#x3C; i &#x3C;= n-1\n</code></pre>\n<p>Define <code>p2(i)</code> to be the max profit of day <code>[i...n-1]</code>. This is the mirror of <code>p1</code>.</p>\n<pre><code>p2(n-1) = 0\np2(i) = max( p2(i+1), max(prices[i], ..., prices[n-1]) - prices[i] ), n-1 > i >= 0\n</code></pre>\n<p>Define <code>f(k)</code> to be <code>p1(k) + p2(k)</code>. We need to get <code>max( f(0), ..., f(n-1) )</code>.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    const len = prices.length;\n    if (len &#x3C;= 1) {\n        return 0;\n    }\n\n    const dp = [0];\n\n    let min = prices[0];\n    for (let i = 1; i &#x3C; len; i++) {\n        dp[i] = Math.max(dp[i - 1], prices[i] - min);\n        min = Math.min(prices[i], min);\n    }\n\n    let p2 = 0;\n    let max = prices[len - 1];\n    for (let i = len - 2; i >= 0; i--) {\n        max = Math.max(prices[i], max);\n        p2 = Math.max(p2, max - prices[i]);\n        dp[i] += p2;\n    }\n\n    return Math.max(...dp);\n};\n</code></pre>\n<hr>\n<p>Difficulty: Hard\nRelated Topics:\n\"Tree\": <a href=\"https://leetcode.com/tag/tree\">https://leetcode.com/tag/tree</a>\n\"Depth-first Search\": <a href=\"https://leetcode.com/tag/depth-first-search\">https://leetcode.com/tag/depth-first-search</a>\nSimilar Questions:\n\"Path Sum\": <a href=\"https://leetcode.com/problems/path-sum\">https://leetcode.com/problems/path-sum</a>\n\"Sum Root to Leaf Numbers\": <a href=\"https://leetcode.com/problems/sum-root-to-leaf-numbers\">https://leetcode.com/problems/sum-root-to-leaf-numbers</a>\n\"Path Sum IV\": <a href=\"https://leetcode.com/problems/path-sum-iv\">https://leetcode.com/problems/path-sum-iv</a>\n\"Longest Univalue Path\": <a href=\"https://leetcode.com/problems/longest-univalue-path\">https://leetcode.com/problems/longest-univalue-path</a></p>\n<hr>\n<p><a href=\"#124-binary-tree-maximum-path-sumhttpsleetcodecomproblemsbinary-tree-maximum-path-sumdescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/binary-tree-maximum-path-sum/description/\">124. Binary Tree Maximum Path Sum</a></h2>\n<h3>Problem:</h3>\n<p>Given a <strong>non-empty</strong> binary tree, find the maximum path sum.</p>\n<p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain <strong>at least one node</strong> and does not need to go through the root.</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: [1,2,3]\n\n       1\n      / \\\n     2   3\n\nOutput: 6\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: [-10,9,20,null,null,15,7]\n\n   -10\n   / \\\n  9  20\n    /  \\\n   15   7\n\nOutput: 42\n</code></pre>\n<h3>Solution:</h3>\n<p>For every <code>node</code>, there are six possible ways to get the max path sum:</p>\n<ul>\n<li>\n<p>With <code>node.val</code></p>\n<ol>\n<li><code>node.val</code> plus the max sum of a path that ends with <code>node.left</code>.</li>\n<li><code>node.val</code> plus the max sum of a path that starts with <code>node.right</code>.</li>\n<li><code>node.val</code> plus the max sum of both paths.</li>\n<li>Just <code>node.val</code> (the max sum of both paths are negative).</li>\n</ol>\n</li>\n<li>\n<p>Without<code>node.val</code> (disconnected)</p>\n<ol>\n<li>The max-sum path is somewhere under the <code>node.left</code> subtree.</li>\n<li>The max-sum path is somewhere under the <code>node.right</code> subtree.</li>\n</ol>\n</li>\n</ul>\n<p>There are two ways to implement this.</p>\n<h4>ONE</h4>\n<p>Define a function that returns two values. The max sum of a path that may or may not end with <code>root</code> node, and the max sum of the path that ends with <code>root</code> node.</p>\n<pre><code class=\"language-javascript\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet maxPathSum = function (root) {\n    return Math.max(..._maxPathSum(root));\n};\n\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nfunction _maxPathSum(root) {\n    if (!root) {\n        return [-Infinity, -Infinity];\n    }\n\n    const left = _maxPathSum(root.left);\n    const right = _maxPathSum(root.right);\n    return [Math.max(left[0], right[0], root.val + Math.max(0, left[1], right[1], left[1] + right[1])), Math.max(left[1], right[1], 0) + root.val];\n}\n</code></pre>\n<h4>TWO</h4>\n<p>Just return the later (max sum of a path that ends with <code>root</code>). Maintain a global variable to store the disconnected max sum.</p>\n<pre><code class=\"language-javascript\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet maxPathSum = function (root) {\n    const global = { max: -Infinity };\n    _maxPathSum(root, global);\n    return global.max;\n};\n\n/**\n * @param {TreeNode} root\n * @param {object} global\n * @param {number} global.max\n * @return {number[]}\n */\nfunction _maxPathSum(root, global) {\n    if (!root) {\n        return -Infinity;\n    }\n\n    const left = _maxPathSum(root.left, global);\n    const right = _maxPathSum(root.right, global);\n    const localMax = Math.max(left, right, 0) + root.val;\n    global.max = Math.max(global.max, localMax, root.val + left + right);\n    return localMax;\n}\n</code></pre>\n<hr>\n<p>Difficulty: Easy\nRelated Topics:\n\"Two Pointers\": <a href=\"https://leetcode.com/tag/two-pointers\">https://leetcode.com/tag/two-pointers</a>\n\"String\": <a href=\"https://leetcode.com/tag/string\">https://leetcode.com/tag/string</a>\nSimilar Questions:\n\"Palindrome Linked List\": <a href=\"https://leetcode.com/problems/palindrome-linked-list\">https://leetcode.com/problems/palindrome-linked-list</a>\n\"Valid Palindrome II\": <a href=\"https://leetcode.com/problems/valid-palindrome-ii\">https://leetcode.com/problems/valid-palindrome-ii</a></p>\n<hr>\n<p><a href=\"#125-valid-palindromehttpsleetcodecomproblemsvalid-palindromedescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/valid-palindrome/description/\">125. Valid Palindrome</a></h2>\n<h3>Problem:</h3>\n<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>\n<p><strong>Note:</strong> For the purpose of this problem, we define empty string as valid palindrome.</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: \"A man, a plan, a canal: Panama\"\nOutput: true\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: \"race a car\"\nOutput: false\n</code></pre>\n<h3>Solution:</h3>\n<h4>ONE</h4>\n<pre><code class=\"language-javascript\">/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    const clean = s.toLowerCase().split(/[^a-z0-9]*/);\n    return clean.join('') === clean.reverse().join('');\n};\n</code></pre>\n<h4>TWO</h4>\n<p>Remove non-alphanumeric characters then compare.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    const clean = s.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n    for (let i = 0, j = clean.length - 1; i &#x3C; j; i++, j--) {\n        if (clean[i] !== clean[j]) {\n            return false;\n        }\n    }\n    return true;\n};\n</code></pre>\n<h4>THREE</h4>\n<p>Compare the char codes.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    for (let i = 0, j = s.length - 1; i &#x3C; j; i++, j--) {\n        let left = s.charCodeAt(i);\n        while (i &#x3C; j &#x26;&#x26; (left &#x3C; 48 || (left > 57 &#x26;&#x26; left &#x3C; 65) || (left > 90 &#x26;&#x26; left &#x3C; 97) || left > 122)) {\n            left = s.charCodeAt(++i);\n        }\n        if (i >= j) {\n            return true;\n        }\n        if (left >= 65 &#x26;&#x26; left &#x3C;= 90) {\n            left += 32;\n        }\n\n        let right = s.charCodeAt(j);\n        while (i &#x3C; j &#x26;&#x26; (right &#x3C; 48 || (right > 57 &#x26;&#x26; right &#x3C; 65) || (right > 90 &#x26;&#x26; right &#x3C; 97) || right > 122)) {\n            right = s.charCodeAt(--j);\n        }\n        if (i >= j) {\n            return true;\n        }\n        if (right >= 65 &#x26;&#x26; right &#x3C;= 90) {\n            right += 32;\n        }\n\n        if (left !== right) {\n            return false;\n        }\n    }\n\n    return true;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Hard\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\n\"String\": <a href=\"https://leetcode.com/tag/string\">https://leetcode.com/tag/string</a>\n\"Backtracking\": <a href=\"https://leetcode.com/tag/backtracking\">https://leetcode.com/tag/backtracking</a>\n\"Breadth-first Search\": <a href=\"https://leetcode.com/tag/breadth-first-search\">https://leetcode.com/tag/breadth-first-search</a>\nSimilar Questions:\n\"Word Ladder\": <a href=\"https://leetcode.com/problems/word-ladder\">https://leetcode.com/problems/word-ladder</a></p>\n<hr>\n<p><a href=\"#126-word-ladder-iihttpsleetcodecomproblemsword-ladder-iidescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/word-ladder-ii/description/\">126. Word Ladder II</a></h2>\n<h3>Problem:</h3>\n<p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary's word list, find all shortest transformation sequence(s) from <em>beginWord</em> to <em>endWord</em>, such that:</p>\n<ol>\n<li>Only one letter can be changed at a time</li>\n<li>Each transformed word must exist in the word list. Note that <em>beginWord</em> is <em>not</em> a transformed word.</li>\n</ol>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Return an empty list if there is no such transformation sequence.</li>\n<li>All words have the same length.</li>\n<li>All words contain only lowercase alphabetic characters.</li>\n<li>You may assume no duplicates in the word list.</li>\n<li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\nOutput:\n[\n  [\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],\n  [\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]\n]\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\nOutput: []\n\nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation.\n</code></pre>\n<h3>Solution:</h3>\n<p>This is just like <a href=\"./127.%20Word%20Ladder\">127. Word Ladder</a>.</p>\n<p>The constrain still works, but instead of deleting the words right away, collect them and delete them all when a level ends, so that we can reuse the words (matching different parents in the same level).</p>\n<p>The items in the queue are not just words now. Parent nodes are also kept so that we can backtrack the path from the end.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {string[][]}\n */\nfunction findLadders(beginWord, endWord, wordList) {\n    wordList = new Set(wordList);\n    if (!wordList.has(endWord)) {\n        return [];\n    }\n\n    const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\n    const result = [];\n    let isEndWordFound = false;\n    const levelWords = new Set();\n    const queue = [[beginWord, null], null];\n    while (queue.length > 1) {\n        const node = queue.shift();\n\n        if (node === null) {\n            if (isEndWordFound) {\n                break;\n            }\n            levelWords.forEach((word) => wordList.delete(word));\n            levelWords.clear();\n            queue.push(null);\n            continue;\n        }\n\n        const word = node[0];\n\n        for (let i = word.length - 1; i >= 0; i--) {\n            const head = word.slice(0, i);\n            const tail = word.slice(i + 1);\n\n            for (let c = 0; c &#x3C; 26; c++) {\n                if (ALPHABET[c] !== word[i]) {\n                    const w = head + ALPHABET[c] + tail;\n                    if (w === endWord) {\n                        const path = [endWord];\n                        for (let n = node; n !== null; n = n[1]) {\n                            path.unshift(n[0]);\n                        }\n                        result.push(path);\n                        isEndWordFound = true;\n                    }\n                    if (wordList.has(w)) {\n                        levelWords.add(w);\n                        queue.push([w, node]);\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n}\n</code></pre>\n<hr>\n<p>Difficulty: Medium\nRelated Topics:\n\"Breadth-first Search\": <a href=\"https://leetcode.com/tag/breadth-first-search\">https://leetcode.com/tag/breadth-first-search</a>\nSimilar Questions:\n\"Word Ladder II\": <a href=\"https://leetcode.com/problems/word-ladder-ii\">https://leetcode.com/problems/word-ladder-ii</a>\n\"Minimum Genetic Mutation\": <a href=\"https://leetcode.com/problems/minimum-genetic-mutation\">https://leetcode.com/problems/minimum-genetic-mutation</a></p>\n<hr>\n<p><a href=\"#127-word-ladderhttpsleetcodecomproblemsword-ladderdescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/word-ladder/description/\">127. Word Ladder</a></h2>\n<h3>Problem:</h3>\n<p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary's word list, find the length of shortest transformation sequence from <em>beginWord</em> to <em>endWord</em>, such that:</p>\n<ol>\n<li>Only one letter can be changed at a time.</li>\n<li>Each transformed word must exist in the word list. Note that <em>beginWord</em> is <em>not</em> a transformed word.</li>\n</ol>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Return 0 if there is no such transformation sequence.</li>\n<li>All words have the same length.</li>\n<li>All words contain only lowercase alphabetic characters.</li>\n<li>You may assume no duplicates in the word list.</li>\n<li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\nOutput: 5\n\nExplanation: As one shortest transformation is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\",\nreturn its length 5.\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\nOutput: 0\n\nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation.\n</code></pre>\n<h3>Solution:</h3>\n<p>Think of it as building a tree, with <code>begineWord</code> as root and <code>endWord</code> as leaves.</p>\n<p>The best way control the depth (length of the shortest transformations) while building the tree is level-order traversal (BFS).</p>\n<p>We do not actually build the tree because it is expensive (astronomical if the list is huge). In fact, we only need one shortest path. So just like Dijkstra's algorithm, we say that the first time (level <code>i</code>) we encounter a word that turns out to be in a shortest path, then level <code>i</code> is the lowest level this word could ever get. We can safely remove it from the <code>wordList</code>.</p>\n<p>To find all the next words, instead of filtering the <code>wordList</code>, enumerate all 25 possible words and check if in <code>wordList</code>.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {number}\n */\nlet ladderLength = function (beginWord, endWord, wordList) {\n    wordList = new Set(wordList);\n    if (!wordList.has(endWord)) {\n        return 0;\n    }\n\n    const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\n    let level = 1;\n    const queue = [beginWord, null];\n    while (queue.length > 1) {\n        const word = queue.shift();\n\n        if (word === null) {\n            level++;\n            queue.push(null);\n            continue;\n        }\n\n        for (let i = word.length - 1; i >= 0; i--) {\n            const head = word.slice(0, i);\n            const tail = word.slice(i + 1);\n\n            for (let c = 0; c &#x3C; 26; c++) {\n                if (ALPHABET[c] !== word[i]) {\n                    const word = head + ALPHABET[c] + tail;\n                    if (word === endWord) {\n                        return level + 1;\n                    }\n                    if (wordList.delete(word)) {\n                        queue.push(word);\n                    }\n                }\n            }\n        }\n    }\n\n    return 0;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Hard\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\n\"Union Find\": <a href=\"https://leetcode.com/tag/union-find\">https://leetcode.com/tag/union-find</a>\nSimilar Questions:\n\"Binary Tree Longest Consecutive Sequence\": <a href=\"https://leetcode.com/problems/binary-tree-longest-consecutive-sequence\">https://leetcode.com/problems/binary-tree-longest-consecutive-sequence</a></p>\n<hr>\n<p><a href=\"#128-longest-consecutive-sequencehttpsleetcodecomproblemslongest-consecutive-sequencedescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/longest-consecutive-sequence/description/\">128. Longest Consecutive Sequence</a></h2>\n<h3>Problem:</h3>\n<p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.</p>\n<p>Your algorithm should run in O(<em>n</em>) complexity.</p>\n<p><strong>Example:</strong></p>\n<pre><code>Input: [100, 4, 200, 1, 3, 2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n</code></pre>\n<h3>Solution:</h3>\n<p>Build a Set from the list. Pick a number, find all it's adjacent numbers that are also in the Set. Count them and remove them all from the Set. Repeat until the Set is empty. Time complexity O(n + n) = O(n).</p>\n<pre><code class=\"language-javascript\">/**\n * @param {number[]} nums\n * @return {number}\n */\nlet longestConsecutive = function (nums) {\n    const numSet = new Set(nums);\n    let maxCount = 0;\n    while (numSet.size > 0) {\n        const num = numSet.values().next().value;\n        numSet.delete(num);\n        let count = 1;\n        for (let n = num + 1; numSet.delete(n); n++) {\n            count++;\n        }\n        for (let n = num - 1; numSet.delete(n); n--) {\n            count++;\n        }\n        if (count > maxCount) {\n            maxCount = count;\n        }\n    }\n    return maxCount;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Medium\nRelated Topics:\n\"Tree\": <a href=\"https://leetcode.com/tag/tree\">https://leetcode.com/tag/tree</a>\n\"Depth-first Search\": <a href=\"https://leetcode.com/tag/depth-first-search\">https://leetcode.com/tag/depth-first-search</a>\nSimilar Questions:\n\"Path Sum\": <a href=\"https://leetcode.com/problems/path-sum\">https://leetcode.com/problems/path-sum</a>\n\"Binary Tree Maximum Path Sum\": <a href=\"https://leetcode.com/problems/binary-tree-maximum-path-sum\">https://leetcode.com/problems/binary-tree-maximum-path-sum</a></p>\n<hr>\n<p><a href=\"#129-sum-root-to-leaf-numbershttpsleetcodecomproblemssum-root-to-leaf-numbersdescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/sum-root-to-leaf-numbers/description/\">129. Sum Root to Leaf Numbers</a></h2>\n<h3>Problem:</h3>\n<p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p>\n<p>An example is the root-to-leaf path <code>1->2->3</code> which represents the number <code>123</code>.</p>\n<p>Find the total sum of all root-to-leaf numbers.</p>\n<p><strong>Note:</strong> A leaf is a node with no children.</p>\n<p><strong>Example:</strong></p>\n<pre><code>Input: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n</code></pre>\n<h3>Solution:</h3>\n<p>To write a clean solution for this promblem, use <code>0</code> as indicator of leaf node. If all the children get <code>0</code>, it is a leaf node, return the sum of current level.</p>\n<pre><code class=\"language-javascript\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet sumNumbers = function (root, sum = 0) {\n    if (!root) {\n        return 0;\n    }\n    sum = sum * 10 + root.val;\n    return sumNumbers(root.left, sum) + sumNumbers(root.right, sum) || sum;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Medium\nRelated Topics:\n\"Depth-first Search\": <a href=\"https://leetcode.com/tag/depth-first-search\">https://leetcode.com/tag/depth-first-search</a>\n\"Breadth-first Search\": <a href=\"https://leetcode.com/tag/breadth-first-search\">https://leetcode.com/tag/breadth-first-search</a>\n\"Union Find\": <a href=\"https://leetcode.com/tag/union-find\">https://leetcode.com/tag/union-find</a>\nSimilar Questions:\n\"Number of Islands\": <a href=\"https://leetcode.com/problems/number-of-islands\">https://leetcode.com/problems/number-of-islands</a>\n\"Walls and Gates\": <a href=\"https://leetcode.com/problems/walls-and-gates\">https://leetcode.com/problems/walls-and-gates</a></p>\n<hr>\n<p><a href=\"#130-surrounded-regionshttpsleetcodecomproblemssurrounded-regionsdescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/surrounded-regions/description/\">130. Surrounded Regions</a></h2>\n<h3>Problem:</h3>\n<p>Given a 2D board containing <code>'X'</code> and <code>'O'</code> (<strong>the letter O</strong>), capture all regions surrounded by <code>'X'</code>.</p>\n<p>A region is captured by flipping all <code>'O'</code>s into <code>'X'</code>s in that surrounded region.</p>\n<p><strong>Example:</strong></p>\n<pre><code>X X X X\nX O O X\nX X O X\nX O X X\n</code></pre>\n<p>After running your function, the board should be:</p>\n<pre><code>X X X X\nX X X X\nX X X X\nX O X X\n</code></pre>\n<p><strong>Explanation:</strong></p>\n<p>Surrounded regions shouldn't be on the border, which means that any <code>'O'</code> on the border of the board are not flipped to <code>'X'</code>. Any <code>'O'</code> that is not on the border and it is not connected to an <code>'O'</code> on the border will be flipped to <code>'X'</code>. Two cells are connected if they are adjacent cells connected horizontally or vertically.</p>\n<h3>Solution:</h3>\n<p>Find all the <code>O</code>s that are connected to the <code>O</code>s on the border, change them to <code>#</code>. Then scan the board, change <code>O</code> to <code>X</code> and <code>#</code> back to <code>O</code>.</p>\n<p>The process of finding the connected <code>O</code>s is just like tree traversal. <code>O</code>s on the border are the same level. Their children are the second level. And so on.</p>\n<p>So both BFS and DFS are good. I prefer BFS when pruning is not needed in favor of its readability.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nlet solve = function (board) {\n    const height = board.length;\n    if (height &#x3C;= 1) {\n        return;\n    }\n    const width = board[0].length;\n    if (width &#x3C;= 1) {\n        return;\n    }\n\n    const rowend = height - 1;\n    const colend = width - 1;\n\n    const queue = [];\n\n    for (let row = 0; row &#x3C; height; row++) {\n        if (board[row][0] === 'O') {\n            board[row][0] = '#';\n            queue.push(row, 0);\n        }\n        if (board[row][colend] === 'O') {\n            board[row][colend] = '#';\n            queue.push(row, colend);\n        }\n    }\n\n    for (let col = 0; col &#x3C; width; col++) {\n        if (board[0][col] === 'O') {\n            board[0][col] = '#';\n            queue.push(0, col);\n        }\n        if (board[rowend][col] === 'O') {\n            board[rowend][col] = '#';\n            queue.push(rowend, col);\n        }\n    }\n\n    while (queue.length > 0) {\n        const row = queue.shift();\n        const col = queue.shift();\n        if (row &#x3C; rowend &#x26;&#x26; board[row + 1][col] === 'O') {\n            board[row + 1][col] = '#';\n            queue.push(row + 1, col);\n        }\n        if (row > 0 &#x26;&#x26; board[row - 1][col] === 'O') {\n            board[row - 1][col] = '#';\n            queue.push(row - 1, col);\n        }\n        if (board[row][col + 1] === 'O') {\n            board[row][col + 1] = '#';\n            queue.push(row, col + 1);\n        }\n        if (board[row][col - 1] === 'O') {\n            board[row][col - 1] = '#';\n            queue.push(row, col - 1);\n        }\n    }\n\n    for (let row = 0; row &#x3C; height; row++) {\n        for (let col = 0; col &#x3C; width; col++) {\n            if (board[row][col] === '#') {\n                board[row][col] = 'O';\n            } else if (board[row][col] === 'O') {\n                board[row][col] = 'X';\n            }\n        }\n    }\n};\n</code></pre>\n<hr>\n<p>Difficulty: Medium\nRelated Topics:\n\"Depth-first Search\": <a href=\"https://leetcode.com/tag/depth-first-search\">https://leetcode.com/tag/depth-first-search</a>\n\"Breadth-first Search\": <a href=\"https://leetcode.com/tag/breadth-first-search\">https://leetcode.com/tag/breadth-first-search</a>\n\"Graph\": <a href=\"https://leetcode.com/tag/graph\">https://leetcode.com/tag/graph</a>\nSimilar Questions:\n\"Copy List with Random Pointer\": <a href=\"https://leetcode.com/problems/copy-list-with-random-pointer\">https://leetcode.com/problems/copy-list-with-random-pointer</a></p>\n<hr>\n<p><a href=\"#133-clone-graphhttpsleetcodecomproblemsclone-graphdescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/clone-graph/description/\">133. Clone Graph</a></h2>\n<h3>Problem:</h3>\n<p>Given the head of a graph, return a deep copy (clone) of the graph. Each node in the graph contains a <code>label</code> (<code>int</code>) and a list (<code>List[UndirectedGraphNode]</code>) of its <code>neighbors</code>. There is an edge between the given node and each of the nodes in its neighbors.</p>\n<p>OJ's undirected graph serialization (so you can understand error output):</p>\n<p>Nodes are labeled uniquely.</p>\n<p>We use <code>#</code> as a separator for each node, and <code>,</code> as a separator for node label and each neighbor of the node.</p>\n<p>As an example, consider the serialized graph <code>{0,1,2#1,2#2,2}</code>.</p>\n<p>The graph has a total of three nodes, and therefore contains three parts as separated by <code>#</code>.</p>\n<ol>\n<li>First node is labeled as <code>0</code>. Connect node <code>0</code> to both nodes <code>1</code> and <code>2</code>.</li>\n<li>Second node is labeled as <code>1</code>. Connect node <code>1</code> to node <code>2</code>.</li>\n<li>Third node is labeled as <code>2</code>. Connect node <code>2</code> to node <code>2</code> (itself), thus forming a self-cycle.</li>\n</ol>\n<p>Visually, the graph looks like the following:</p>\n<pre><code>       1\n      / \\\n     /   \\\n    0 --- 2\n         / \\\n         \\_/\n</code></pre>\n<p><strong>Note</strong>: The information about the tree serialization is only meant so that you can understand error output if you get a wrong answer. You don't need to understand the serialization to solve the problem.</p>\n<h3>Solution:</h3>\n<p>DFS. Cache the visited node before entering the next recursion.</p>\n<pre><code class=\"language-javascript\">/**\n * Definition for undirected graph.\n * function UndirectedGraphNode(label) {\n *     this.label = label;\n *     this.neighbors = [];   // Array of UndirectedGraphNode\n * }\n */\n\n/**\n * @param {UndirectedGraphNode} graph\n * @return {UndirectedGraphNode}\n */\nlet cloneGraph = function (graph) {\n    const cache = {};\n    return _clone(graph);\n\n    function _clone(graph) {\n        if (!graph) {\n            return graph;\n        }\n        const label = graph.label;\n        if (!cache[label]) {\n            cache[label] = new UndirectedGraphNode(label);\n            cache[label].neighbors = graph.neighbors.map(_clone);\n        }\n        return cache[label];\n    }\n};\n</code></pre>\n<p><img src=\"https://github.com/everthis/leetcode-js/blob/master/images/binary-tree-upside-down.webp\" alt=\"alt text\" title=\"binary-tree-upside-down\"></p>\n<pre><code class=\"language-js\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nconst upsideDownBinaryTree = function (root) {\n    let curr = root;\n    let next = null;\n    let temp = null;\n    let prev = null;\n    while (curr !== null) {\n        next = curr.left;\n        curr.left = temp;\n        temp = curr.right;\n        curr.right = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};\n\n// another\n\nconst upsideDownBinaryTree = function (root) {\n    if (root == null || root.left == null) {\n        return root;\n    }\n    const newRoot = upsideDownBinaryTree(root.left);\n    root.left.left = root.right;\n    root.left.right = root;\n    root.left = null;\n    root.right = null;\n    return newRoot;\n};\n</code></pre>\n<p><img src=\"https://github.com/everthis/leetcode-js/blob/master/images/maximum-sum-circular-subarray.png\" alt=\"alt text\" title=\"maximum-sum-circular-subarray\"></p>\n<pre><code class=\"language-js\">/**\n * @param {number[]} A\n * @return {number}\n */\nconst maxSubarraySumCircular = function (A) {\n    let minSum = Infinity,\n        sum = 0,\n        maxSum = -Infinity,\n        curMax = 0,\n        curMin = 0;\n    for (let a of A) {\n        sum += a;\n        curMax = Math.max(curMax + a, a);\n        maxSum = Math.max(maxSum, curMax);\n        curMin = Math.min(curMin + a, a);\n        minSum = Math.min(minSum, curMin);\n    }\n    return maxSum > 0 ? Math.max(maxSum, sum - minSum) : maxSum;\n};\n</code></pre>\n<p><a href=\"#balanced-binary-tree---leetcode\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h1>➤ Balanced Binary Tree - LeetCode</h1>\n<blockquote>\n<p>Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.</p>\n</blockquote>\n<p>Given a binary tree, determine if it is height-balanced.</p>\n<p>For this problem, a height-balanced binary tree is defined as:</p>\n<blockquote>\n<p>a binary tree in which the left and right subtrees of <em>every</em> node differ in height by no more than 1.</p>\n</blockquote>\n<p><strong>Example 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg\"></p>\n<p><strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> true</p>\n<p><strong>Example 2:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg\"></p>\n<p><strong>Input:</strong> root = [1,2,2,3,3,null,null,4,4]\n<strong>Output:</strong> false</p>\n<p><strong>Example 3:</strong></p>\n<p><strong>Input:</strong> root = []\n<strong>Output:</strong> true</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li>\n<li><code>-104 &#x3C;= Node.val &#x3C;= 104</code></li>\n</ul>\n<p><a href=\"https://leetcode.com/problems/balanced-binary-tree/\">Source</a># Convert Sorted Array to Binary Search Tree</p>\n<blockquote>\n<p>Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.</p>\n</blockquote>\n<p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>\n<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of <em>every</em> node never differ by more than 1.</p>\n<p><strong>Example:</strong></p>\n<p>Given the sorted array: [-10,-3,0,5,9],</p>\n<p>One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:</p>\n<pre><code>  0\n / \\\\\n</code></pre>\n<p>-3 9\n/ /\n-10 5</p>\n<p><a href=\"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/\">Source</a># Delete Node in a BST</p>\n<blockquote>\n<p>Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.</p>\n</blockquote>\n<p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p>\n<p>Basically, the deletion can be divided into two stages:</p>\n<ol>\n<li>Search for a node to remove.</li>\n<li>If the node is found, delete the node.</li>\n</ol>\n<p><strong>Follow up:</strong> Can you solve it with time complexity <code>O(height of tree)</code>?</p>\n<p><strong>Example 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg\"></p>\n<p><strong>Input:</strong> root = [5,3,6,2,4,null,7], key = 3\n<strong>Output:</strong> [5,4,6,2,null,null,7]\n<strong>Explanation:</strong> Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\n<img src=\"https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg\"></p>\n<p><strong>Example 2:</strong></p>\n<p><strong>Input:</strong> root = [5,3,6,2,4,null,7], key = 0\n<strong>Output:</strong> [5,3,6,2,4,null,7]\n<strong>Explanation:</strong> The tree does not contain a node with value = 0.</p>\n<p><strong>Example 3:</strong></p>\n<p><strong>Input:</strong> root = [], key = 0\n<strong>Output:</strong> []</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li>The number of nodes in the tree is in the range <code>[0, 104]</code>.</li>\n<li><code>-105 &#x3C;= Node.val &#x3C;= 105</code></li>\n<li>Each node has a <strong>unique</strong> value.</li>\n<li><code>root</code> is a valid binary search tree.</li>\n<li><code>-105 &#x3C;= key &#x3C;= 105</code></li>\n</ul>\n<p><a href=\"https://leetcode.com/problems/delete-node-in-a-bst/\">Source</a><img src=\"https://github.com/everthis/leetcode-js/blob/master/images/meeting-room-ii-0.jpg\" alt=\"alt text\" title=\"meeting-room-ii\">\n<img src=\"https://github.com/everthis/leetcode-js/blob/master/images/meeting-room-ii-1.jpg\" alt=\"alt text\" title=\"meeting-room-ii\"></p>\n<pre><code class=\"language-javascript\">/**\n * @param {number[][]} intervals\n * @return {number}\n */\nconst minMeetingRooms = function (intervals) {\n    const len = intervals.length;\n    const starts = new Array(len);\n    const ends = new Array(len);\n    for (let i = 0; i &#x3C; len; i++) {\n        starts[i] = intervals[i][0];\n        ends[i] = intervals[i][1];\n    }\n    starts.sort((a, b) => a - b);\n    ends.sort((a, b) => a - b);\n    let rooms = 0;\n    let endsIdx = 0;\n    for (let i = 0; i &#x3C; len; i++) {\n        if (starts[i] &#x3C; ends[endsIdx]) rooms++;\n        else endsIdx++;\n    }\n    return rooms;\n};\n</code></pre>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>"
                },
                {
                    "url": "/blog/",
                    "relativePath": "blog/index.md",
                    "relativeDir": "blog",
                    "base": "index.md",
                    "name": "index",
                    "frontmatter": {
                        "title": "Blog",
                        "subtitle": "Exclusive Blog Content",
                        "image": "images/curious-europa.gif",
                        "has_more_link": true,
                        "more_link_text": "Read more",
                        "seo": {
                            "title": "Blog",
                            "description": "This is the blog page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Blog", "keyName": "property" },
                                { "name": "og:description", "value": "This is the blog page", "keyName": "property" },
                                { "name": "og:image", "value": "images/5.jpg", "keyName": "property", "relativeUrl": true },
                                { "name": "twitter:card", "value": "summary_large_image" },
                                { "name": "twitter:title", "value": "Blog" },
                                { "name": "twitter:description", "value": "This is the blog page" },
                                { "name": "twitter:image", "value": "images/5.jpg", "relativeUrl": true }
                            ]
                        },
                        "template": "blog"
                    },
                    "html": ""
                },
                {
                    "url": "/docs/",
                    "relativePath": "docs/index.md",
                    "relativeDir": "docs",
                    "base": "index.md",
                    "name": "index",
                    "frontmatter": {
                        "title": "Docs",
                        "seo": {
                            "title": "Web Dev Hub",
                            "description": "Docs Home",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Web Dev Hub", "keyName": "property" },
                                { "name": "og:description", "value": "Docs Home", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "Web Dev Hub" },
                                { "name": "twitter:description", "value": "Docs Home" }
                            ]
                        },
                        "template": "docs",
                        "weight": 900,
                        "excerpt": "docs quick reference"
                    },
                    "html": "<h2>Doc Websites &#x26; Repos</h2>\n<ul>\n<li><a href=\"https://github.com/bgoonz/PYTHON_PRAC\">Python Practice</a></li>\n<li><a href=\"https://lambda-resources.netlify.app/\">Lambda Bootcamp Website</a></li>\n<li><a href=\"https://github.com/bgoonz/React_Notes_V3\">React Notes</a></li>\n<li><a href=\"https://github.com/bgoonz/Project-Showcase\">Project Showcase</a></li>\n<li><a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\">Data Structures &#x26; Algorithms</a></li>\n<li><a href=\"https://github.com/bgoonz/Lambda-Resource-Static-Assets\">Lambda Site Static Content Server</a></li>\n<li><a href=\"https://github.com/bgoonz/mini-project-showcase\">Mini-Project Showcase</a></li>\n<li><a href=\"https://github.com/bgoonz/Useful-Snippets-js\">Useful Snippets</a></li>\n<li><a href=\"https://github.com/bgoonz/Markdown-Templates\">Markdown Templates</a></li>\n<li><a href=\"https://github.com/bgoonz/zumzi-chat-messenger\">Zumzi Video Conferencing App (mesibo api backend)</a></li>\n</ul>\n<h1>Core Concepts</h1>\n<h1>index</h1>\n<p>This appendix is a non-exhaustive list of new syntactic features and methods that were added to JavaScript in ES6. These features are the most commonly used and most helpful.</p>\n<p>While this appendix doesn't cover ES6 classes, we go over the basics while learning about components in the book. In addition, this appendix doesn't include descriptions of some larger new features like promises and generators. If you'd like more info on those or on any topic below, we encourage you to reference the <a href=\"https://developer.mozilla.org/\">Mozilla Developer Network's website</a> (MDN).</p>\n<h2>Prefer <code>const</code> and <code>let</code> over <code>var</code></h2>\n<p>If you've worked with ES5 JavaScript before, you're likely used to seeing variables declared with <code>var</code>:</p>\n<pre><code class=\"language-js\">ar myVariable = 5;\n</code></pre>\n<p>Both the <code>const</code> and <code>let</code> statements also declare variables. They were introduced in ES6.</p>\n<p>Use <code>const</code> in cases where a variable is never re-assigned. Using <code>const</code> makes this clear to whoever is reading your code. It refers to the \"constant\" state of the variable in the context it is defined within.</p>\n<p>If the variable will be re-assigned, use <code>let</code>.</p>\n<p>We encourage the use of <code>const</code> and <code>let</code> instead of <code>var</code>. In addition to the restriction introduced by <code>const</code>, both <code>const</code> and <code>let</code> are <em>block scoped</em> as opposed to <em>function scoped</em>. This scoping can help avoid unexpected bugs.</p>\n<h2>Arrow functions</h2>\n<p>There are three ways to write arrow function bodies. For the examples below, let's say we have an array of city objects:</p>\n<pre><code class=\"language-js\">onst cities = [\n  { name: 'Cairo', pop: 7764700 },\n  { name: 'Lagos', pop: 8029200 },\n];\n</code></pre>\n<p>If we write an arrow function that spans multiple lines, we must use braces to delimit the function body like this:</p>\n<pre><code class=\"language-js\">const formattedPopulations = cities.map((city) => {\n    const popMM = (city.pop / 1000000).toFixed(2);\n    return popMM + ' million';\n});\nconsole.log(formattedPopulations);\n</code></pre>\n<p>Note that we must also explicitly specify a <code>return</code> for the function.</p>\n<p>However, if we write a function body that is only a single line (or single expression) we can use parentheses to delimit it:</p>\n<pre><code class=\"language-js\">const formattedPopulations2 = cities.map((city) => (city.pop / 1000000).toFixed(2) + ' million');\n</code></pre>\n<p>Notably, we don't use <code>return</code> as it's implied.</p>\n<p>Furthermore, if your function body is terse you can write it like so:</p>\n<pre><code class=\"language-js\">const pops = cities.map((city) => city.pop);\nconsole.log(pops);\n</code></pre>\n<p>The terseness of arrow functions is one of two reasons that we use them. Compare the one-liner above to this:</p>\n<pre><code class=\"language-js\">const popsNoArrow = cities.map(function (city) {\n    return city.pop;\n});\n</code></pre>\n<p>Of greater benefit, though, is how arrow functions bind the <code>this</code> object.</p>\n<p>The traditional JavaScript function declaration syntax (<code>function () {}</code>) will bind <code>this</code> in anonymous functions to the global object. To illustrate the confusion this causes, consider the following example:</p>\n<pre><code class=\"language-js\">unction printSong() {\n  console.log(\"Oops - The Global Object\");\n}\n\nconst jukebox = {\n  songs: [\n    {\n      title: \"Wanna Be Startin' Somethin'\",\n      artist: \"Michael Jackson\",\n    },\n    {\n      title: \"Superstar\",\n      artist: \"Madonna\",\n    },\n  ],\n  printSong: function (song) {\n    console.log(song.title + \" - \" + song.artist);\n  },\n  printSongs: function () {\n\n    this.songs.forEach(function(song) {\n\n      this.printSong(song);\n    });\n  },\n}\n\njukebox.printSongs();\n</code></pre>\n<p>The method <code>printSongs()</code> iterates over <code>this.songs</code> with <code>forEach()</code>. In this context, <code>this</code> is bound to the object (<code>jukebox</code>) as expected. However, the anonymous function passed to <code>forEach()</code> binds its internal <code>this</code> to the global object. As such, <code>this.printSong(song)</code> calls the function declared at the top of the example, <em>not</em> the method on <code>jukebox</code>.</p>\n<p>JavaScript developers have traditionally used workarounds for this behavior, but arrow functions solve the problem by <strong>capturing the <code>this</code> value of the enclosing context</strong>. Using an arrow function for <code>printSongs()</code> has the expected result:</p>\n<pre><code class=\"language-js\">  printSongs: function () {\n    this.songs.forEach((song) => {\n\n      this.printSong(song);\n    });\n  },\n}\n\njukebox.printSongs();\n</code></pre>\n<p>For this reason, throughout the book we use arrow functions for all anonymous functions.</p>\n<h2>Modules</h2>\n<p>ES6 formally supports modules using the <code>import</code>/<code>export</code> syntax.</p>\n<p><strong>Named exports</strong></p>\n<p>Inside any file, you can use <code>export</code> to specify a variable the module should expose. Here's an example of a file that exports two functions:</p>\n<pre><code class=\"language-js\">export const sayHi = () => console.log('Hi!');\nexport const sayBye = () => console.log('Bye!');\n\nconst saySomething = () => console.log('Something!');\n</code></pre>\n<p>Now, anywhere we wanted to use these functions we could use <code>import</code>. We need to specify which functions we want to import. A common way of doing this is using ES6's destructuring assignment syntax to list them out like this:</p>\n<pre><code class=\"language-js\">import { sayHi, sayBye } from './greetings';\n\nsayHi();\nsayBye();\n</code></pre>\n<p>Importantly, the function that was <em>not</em> exported (<code>saySomething</code>) is unavailable outside of the module.</p>\n<p>Also note that we supply a <strong>relative path</strong> to <code>from</code>, indicating that the ES6 module is a local file as opposed to an npm package.</p>\n<p>Instead of inserting an <code>export</code> before each variable you'd like to export, you can use this syntax to list off all the exposed variables in one area:</p>\n<pre><code class=\"language-js\">const sayHi = () => console.log('Hi!');\nconst sayBye = () => console.log('Bye!');\n\nconst saySomething = () => console.log('Something!');\n\nexport { sayHi, sayBye };\n</code></pre>\n<p>We can also specify that we'd like to import all of a module's functionality underneath a given namespace with the <code>import * as &#x3C;Namespace></code> syntax:</p>\n<pre><code class=\"language-js\">import * as Greetings from './greetings';\n\nGreetings.sayHi();\n\nGreetings.sayBye();\n\nGreetings.saySomething();\n</code></pre>\n<p><strong>Default export</strong></p>\n<p>The other type of export is a default export. A module can only contain one default export:</p>\n<pre><code class=\"language-js\">const sayHi = () => console.log('Hi!');\nconst sayBye = () => console.log('Bye!');\n\nconst saySomething = () => console.log('Something!');\n\nconst Greetings = { sayHi, sayBye };\n\nexport default Greetings;\n</code></pre>\n<p>This is a common pattern for libraries. It means you can easily import the library wholesale without specifying what individual functions you want:</p>\n<pre><code class=\"language-js\">import Greetings from './greetings';\n\nGreetings.sayHi();\nGreetings.sayBye();\n</code></pre>\n<p>It's not uncommon for a module to use a mix of both named exports and default exports. For instance, with <code>react-dom</code>, you can import <code>ReactDOM</code> (a default export) like this:</p>\n<pre><code class=\"language-js\">import ReactDOM from 'react-dom';\n\nReactDOM.render();\n</code></pre>\n<p>Or, if you're only going to use the <code>render()</code> function, you can import the named <code>render()</code> function like this:</p>\n<pre><code class=\"language-js\">import { render } from 'react-dom';\n\nrender();\n</code></pre>\n<p>To achieve this flexibility, the export implementation for <code>react-dom</code> looks something like this:</p>\n<pre><code class=\"language-js\">export const render = (component, target) => {};\n\nconst ReactDOM = {\n    render\n};\n\nexport default ReactDOM;\n</code></pre>\n<p>If you want to play around with the module syntax, check out the folder <code>code/webpack/es6-modules</code>.</p>\n<p>For more reading on ES6 modules, see this article from Mozilla: \"<a href=\"https://hacks.mozilla.org/2015/08/es6-in-depth-modules/\">ES6 in Depth: Modules</a>\".</p>\n<h2><code>Object.assign()</code></h2>\n<p>We use <code>Object.assign()</code> often throughout the book. We use it in areas where we want to create a modified version of an existing object.</p>\n<p><code>Object.assign()</code> accepts any number of objects as arguments. When the function receives two arguments, it <em>copies</em> the properties of the second object onto the first, like so:</p>\n<pre><code class=\"language-js\">onst coffee = { };\nconst noCream = { cream: false };\nconst noMilk = { milk: false };\nObject.assign(coffee, noCream);\n</code></pre>\n<p>It is idiomatic to pass in three arguments to <code>Object.assign()</code>. The first argument is a new JavaScript object, the one that <code>Object.assign()</code> will ultimately return. The second is the object whose properties we'd like to build off of. The last is the changes we'd like to apply:</p>\n<pre><code class=\"language-js\">const coffeeWithMilk = Object.assign({}, coffee, { milk: true });\n</code></pre>\n<p><code>Object.assign()</code> is a handy method for working with \"immutable\" JavaScript objects.</p>\n<h2>Template literals</h2>\n<p>In ES5 JavaScript, you'd interpolate variables into strings like this:</p>\n<pre><code class=\"language-js\">var greeting = 'Hello, ' + user + '! It is ' + degF + ' degrees outside.';\n</code></pre>\n<p>With ES6 template literals, we can create the same string like this:</p>\n<pre><code class=\"language-js\">const greeting = `Hello, ${user}! It is ${degF} degrees outside.`;\n</code></pre>\n<h2>The spread operator (<code>...</code>)</h2>\n<p>In arrays, the ellipsis <code>...</code> operator will <em>expand</em> the array that follows into the parent array. The spread operator enables us to succinctly construct new arrays as a composite of existing arrays.</p>\n<p>Here is an example:</p>\n<pre><code class=\"language-js\">onst a = [ 1, 2, 3 ];\nconst b = [ 4, 5, 6 ];\nconst c = [ ...a, ...b, 7, 8, 9 ];\n\nconsole.log(c);\n</code></pre>\n<p>Notice how this is different than if we wrote:</p>\n<pre><code class=\"language-js\">const d = [a, b, 7, 8, 9];\nconsole.log(d);\n</code></pre>\n<h2>Enhanced object literals</h2>\n<p>In ES5, all objects were required to have explicit key and value declarations:</p>\n<pre><code class=\"language-js\">const explicit = {\n    getState: getState,\n    dispatch: dispatch\n};\n</code></pre>\n<p>In ES6, you can use this terser syntax whenever the property name and variable name are the same:</p>\n<pre><code class=\"language-js\">const implicit = {\n    getState,\n    dispatch\n};\n</code></pre>\n<p>Lots of open source libraries use this syntax, so it's good to be familiar with it. But whether you use it in your own code is a matter of stylistic preference.</p>\n<h2>Default arguments</h2>\n<p>With ES6, you can specify a default value for an argument in the case that it is <code>undefined</code> when the function is called.</p>\n<p>This:</p>\n<pre><code class=\"language-js\">unction divide(a, b) {\n\n  const divisor = typeof b === 'undefined' ? 1 : b;\n\n  return a / divisor;\n}\n</code></pre>\n<p>Can be written as this:</p>\n<pre><code class=\"language-js\">function divide(a, b = 1) {\n    return a / b;\n}\n</code></pre>\n<p>In both cases, using the function looks like this:</p>\n<pre><code class=\"language-js\">divide(14, 2);\n\ndivide(14, undefined);\n\ndivide(14);\n</code></pre>\n<p>Whenever the argument <code>b</code> in the example above is <code>undefined</code>, the default argument is used. Note that <code>null</code> will not use the default argument:</p>\n<pre><code class=\"language-js\">divide(14, null);\n</code></pre>\n<h2>Destructuring assignments</h2>\n<h3>For arrays</h3>\n<p>In ES5, extracting and assigning multiple elements from an array looked like this:</p>\n<pre><code class=\"language-js\">ar fruits = [ 'apples', 'bananas', 'oranges' ];\nvar fruit1 = fruits[0];\nvar fruit2 = fruits[1];\n</code></pre>\n<p>In ES6, we can use the destructuring syntax to accomplish the same task like this:</p>\n<pre><code class=\"language-js\">const [veg1, veg2] = ['asparagus', 'broccoli', 'onion'];\nconsole.log(veg1);\nconsole.log(veg2);\n</code></pre>\n<p>The variables in the array on the left are \"matched\" and assigned to the corresponding elements in the array on the right. Note that <code>'onion'</code> is ignored and has no variable bound to it.</p>\n<h3>For objects</h3>\n<p>We can do something similar for extracting object properties into variables:</p>\n<pre><code class=\"language-js\">const smoothie = {\n    fats: ['avocado', 'peanut butter', 'greek yogurt'],\n    liquids: ['almond milk'],\n    greens: ['spinach'],\n    fruits: ['blueberry', 'banana']\n};\n\nconst { liquids, fruits } = smoothie;\n\nconsole.log(liquids);\nconsole.log(fruits);\n</code></pre>\n<h3>Parameter context matching</h3>\n<p>We can use these same principles to bind arguments inside a function to properties of an object supplied as an argument:</p>\n<pre><code class=\"language-js\">const containsSpinach = ({ greens }) => {\n    if (greens.find((g) => g === 'spinach')) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\ncontainsSpinach(smoothie);\n</code></pre>\n<p>We do this often with functional React components:</p>\n<pre><code class=\"language-js\">const IngredientList = ({ ingredients, onClick }) => (\n    &#x3C;ul className=\"IngredientList\">\n        {ingredients.map((i) => (\n            &#x3C;li key={i.id} onClick={() => onClick(i.id)} className=\"item\">\n                {i.name}\n            &#x3C;/li>\n        ))}\n    &#x3C;/ul>\n);\n</code></pre>\n<p>Here, we use destructuring to extract the props into variables (<code>ingredients</code> and <code>onClick</code>) that we then use inside the component's function body.</p>"
                },
                {
                    "url": "/blog/python-resources/",
                    "relativePath": "blog/python-resources.md",
                    "relativeDir": "blog",
                    "base": "python-resources.md",
                    "name": "python-resources",
                    "frontmatter": {
                        "title": "Python Resources",
                        "date": "2021-06-03",
                        "image": "images/best-zebra.gif",
                        "seo": {
                            "title": "Python Practice",
                            "description": "Commodo ante vis placerat interdum massa massa primis",
                            "extra": [
                                { "name": "og:type", "value": "article", "keyName": "property" },
                                { "name": "og:title", "value": "Python Practice", "keyName": "property" },
                                { "name": "og:description", "value": "Commodo ante vis placerat interdum massa massa primis", "keyName": "property" },
                                { "name": "og:image", "value": "images/2.jpg", "keyName": "property", "relativeUrl": true },
                                { "name": "twitter:card", "value": "summary_large_image" },
                                { "name": "twitter:title", "value": "Python Practice" },
                                { "name": "twitter:description", "value": "Commodo ante vis placerat interdum massa massa primis" },
                                { "name": "twitter:image", "value": "images/2.jpg", "relativeUrl": true }
                            ]
                        },
                        "template": "post",
                        "thumb_image": "images/violet-pluto.png",
                        "thumb_image_alt": "python logo"
                    },
                    "html": "<h1>Beginners Guide To Python<a href=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\"><strong>Basic Web Development Environment Setup</strong>\n<em>Windows Subsystem for Linux (WSL) and Ubuntu</em>levelup.gitconnected.com</a><img src=\"https://cdn-images-1.medium.com/max/600/1*59V2ZNbyJfsdGR2N20PM7w.png\"><img src=\"https://cdn-images-1.medium.com/max/800/0*oVIDxWdgJXoIt7CI.jpg\"><a href=\"https://trinket.io/python3/2b693977e7\"><strong>Put Python Anywhere on the Web</strong>\n<em>Python in the browser. No installation required.</em>trinket.io</a>\n\n</h1>\n<iframe src=\"https://py-prac-42.netlify.app/\" width=\"100%\" height=\"1200px\"><iframe>\n<p>My favorite language for maintainability is Python. It has simple, clean syntax, object encapsulation, good library support, and optional named parameters.</p>\n<ul>\n<li>Bram Cohen</li>\n</ul>\n<p>Article on basic web development setup… it is geared towards web but VSCode is an incredibly versitile editor and this stack really could suit just about anyone working in the field of computer science.</p>\n<h3>The Repository &#x26; Live Site Behind This Article:</h3>\n<h3>About Python(Taken From Tutorial Page Of Docs):</h3>\n<p><a href=\"https://docs.python.org/3/tutorial/appetite.html\">Python enables programs to be written compactly and readably. Programs written in Python are typically much shorter than equivalent C, C++, or Java programs, for several reasons:</a></p>\n<ul>\n<li>the high-level data types allow you to express complex operations in a single statement;</li>\n<li>statement grouping is done by indentation instead of beginning and ending brackets;</li>\n<li>no variable or argument declarations are necessary.</li>\n</ul>\n<h3>Installing Python:</h3>\n<h3>Windows</h3>\n<p>To determine if your Windows computer already has Python 3:</p>\n<ol>\n<li>Open a command prompt by entering command prompt in the Windows 10 search box and selecting the Command Prompt App in the Best match section of the results.</li>\n<li>Enter the following command and then select the Enter key:</li>\n<li>ConsoleCopy</li>\n</ol>\n<p>python --version</p>\n<ol>\n<li>Running python --version may not return a value, or may return an error message stating <em>'python' is not recognized as an internal or external command, operable program or batch file.</em> This indicates Python is not installed on your Windows system.</li>\n<li>If you see the word Python with a set of numbers separated by . characters, some version of Python is installed.</li>\n</ol>\n<h4>i.e.</h4>\n<blockquote>\n<p>Python 3.8.0</p>\n</blockquote>\n<p><strong>As long as the first number is 3</strong>, you have Python 3 installed.</p>\n<blockquote>\n<p>Download Page:</p>\n<p><a href=\"https://www.python.org/downloads/release/python-395/\">https://www.python.org/downloads/release/python-395/</a></p>\n</blockquote>\n<blockquote>\n<p>Download Link:</p>\n<p><a href=\"https://www.python.org/ftp/python/3.9.5/python-3.9.5-amd64.exe\">https://www.python.org/ftp/python/3.9.5/python-3.9.5-amd64.exe</a></p>\n</blockquote>\n<h3>Install Jupyter Notebooks:</h3>\n<h3>pip</h3>\n<p>If you use pip, you can install it with:</p>\n<p>If installing using pip install --user, you must add the user-level bin directory to your PATH environment variable in order to launch jupyter lab. If you are using a Unix derivative (FreeBSD, GNU / Linux, OS X), you can achieve this by using export PATH=\"$HOME/.local/bin:$PATH\" command.</p>\n<h3>pipenv</h3>\n<p>If you use pipenv, you can install it as:</p>\n<p>or from a git checkout:</p>\n<p>When using pipenv, in order to launch jupyter lab, you must activate the project’s virtualenv. For example, in the directory where pipenv’s Pipfile and Pipfile.lock live (i.e., where you ran the above commands):</p>\n<p>Alternatively, you can run jupyter lab inside the virtualenv with</p>\n<p><a href=\"https://nbviewer.jupyter.org/github/bgoonz/Jupyter-Notebooks/tree/master/\">Jupyter Notebook Viewer</a></p>\n<h3>Python Syntax</h3>\n<p>Python syntax was made for readability, and easy editing. For example, the python language uses a : and indented code, while javascript and others generally use {} and indented code.</p>\n<h3>First Program</h3>\n<p>Lets create a <a href=\"https://repl.it/languages/python3\">python 3</a> repl, and call it <em>Hello World</em>. Now you have a blank file called <em>main.py</em>. Now let us write our first line of code:</p>\n<blockquote>\n<p><em>Brian Kernighan actually wrote the first “Hello, World!” program as part of the documentation for the BCPL programming language developed by Martin Richards.</em></p>\n</blockquote>\n<p>Now, press the run button, which obviously runs the code. If you are not using replit, this will not work. You should research how to run a file with your text editor.</p>\n<h3>Command Line</h3>\n<p>If you look to your left at the console where hello world was just printed, you can see a >, >>>, or $ depending on what you are using. After the prompt, try typing a line of code.</p>\n<p>The command line allows you to execute single lines of code at a time. It is often used when trying out a new function or method in the language.</p>\n<h3>New: Comments!</h3>\n<p>Another cool thing that you can generally do with all languages, are comments. In python, a comment starts with a #. The computer ignores all text starting after the #.</p>\n<p># Write some comments!</p>\n<p>If you have a huge comment, do <strong>not</strong> comment all the 350 lines, just put ''' before it, and ''' at the end. Technically, this is not a comment but a string, but the computer still ignores it, so we will use it.</p>\n<h3>New: Variables!</h3>\n<p>Unlike many other languages, there is no var, let, or const to declare a variable in python. You simply go name = 'value'.</p>\n<p>Remember, there is a difference between integers and strings. <em>Remember: String = \"\".</em> To convert between these two, you can put an int in a str() function, and a string in a int() function. There is also a less used one, called a float. Mainly, these are integers with decimals. Change them using the float() command.</p>\n<p><a href=\"https://repl.it/@bgoonz/second-scr?lite=true&#x26;referrer=https%3A%2F%2Fbryanguner.medium.com\">https://repl.it/@bgoonz/second-scr?lite=true&#x26;referrer=https%3A%2F%2Fbryanguner.medium.com</a></p>\n<p>Instead of using the , in the print function, you can put a + to combine the variables and string.</p>\n<h3>Operators</h3>\n<p>There are many operators in python:</p>\n<ul>\n<li>+</li>\n<li>-</li>\n<li>/</li>\n<li>*\nThese operators are the same in most languages, and allow for addition, subtraction, division, and multiplicaiton.\nNow, we can look at a few more complicated ones:</li>\n</ul>\n<p><em>simpleops.py</em></p>\n<p>You should already know everything shown above, as it is similar to other languages. If you continue down, you will see more complicated ones.</p>\n<p><em>complexop.py</em></p>\n<p>The ones above are to edit the current value of the variable.\nSorry to JS users, as there is no i++; or anything.</p>\n<h3><em>Fun Fact:\nThe python language was named after Monty Python.</em></h3>\n<p>If you really want to know about the others, view <a href=\"https://www.tutorialspoint.com/python/python_basic_operators.htm\">Py Operators</a></p>\n<h3>More Things With Strings</h3>\n<p>Like the title?\nAnyways, a ' and a \" both indicate a string, but <strong>do not combine them!</strong></p>\n<p><em>quotes.py</em></p>\n<p><em>slicing.py</em></p>\n<h3>String Slicing</h3>\n<p>You can look at only certain parts of the string by slicing it, using [num:num].\nThe first number stands for how far in you go from the front, and the second stands for how far in you go from the back.</p>\n<h3>Methods and Functions</h3>\n<p>Here is a list of functions/methods we will go over:</p>\n<ul>\n<li>.strip()</li>\n<li>len()</li>\n<li>.lower()</li>\n<li>.upper()</li>\n<li>.replace()</li>\n<li>.split()</li>\n</ul>\n<h3>New: Input()</h3>\n<p>Input is a function that gathers input entered from the user in the command line. It takes one optional parameter, which is the users prompt.</p>\n<p><em>inp.py</em></p>\n<p>If you wanted to make it smaller, and look neater to the user, you could do…</p>\n<p><em>inp2.py</em></p>\n<p>Running:\n<em>inp.py</em></p>\n<p><em>inp2.py</em></p>\n<h3>New: Importing Modules</h3>\n<p>Python has created a lot of functions that are located in other .py files. You need to import these <strong>modules</strong> to gain access to the,, You may wonder why python did this. The purpose of separate modules is to make python faster. Instead of storing millions and millions of functions, , it only needs a few basic ones. To import a module, you must write input &#x3C;modulename>. Do not add the .py extension to the file name. In this example , we will be using a python created module named random.</p>\n<p><em>module.py</em></p>\n<p>Now, I have access to all functions in the random.py file. To access a specific function in the module, you would do &#x3C;module>.&#x3C;function>. For example:</p>\n<p><em>module2.py</em></p>\n<blockquote>\n<p>*Pro Tip:\nDo from random import randint to not have to do random.randint(), just randint()\nTo import all functions from a module, you could do from random import **</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<h3>New: Loops!</h3>\n<p>Loops allow you to repeat code over and over again. This is useful if you want to print Hi with a delay of one second 100 times.</p>\n<h4>for Loop</h4>\n<p>The for loop goes through a list of variables, making a seperate variable equal one of the list every time.\nLet’s say we wanted to create the example above.</p>\n<p><em>loop.py</em></p>\n<p>This will print Hello with a .3 second delay 100 times. This is just one way to use it, but it is usually used like this:</p>\n<p><em>loop2.py</em></p>\n<p><a href=\"https://storage.googleapis.com/replit/images/1539649280875_37d22e6d49e8e8fbc453631def345387.pn\">https://storage.googleapis.com/replit/images/1539649280875_37d22e6d49e8e8fbc453631def345387.pn</a></p>\n<h4>while Loop</h4>\n<p>The while loop runs the code while something stays true. You would put while &#x3C;expression>. Every time the loop runs, it evaluates if the expression is True. It it is, it runs the code, if not it continues outside of the loop. For example:</p>\n<p><em>while.py</em></p>\n<p>Or you could do:</p>\n<p><em>while2.py</em></p>\n<h3>New: if Statement</h3>\n<p>The if statement allows you to check if something is True. If so, it runs the code, if not, it continues on. It is kind of like a while loop, but it executes <strong>only once</strong>. An if statement is written:</p>\n<p><em>if.py</em></p>\n<p>Now, you may think that it would be better if you could make it print only one message. Not as many that are True. You can do that with an elif statement:</p>\n<p><em>elif.py</em></p>\n<p>Now, you may wonder how to run code if none work. Well, there is a simple statement called else:</p>\n<p><em>else.py</em></p>\n<h3>New: Functions (def)</h3>\n<p>So far, you have only seen how to use functions other people have made. Let use the example that you want to print the a random number between 1 and 9, and print different text every time.\nIt is quite tiring to type:</p>\n<p>Characters: 389</p>\n<p><em>nofunc.py</em></p>\n<p>Now with functions, you can seriously lower the amount of characters:</p>\n<p>Characters: 254</p>\n<p><em>functions.py</em></p>\n<h3>Project Based Learning:</h3>\n<p>The following is a modified version of a tutorial posted By: <a href=\"https://replit.com/@InvisibleOne\">InvisibleOne </a></p>\n<p>I would cite the original tutorial it’s self but at the time of this writing I can no longer find it on his repl.it profile and so the only reference I have are my own notes from following the tutorial when I first found it.</p>\n<h3>1. Adventure Story</h3>\n<p>The first thing you need with an adventure story is a great storyline, something that is exciting and fun. The idea is, that at each pivotal point in the story, you give the player the opportunity to make a choice.\nFirst things first, let’s import the stuff that we need, like this:</p>\n<p>Now, we need some variables to hold some of the player data.</p>\n<p>Ok, now we have the player’s name and nickname, let’s welcome them to the game</p>\n<p>Now for the story. The most important part of all stories is the introduction, so let’s print our introduction</p>\n<p>Now, we’ll give the player their first choice</p>\n<p>There you have it, a pretty simple choose your own ending story. You can make it as complex or uncomplex as you like.</p>\n<h3>2. TEXT ENCODER</h3>\n<p>Ever make secret messages as a kid? I used to. Anyways, here’s the way you can make a program to encode messages! It’s pretty simple. First things first, let’s get the message the user wants to encode, we’ll use input() for that:</p>\n<p>Now we need to split that string into a list of characters, this part is a bit more complicated.</p>\n<p>Now we need to convert the characters into code, well do this with a for loop:</p>\n<p>Once we’ve encoded the text, we’ll print it back for the user</p>\n<p>And if you want to decode something, it is this same process but in reverse!</p>\n<h3>3. Guess my Number</h3>\n<p>Number guessing games are fun and pretty simple, all you need are a few loops. To start, we need to import random.</p>\n<p>That is pretty simple. Now we’ll make a list with the numbers were want available for the game</p>\n<p>Next, we get a random number from the list</p>\n<p>Now, we need to ask the user for input, we’ll to this with a while loop</p>\n<p>Have fun with this!</p>\n<h3>4. Notes</h3>\n<p>Here is a more advanced project, but still pretty easy. This will be using a txt file to save some notes. The first thing we need to do is to create a txt file in your repl, name it ‘notes.txt’\nNow, to open a file in python we use open(‘filename’, type) The type can be ‘r’ for read, or ‘w’ for write. There is another option, but we won’t be using that here. Now, the first thing we are going to do is get what the user would like to save:</p>\n<p>Now we’ll open our file and save that text</p>\n<p>There we go, now the information is in the file. Next, we’ll retrieve it</p>\n<p>There we go, that’s how you can open files and close files with python</p>\n<h3>5. Random Dare Generator</h3>\n<p>Who doesn’t love a good dare? Here is a program that can generate random dares. The first thing we’ll need to do is as always, import random. Then we’ll make some lists of dares</p>"
                },
                {
                    "url": "/docs/navigation/",
                    "relativePath": "docs/navigation.md",
                    "relativeDir": "docs",
                    "base": "navigation.md",
                    "name": "navigation",
                    "frontmatter": {
                        "title": "Navigation",
                        "seo": {
                            "title": "Web Dev Hub",
                            "description": "Docs Home",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Web Dev Hub", "keyName": "property" },
                                { "name": "og:description", "value": "Docs Home", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "Web Dev Hub" },
                                { "name": "twitter:description", "value": "Docs Home" }
                            ]
                        },
                        "template": "docs",
                        "weight": 900,
                        "excerpt": "docs quick reference"
                    },
                    "html": "<hr>\n<h1>Navigation</h1>\n<ul>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/repos/%22\">/repos/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/gallery/%22\">/gallery/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/showcase/%22\">/showcase/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/blog/%22\">/blog/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/webdevhub/%22\">/webdevhub/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/jupyter-notebooks/%22\">/docs/jupyter-notebooks/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/%22\">/docs/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/portfolio-web/%22\">/docs/portfolio-web/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/python/%22\">/docs/python/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/About/%22\">/docs/About/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/About/resume/%22\">/docs/About/resume/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/about/%22\">/docs/about/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/faq/%22\">/docs/faq/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/links/Social/%22\">/docs/links/Social/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/links/my-websites/%22\">/docs/links/my-websites/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/links/%22\">/docs/links/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/quick-reference/%22\">/docs/quick-reference/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/quick-reference/Emmet/%22\">/docs/quick-reference/Emmet/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/quick-reference/installation/%22\">/docs/quick-reference/installation/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/react/createReactApp/%22\">/docs/react/createReactApp/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/quick-reference/new-repo-instructions/%22\">/docs/quick-reference/new-repo-instructions/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/%22\">/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/blog/python/%22\">/blog/python/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/blog/community/%22\">/blog/community/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/resources/%22\">/docs/resources/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/react/react2/%22\">/docs/react/react2/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/tools/%22\">/docs/tools/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/style-guide/%22\">/style-guide/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/blog/my-medium/%22\">/blog/my-medium/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/tools/plug-ins/%22\">/docs/tools/plug-ins/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/tools/default-readme/%22\">/docs/tools/default-readme/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/tools/notes-template/%22\">/docs/tools/notes-template/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/review/%22\">/review/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/articles/basic-web-dev/%22\">/docs/articles/basic-web-dev/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/About/introduction2bg/%22\">/docs/About/introduction2bg/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/react/%22\">/docs/react/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/blog/data-structures/%22\">/blog/data-structures/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/About/me/%22\">/docs/About/me/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/tools/Git-Html-Preview/%22\">/docs/tools/Git-Html-Preview/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/ds-algo-overview/%22\">/ds-algo-overview/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/articles/algo/%22\">/docs/articles/algo/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/faq/contact/%22\">/docs/faq/contact/</a></li>\n<li><a href=\"%22https://bgoonz-blog.netlify.app/docs/nav/%22\">/docs/nav/</a></li>\n</ul>"
                },
                {
                    "url": "/docs/about/me/",
                    "relativePath": "docs/about/me.md",
                    "relativeDir": "docs/about",
                    "base": "me.md",
                    "name": "me",
                    "frontmatter": {
                        "title": "About Me",
                        "weight": 2,
                        "seo": {
                            "title": "About Me",
                            "description": "This is the About Me page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "About Me", "keyName": "property" },
                                { "name": "og:description", "value": "This is the About Me page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "About Me" },
                                { "name": "twitter:description", "value": "This is the About Me page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<h1>Portfolio</h1>\n<iframe src=\"https://onedrive.live.com/embed?resid=D21009FDD967A241%21459307&amp;authkey=%21ABwIG4Hz-hsgPLU&amp;em=2&amp;wdAr=1.7777777777777777&amp;wdEaa=1\" width=\"800px\" height=\"691px\" frameborder=\"0\">This is an embedded <a target=\"_blank\" href=\"https://office.com\">Microsoft Office</a> presentation, powered by <a target=\"_blank\" href=\"https://office.com/webapps\">Office</a>.</iframe>"
                },
                {
                    "url": "/blog/my-medium/",
                    "relativePath": "blog/my-medium.md",
                    "relativeDir": "blog",
                    "base": "my-medium.md",
                    "name": "my-medium",
                    "frontmatter": {
                        "title": "Medium Articles",
                        "excerpt": "A list of my medium articles!",
                        "date": "2021-05-23",
                        "image": "images/medium.png",
                        "seo": {
                            "title": "Medium Articles",
                            "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit",
                            "extra": [
                                { "name": "og:type", "value": "article", "keyName": "property" },
                                { "name": "og:title", "value": "Medium Articles", "keyName": "property" },
                                { "name": "og:description", "value": "Lorem ipsum dolor sit amet, consectetur adipiscing elit", "keyName": "property" },
                                { "name": "og:image", "value": "images/medium.png", "keyName": "property", "relativeUrl": true },
                                { "name": "twitter:card", "value": "summary_large_image" },
                                { "name": "twitter:title", "value": "Medium Articles" },
                                { "name": "twitter:description", "value": "Lorem ipsum dolor sit amet, consectetur adipiscing elit" },
                                { "name": "twitter:image", "value": "images/medium.png", "relativeUrl": true }
                            ]
                        },
                        "template": "post",
                        "thumb_image": "images/enthusiastic-tiger.png"
                    },
                    "html": "<h1>A list of all of my articles to link to future posts</h1>\n<p>You should probably skip this one… seriously it’s just for internal use!</p>\n<hr>\n<h3>A list of all of my articles to link to future posts</h3>\n<p>You should probably skip this one… seriously it’s just for internal use!</p>\n<p><a href=\"https://bryanguner.medium.com/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/\"><strong>Bryan Guner - Medium</strong><br />\n<em>A plethora of front-end code playgrounds have appeared over the years. They offer a convenient way to experiment with…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31\"><strong>Postgresql Cheat Sheet</strong><br />\n<em>PostgreSQL commands</em>medium.com</a><a href=\"https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\"><strong>Everything You Need to Get Started With VSCode + Extensions &#x26; Resources</strong><br />\n<em>Commands:</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc\"><strong>Super Simple Intro To HTML</strong><br />\n<em>What is HTML, CSS &#x26; JS and why do we need all three?</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107\"><strong>Understanding Git (A Beginners Guide Containing Cheat Sheets &#x26; Resources)</strong><br />\n<em>Basic Git Work Flow.</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/git-tricks-57e8d0292285\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/git-tricks-57e8d0292285\"><strong>Git-Tricks</strong><br />\n<em>Refs</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/git-tricks-57e8d0292285\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\"><strong>A Quick Guide to Big-O Notation, Memoization, Tabulation, and Sorting Algorithms by Example</strong><br />\n<em>Curating Complexity: A Guide to Big-O Notation</em>medium.com</a><a href=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\"><strong>Python Study Guide for a JavaScript Programmer</strong><br />\n<em>A guide to commands in Python from what you know in JavaScript</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/lists-stacks-and-queues-in-javascript-88466fae0fbb\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/lists-stacks-and-queues-in-javascript-88466fae0fbb\"><strong>Lists Stacks and Queue’s In JavaScript</strong><br />\n<em>A simple to follow guide to these fundamental data structures with animated gifs, diagrams, and code examples!</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/lists-stacks-and-queues-in-javascript-88466fae0fbb\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\"><strong>Web Development Resources Part 3</strong><br />\n<em>I’m the psychological equivalent of a physical hoarder only instead of empty soda cans and dead racoons it’s lists of…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\"><strong>My ‘awesome’ list of JavaScript resources</strong><br />\n<em>Everyone’s seen the ‘Awesome’ lists on GitHub… and they are indeed awesome… so today I am going to attempt to curate my…</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\"><strong>Web Developer Resource List Part 2</strong><br />\n<em>Because I compile these things compulsively anyway…</em>medium.com</a><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/web-development-interview-part-3-826ae81a9107\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/web-development-interview-part-3-826ae81a9107\"><strong>Web Development Interview Part 3💻</strong><br />\n<em>This installment is going to be the least technically demanding thus far however these questions are a more realistic…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/web-development-interview-part-3-826ae81a9107\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/star-gazers/the-web-developers-technical-interview-e347d7db3822\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/star-gazers/the-web-developers-technical-interview-e347d7db3822\"><strong>The Web Developer’s Technical Interview</strong><br />\n<em>Questions…. Answers… and links to the missing pieces.</em>medium.com</a><a href=\"https://medium.com/star-gazers/the-web-developers-technical-interview-e347d7db3822\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\"><strong>Front End Interview Questions Part 2</strong><br />\n<em>These will focus more on vocabulary and concepts than the application driven approach in my last post!</em>medium.com</a><a href=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6\"><strong>Running List Of Interesting Articles, Tools and Ideas… as I Explore Them</strong><br />\n<em>Translation if you read this today (3/21/2021) it will be exceedingly short… because it’s just gonna accumulate entries…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\"><strong>The Best Cloud-Based Code Playgrounds of 2021 (Part 1)</strong><br />\n<em>A plethora of front-end code playgrounds have appeared over the years. They offer a convenient way to experiment with…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4\"><strong>Fundamental Data Structures In JavaScript</strong><br />\n<em>Data structures in JavaScript</em>medium.com</a><a href=\"https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\"><strong>HTTP Basics</strong><br />\n<em>“If you want to build a ship, don’t drum up the men and women to gather wood, divide the work, and give orders…</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\"><strong>JavaScript Frameworks &#x26; Libraries</strong><br />\n<em>My Awesome JavaScript List Part 2</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://github.com/bgoonz/Cumulative-Resource-List/tree/master/README-s\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz/Cumulative-Resource-List/tree/master/README-s\"><strong>bgoonz/Cumulative-Resource-List</strong><br />\n<em>List of useful cheatsheets Inspired by @sindresorhus awesome and improved by these amazing contributors . If you see a…</em>github.com</a><a href=\"https://github.com/bgoonz/Cumulative-Resource-List/tree/master/README-s\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\"><strong>My Favorite VSCode <em>Themes</em></strong><br />\nThemeslevelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\"><strong>JavaScript Rotate (Array) ProblemWalkthrough</strong><br />\n<em>Explanation for Rotate Right</em>medium.com</a><a href=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98\"><strong>Everything You Need To Know About Relational Databases, SQL, PostgreSQL and Sequelize To Build…</strong><br />\n<em>For Front end developers who like myself struggle with making the jump to fullstack.</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db\"><strong>The Complete JavaScript Reference Guide</strong><br />\n<em>You will want to bookmark this</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/geekculture/modules-in-javascript-a55333e35978\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/geekculture/modules-in-javascript-a55333e35978\"><strong>Modules in Javascript</strong><br />\n<em>Differences between Node.js and browsers</em>medium.com</a><a href=\"https://medium.com/geekculture/modules-in-javascript-a55333e35978\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3\"><strong>An Introduction to Markdown (Bonus Markdown Templates Included)</strong><br />\n<em>Basic Syntax Guide</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d\"><strong>Web Dev Resources</strong><br />\n<em>Web Development</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/regular-expressions-4d8fb3eb146b\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/regular-expressions-4d8fb3eb146b\"><strong>Regular Expressions</strong><br />\n<em>description:</em>medium.com</a><a href=\"https://medium.com/codex/regular-expressions-4d8fb3eb146b\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab\"><strong>A Collection of my most useful Gist Entries</strong><br />\n<em>This list is in no particular order!</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/vscode-extension-readme-compilation-92c60342cc8a\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/vscode-extension-readme-compilation-92c60342cc8a\"><strong>VsCode Extension Readme Compilation</strong><br />\n<em>Markdown PDF</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/vscode-extension-readme-compilation-92c60342cc8a\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a\"><strong>Learn CSS So That Your Site Doesn’t Look Like Garbage</strong><br />\n<em>CSS Selectors</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089\"><strong>PostgreSQL Setup For Windows &#x26; WSL/Ubuntu</strong><br />\n<em>If you follow this guide to a tee… you will install PostgreSQL itself on your Windows installation. Then, you will…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37\"><strong>Emmet Cheat Sheet</strong><br />\n<em>EMMET</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca\"><strong>Express Quick Sheet</strong><br />\n<em>Settings</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986\"><strong>Deploy React App To Heroku Using Postgres &#x26; Express</strong><br />\n<em>Heroku is an web application that makes deploying applications easy for a beginner.</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\"><strong>Basic Web Development Environment Setup</strong><br />\n<em>Windows Subsystem for Linux (WSL) and Ubuntu</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4\"><strong><em>Fetch</em> Quick Sheet</strong><br />\nFetchbryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/1f6f88ebdf5b\">March 22, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on May 23, 2021.</p>"
                },
                {
                    "url": "/docs/about/resume/",
                    "relativePath": "docs/about/resume.md",
                    "relativeDir": "docs/about",
                    "base": "resume.md",
                    "name": "resume",
                    "frontmatter": {
                        "title": "Resume",
                        "weight": 1,
                        "seo": {
                            "title": "Resume",
                            "description": "This is the Resume page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Resume", "keyName": "property" },
                                { "name": "og:description", "value": "This is the Resume page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "Resume" },
                                { "name": "twitter:description", "value": "This is the Resume page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<h1>➤ Technical Skills­­­</h1>\n<table>\n<thead>\n<tr>\n<th><strong>Programming**</strong> Languages:**</th>\n<th>JavaScript ES-6, NodeJS, React, HTML5, CSS3, SCSS, Bash Shell, Excel, SQL, NoSQL, MATLAB, Python, C++</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Databases:</strong></td>\n<td>PostgreSQL, MongoDB</td>\n</tr>\n<tr>\n<td><strong>Cloud:</strong></td>\n<td>Docker, AWS, Google App Engine, Netlify, Digital Ocean, Heroku, Azure Cloud Services</td>\n</tr>\n<tr>\n<td><strong>OS:</strong></td>\n<td>Linux, Windows (WSL), IOS</td>\n</tr>\n<tr>\n<td><strong>Agile:</strong></td>\n<td>GitHub, BitBucket, Jira, Confluence</td>\n</tr>\n<tr>\n<td><strong>IDEs:</strong></td>\n<td>VSCode, Visual Studio, Atom, Code Blocks, Sublime Text 3, Brackets</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1>➤ Experience</h1>\n<table>\n<thead>\n<tr>\n<th><strong>Relational Concepts:</strong> Hallandale Beach, FL</th>\n<th>March 2020 - Present</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Front End Web Developer</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Responsible for front-end development for a custom real estate application which provides sophisticated and fully customizable filtering to allow investors and real estate professionals to narrow in on exact search targets.</li>\n<li>Designed mock-up screens, wireframes, and workflows for intuitive user experience.</li>\n<li>Migrated existing multi-page user experience into singular page interfaces using React components.</li>\n<li>Participated in every stage of the design from conception through development and iterative improvement.</li>\n<li>Produced user stories and internal documentation for future site development and maintenance.</li>\n<li>Implemented modern frameworks including Bootstrap and Font-Awesome to give the site an aesthetic overhaul.</li>\n<li>Managed all test deployments using a combination of Digital Ocean and Netlify.</li>\n<li>Produced unit tests using a combination of Mocha and Chai.</li>\n<li>Injected Google Analytics to capture pertinent usage data to produce an insightful dashboard experience.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>Environment:</strong></th>\n<th><strong>JavaScript, JQuery, React, HTML5 &#x26; CSS, Bootstrap, DOJO, Google Cloud, Bash Script</strong></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><strong>Cembre:</strong> Edison, NJ</th>\n<th>Nov 2019 – Mar 2020</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Product Development Engineer</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Converted client's product needs into technical specs to be sent to the development team in Italy.</li>\n<li>Reorganized internal file server structure.</li>\n<li>Conducted remote / in person system integration and product demonstrations.</li>\n<li>Presided over internal and end user software trainings in addition to producing the corresponding documentation.</li>\n<li>Served as the primary point of contact for troubleshooting railroad hardware and software in the North America.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>Environment:</strong></th>\n<th><strong>Excel, AutoCAD, PowerPoint, Word</strong></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<hr>\n<h1>➤ Education</h1>\n<table>\n<thead>\n<tr>\n<th>**B.S. Electrical Engineering, TCNJ, ** Ewing NJ</th>\n<th>2014 – 2019</th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<p><strong>Capstone Project – Team Lead</strong></p>\n<ul>\n<li>Successfully completed and delivered a platform to digitize a guitar signal and perform filtering before executing frequency &#x26; time domain analysis to track a current performance against prerecorded performance.</li>\n<li>Implemented the Dynamic Time Warping algorithm in C++ and Python to autonomously activate or adjust guitar effect at multiple pre-designated section of performance.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>Environment:</strong></th>\n<th><strong>C++, Python, MATLAB, PureData</strong></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>"
                },
                {
                    "url": "/docs/about/",
                    "relativePath": "docs/about/index.md",
                    "relativeDir": "docs/about",
                    "base": "index.md",
                    "name": "index",
                    "frontmatter": {
                        "title": "About",
                        "excerpt": "Web-Dev-Hubis a Unibit theme created for project documentations. You can use it for your project.",
                        "seo": {
                            "title": "Portfolio",
                            "description": "This is the Portfolio page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Portfolio", "keyName": "property" },
                                { "name": "og:description", "value": "This is the Portfolio page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "Portfolio" },
                                { "name": "twitter:description", "value": "This is the Portfolio page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<h1 align=\"center\">Hi 👋, I'm Bryan</h1>\n<hr>\n<div align=\"center\">\n<h3><a href=\"https://bgoonz-blog.netlify.app/\">WEBSITE</a></h3>\n<h3><a href=\"https://bg-portfolio.netlify.app/\">Portfolio</a></h3>\n<h3><a href=\"https://webdevhub.jetbrains.space/oauth/auth/invite/419dd305ba717a392a02aa5b4e41e09c\">Collaborate</a></h3>\n<p><img src=\"https://views.whatilearened.today/views/github/bgoonz/views.svg\" alt=\"Profile views\"><a href=\"https://gitter.im/bgoonz/community?utm_source=badge&#x26;utm_medium=badge&#x26;utm_campaign=pr-badge\"><img src=\"https://badges.gitter.im/bgoonz/community.svg\" alt=\"Gitter\"></a></p>\n<p><img align=\"center\" src=\"https://github.com/bgoonz/bgoonz/blob/master/circle-small-sharp.png?raw=true?raw=true\" ></img></p>\n<p><a href=\"http://www.youtube.com/watch?v=xGZSWvFess8\" title=\"Ancestrial Solo\"><img src=\"http://img.youtube.com/vi/xGZSWvFess8/0.jpg\"></a></p>\n<p><a href=\"https://github.com/bgoonz/spotify-github-profile\"><img src=\"https://spotify-github-profile-dfmkc6qfc-bgoonz.vercel.app/api/view?uid=12179749486&#x26;cover_image=true&#x26;theme=default\" alt=\"spotify-github-profile\"></a></p>\n<p>[[https://github.com/kittinan/spotify-github-profile][https://spotify-github-profile.vercel.app/api/view.svg?uid=12179749486&#x26;cover_image=true&#x26;theme=compact)]]</p>\n<p><a href=\"https://github.com/bgoonz/spotify-github-profile\"><img src=\"https://spotify-github-profile.vercel.app/api/view?uid=12179749486&#x26;cover_image=true&#x26;theme=default\" alt=\"spotify-github-profile\"></a></p>\n<hr>\n<h3 align=\"left\">Languages and Tools:</h3>\n<p align=\"left\"> <a href=\"https://www.arduino.cc/\" target=\"_blank\"> <img src=\"https://cdn.worldvectorlogo.com/logos/arduino-1.svg\" alt=\"arduino\" width=\"40\" height=\"40\"/> </a> <a href=\"https://aws.amazon.com\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/amazonwebservices/amazonwebservices-original-wordmark.svg\" alt=\"aws\" width=\"40\" height=\"40\"/> </a> <a href=\"https://azure.microsoft.com/en-in/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/microsoft_azure/microsoft_azure-icon.svg\" alt=\"azure\" width=\"40\" height=\"40\"/> </a> <a href=\"https://babeljs.io/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/babeljs/babeljs-icon.svg\" alt=\"babel\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.gnu.org/software/bash/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/gnu_bash/gnu_bash-icon.svg\" alt=\"bash\" width=\"40\" height=\"40\"/> </a> <a href=\"https://getbootstrap.com\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/bootstrap/bootstrap-plain-wordmark.svg\" alt=\"bootstrap\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.w3schools.com/cpp/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/cplusplus/cplusplus-original.svg\" alt=\"cplusplus\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.w3schools.com/css/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/css3/css3-original-wordmark.svg\" alt=\"css3\" width=\"40\" height=\"40\"/> </a> <a href=\"https://d3js.org/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/d3js/d3js-original.svg\" alt=\"d3js\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.docker.com/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/docker/docker-original-wordmark.svg\" alt=\"docker\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.elastic.co\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/elastic/elastic-icon.svg\" alt=\"elasticsearch\" width=\"40\" height=\"40\"/> </a> <a href=\"https://emberjs.com/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/ember/ember-original-wordmark.svg\" alt=\"ember\" width=\"40\" height=\"40\"/> </a> <a href=\"https://expressjs.com\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/express/express-original-wordmark.svg\" alt=\"express\" width=\"40\" height=\"40\"/> </a> <a href=\"https://firebase.google.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/firebase/firebase-icon.svg\" alt=\"firebase\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.gatsbyjs.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/gatsbyjs/gatsbyjs-icon.svg\" alt=\"gatsby\" width=\"40\" height=\"40\"/> </a> <a href=\"https://cloud.google.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/google_cloud/google_cloud-icon.svg\" alt=\"gcp\" width=\"40\" height=\"40\"/> </a> <a href=\"https://git-scm.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/git-scm/git-scm-icon.svg\" alt=\"git\" width=\"40\" height=\"40\"/> </a> <a href=\"https://heroku.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/heroku/heroku-icon.svg\" alt=\"heroku\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.w3.org/html/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/html5/html5-original-wordmark.svg\" alt=\"html5\" width=\"40\" height=\"40\"/> </a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg\" alt=\"javascript\" width=\"40\" height=\"40\"/> </a> <a href=\"https://jekyllrb.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/jekyllrb/jekyllrb-icon.svg\" alt=\"jekyll\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.linux.org/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/linux/linux-original.svg\" alt=\"linux\" width=\"40\" height=\"40\"/> </a> <a href=\"https://mochajs.org\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/mochajs/mochajs-icon.svg\" alt=\"mocha\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.mongodb.com/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/mongodb/mongodb-original-wordmark.svg\" alt=\"mongodb\" width=\"40\" height=\"40\"/> </a> <a href=\"https://nextjs.org/\" target=\"_blank\"> <img src=\"https://cdn.worldvectorlogo.com/logos/nextjs-3.svg\" alt=\"nextjs\" width=\"40\" height=\"40\"/> </a> <a href=\"https://nodejs.org\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/nodejs/nodejs-original-wordmark.svg\" alt=\"nodejs\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.photoshop.com/en\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/photoshop/photoshop-line.svg\" alt=\"photoshop\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.postgresql.org\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/postgresql/postgresql-original-wordmark.svg\" alt=\"postgresql\" width=\"40\" height=\"40\"/> </a> <a href=\"https://postman.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/getpostman/getpostman-icon.svg\" alt=\"postman\" width=\"40\" height=\"40\"/> </a> <a href=\"https://pugjs.org\" target=\"_blank\"> <img src=\"https://cdn.worldvectorlogo.com/logos/pug.svg\" alt=\"pug\" width=\"40\" height=\"40\"/> </a> <a href=\"https://github.com/puppeteer/puppeteer\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/pptrdev/pptrdev-official.svg\" alt=\"puppeteer\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.python.org\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/python/python-original.svg\" alt=\"python\" width=\"40\" height=\"40\"/> </a> <a href=\"https://reactjs.org/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/react/react-original-wordmark.svg\" alt=\"react\" width=\"40\" height=\"40\"/> </a> <a href=\"https://reactnative.dev/\" target=\"_blank\"> <img src=\"https://reactnative.dev/img/header_logo.svg\" alt=\"reactnative\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.typescriptlang.org/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/typescript/typescript-original.svg\" alt=\"typescript\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.vagrantup.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/vagrantup/vagrantup-icon.svg\" alt=\"vagrant\" width=\"40\" height=\"40\"/> </a> <a href=\"https://webpack.js.org\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/d00d0969292a6569d45b06d3f350f463a0107b0d/icons/webpack/webpack-original-wordmark.svg\" alt=\"webpack\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.adobe.com/products/xd.html\" target=\"_blank\"> <img src=\"https://cdn.worldvectorlogo.com/logos/adobe-xd.svg\" alt=\"xd\" width=\"40\" height=\"40\"/> </a> <a href=\"https://zapier.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/zapier/zapier-icon.svg\" alt=\"zapier\" width=\"40\" height=\"40\"/> </a> </p>\n<hr>\n</div>\n<hr>\n<div  align=\"center\" style=\" border: 1px solid black\">\n</div>\n<hr>\n<div align=\"center\">\n<p><a href=\"https://bgoonz.github.io\"><img src=\"https://img.shields.io/badge/-%E2%9D%A4_Portfolio-f58?style=flat-square&#x26;logo=a&#x26;logoColor=white&#x26;link=https://bgoonz.github.io/\" alt=\"Portfolio\"></a>\n<a href=\"https://github.com/bgoonz/resume-cv-portfolio-samples/blob/master/2021-resume/bryan-guner-resume-2021.pdf\" download><img src=\"https://img.shields.io/badge/-Resume-f00?style=flat-square&#x26;logo=adobe-acrobat-reader&#x26;logoColor=white\" alt=\"Resume PDF\"></a>\n<a href=\"mailto:bryan.guner@gmail.com\"><img src=\"https://img.shields.io/badge/bryan.guner@gmail.com-f4b400?style=flat-square&#x26;logo=gmail&#x26;logoColor=black&#x26;link=mailto:bryan.guner@gmail.com\" alt=\"Bryan&#x27;s email\"></a>\n<a href=\"https://web-dev-hub.com/\"><img src=\"https://img.shields.io/badge/-Blog-21759b?style=flat-square&#x26;logo=WordPress&#x26;logoColor=white&#x26;link=https://web-dev-hub.com/\" alt=\"Blog\"></a>\n<a href=\"https://www.linkedin.com/in/bryan-guner-046199128/\"><img src=\"https://img.shields.io/badge/-LinkedIn-0077b5?style=flat-square&#x26;logo=Linkedin&#x26;logoColor=white&#x26;link=https://www.linkedin.com/in/bryan-guner-046199128/\" alt=\"Linkedin\"></a>\n<a href=\"https://angel.co/u/bryan-guner\"><img src=\"https://img.shields.io/badge/-AngelList-black?style=flat-square&#x26;logo=AngelList&#x26;logoColor=white&#x26;link=https://angel.co/u/bryan-guner\" alt=\"AngelList\"></a>\n<a href=\"https://github.com/bgoonz\"><img src=\"https://img.shields.io/github/followers/bgoonz?label=follow&#x26;style=social\" alt=\"GitHub bgoonz\"></a></p>\n<h4>Refresh the page for a new joke!</h4>\n<img align=\"center\" src=\"https://readme-jokes.vercel.app/api\" stye=\"width:500; height:320;\">\n</div>    \n<div align=\"center\">\n<p><a href=\"#_email_\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p>&nbsp;<img align=\"center\" src=\"https://github-readme-stats.vercel.app/api?username=bgoonz&show_icons=true&locale=en\" alt=\"bgoonz\" /><img align=\"center\" src=\"https://github-readme-streak-stats.herokuapp.com/?user=bgoonz&\" alt=\"bgoonz\" /></p>\n  \n [![trophy](https://github-profile-trophy.vercel.app/?username=bgoonz&row=1)](https://github.com/bgoonz/github-profile-trophy) \n [![Top Langs](https://github-readme-stats.vercel.app/api/top-langs/?username=bgoonz&layout=compact&hide=html,mathematica&langs_count=16)](https://github.com/bgoonz/github-readme-stats)\n|  |  |\n|:----------------:||\n| **Languages**    | ![](https://img.shields.io/badge/Lang-HTML5-informational?style=flat&logo=HTML5&logoColor=white&color=00FF00) ![](https://img.shields.io/badge/Lang-CSS-informational?style=flat&logo=CSS%20Wizardry&logoColor=white&color=00FF00) ![](https://img.shields.io/badge/Lang-JavaScript-informational?style=flat&logo=JavaScript&logoColor=white&color=00FF00)  ![](https://img.shields.io/badge/Lang-SQL-informational?style=flat&logo=SQL&logoColor=white&color=00FF00) ![](https://img.shields.io/badge/Lang-Java-informational?style=flat&logo=Java&logoColor=white&color=00FF00) <br />![](https://img.shields.io/badge/Lang-Python-informational?style=flat&logo=Python&logoColor=white&color=00FF00)   ![](https://img.shields.io/badge/Lang-TypeScript-informational?style=flat&logo=TypeScript&logoColor=white&color=00FF00) |\n| **Libraries**    | ![](https://img.shields.io/badge/Lib-Bootstrap-informational?style=flat&logo=Bootstrap&logoColor=white&color=00FF00) ![](https://img.shields.io/badge/Lib-React-informational?style=flat&logo=React&logoColor=white&color=00FF00)  |\n| **Frameworks**   | ![](https://img.shields.io/badge/FW-Redux-informational?style=flat&logo=Redux&logoColor=white&color=00FF00) ![](https://img.shields.io/badge/FW-Node.js-informational?style=flat&logo=Node.js&logoColor=white&color=00FF00) ![](https://img.shields.io/badge/FW-Express-informational?style=flat&logoColor=white&color=00FF00)  ![](https://img.shields.io/badge/FW-PowerShell-informational?style=flat&logo=PowerShell&logoColor=white&color=00FF00) |\n| **Databases**    | ![](https://img.shields.io/badge/DB-PostgreSQL-informational?style=flat&logo=PostgreSQL&logoColor=white&color=00FF00) ![](https://img.shields.io/badge/DB-MySQL-informational?style=flat&logo=MySQL&logoColor=white&color=00FF00) |\n| **Testing**      | ![](https://img.shields.io/badge/Test-Jest-informational?style=flat&logo=Jest&logoColor=white&color=00FF00) ![](https://img.shields.io/badge/Test-Cypress-informational?style=flat&logo=Cypress&logoColor=white&color=00FF00) ![](https://img.shields.io/badge/Test-JUnit-informational?style=flat&logo=JUnit&logoColor=white&color=00FF00) |\n| **Other**        | ![](https://img.shields.io/badge/Editor-VS%20Code-informational?style=flat&logo=visualstudiocode&logoColor=white&color=00FF00) ![](https://img.shields.io/badge/Editor-IntelliJ%20IDEA-informational?style=flat&logo=intellijidea&logoColor=white&color=00FF00) <br />![](https://img.shields.io/badge/Tools-ESLint-informational?style=flat&logo=ESLint&logoColor=white&color=00FF00) ![](https://img.shields.io/badge/Tools-Postman-informational?style=flat&logo=Postman&logoColor=white&color=00FF00) ![](https://img.shields.io/badge/Tools-Git-informational?style=flat&logo=Git&logoColor=white&color=00FF00) ![](https://img.shields.io/badge/Tools-GitHub-informational?style=flat&logo=GitHub&logoColor=white&color=00FF00)  <br />![](https://img.shields.io/badge/OS-Windows%2010-informational?style=flat&logo=Windows&logoColor=white&color=00FF00) <br />![](https://img.shields.io/badge/Code-LESS-informational?style=flat&logoColor=white&color=00FF00) ![](https://img.shields.io/badge/Code-Emmet-informational?style=flat&logoColor=white&color=00FF00)\n <br />\n</div>\n<p><a href=\"#_email_\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <em>Email</em></h2>\n<h4><a href=\"#\">bryan.guner@gmail.com</a></h4>\n<p><a href=\"#_phone_\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <em>Phone</em></h2>\n<h4><a href=\"551-254-5505\">551-254-5505</a></h4>\n<hr>\n<h2>➤ Connect with me:</h2>\n<p align=\"center\">\n  <a href=\"mailto:bryan.guner@gmail.com\"><img src=\"https://img.icons8.com/color/96/000000/gmail.png\" alt=\"email\"/></a><a href=\"https://www.facebook.com/bryan.guner/\"><img src=\"https://img.icons8.com/color/96/000000/facebook.png\" alt=\"facebook\"/></a><a href=\"https://twitter.com/bgooonz\"><img src=\"https://img.icons8.com/color/96/000000/twitter-squared.png\" alt=\"twitter\"/></a><a href=\"https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA/videos\"><img src=\"https://img.icons8.com/color/96/000000/youtube.png\" alt=\"youtube\"/></a><a href=\"https://www.instagram.com/bgoonz/?hl=en\"><img src=\"https://img.icons8.com/color/96/000000/instagram-new.png\" alt=\"instagram\"/></a><a href=\"https://www.pinterest.com/bryanguner/_saved/\"><img src=\"https://img.icons8.com/color/96/000000/pinterest--v1.png\" alt=\"pinterest\"/></a><a href=\"https://www.linkedin.com/in/bryan-guner-046199128/\"><img src=\"https://img.icons8.com/color/96/000000/linkedin.png\" alt=\"linkedin\"/></a>\n  <a href=\"https://bryanguner.medium.com/\"><img src=\"https://img.icons8.com/color/96/000000/medium-logo.png\" alt=\"medium\"/></a><a href=\"https://open.spotify.com/user/bgoonz?si=ShH9wYbIQWab5Jz_30BKFw\"><img src=\"https://img.icons8.com/color/96/000000/spotify--v1.png\" alt=\"spotify\"/></a>\n  </p>\n<div align=\"center\">\n<table>\n<thead>\n<tr>\n<th><a href=\"https://github.com/bgoonz\">GitHub</a></th>\n<th><a href=\"https://gitlab.com/bryan.guner.dev\">Gitlab</a></th>\n<th><a href=\"https://bitbucket.org/bgoonz/\">Bitbucket</a></th>\n<th><a href=\"https://bryanguner.medium.com/\">Medium</a></th>\n<th><a href=\"https://codepen.io/bgoonz\">code pen</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://repl.it/@bgoonz/\">Replit</a></td>\n<td><a href=\"https://www.quora.com/q/webdevresourcehub?invite_code=qwZOqbpAhgQ6hjjGl8NN\">Quora</a></td>\n<td><a href=\"https://www.reddit.com/user/bgoonz1\">Redit</a></td>\n<td><a href=\"https://webcomponents.dev/user/bgoonz\">webcomponents.dev</a></td>\n<td><a href=\"https://dev.to/bgoonz\">dev.to</a></td>\n</tr>\n<tr>\n<td><a href=\"https://runkit.com/bgoonz\">runkit</a></td>\n<td><a href=\"https://observablehq.com/@bgoonz?tab=profile\">Observable Notebooks</a></td>\n<td><a href=\"https://www.npmjs.com/~bgoonz11\">npm</a></td>\n<td><a href=\"https://meta.stackexchange.com/users/936785/bryan-guner\">stack-exchange</a></td>\n<td><a href=\"https://observablehq.com/@bgoonz?tab=profile\">Observable Notebooks</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.upwork.com/freelancers/~01bb1a3627e1e9c630?viewMode=1&#x26;s=1110580755057594368\">Upwork</a></td>\n<td><a href=\"https://www.notion.so/Overview-Of-Css-5d88b0bc9a73422a9be1481d599a56ba\">Notion</a></td>\n<td><a href=\"https://angel.co/u/bryan-guner\">AngelList</a></td>\n<td><a href=\"https://stackshare.io/bryanguner\">StackShare</a></td>\n<td><a href=\"http://plnkr.co/account/plunks\">Plunk</a></td>\n</tr>\n<tr>\n<td><a href=\"https://giphy.com/channel/bryanguner\">giphy</a></td>\n<td><a href=\"https://ko-fi.com/bgoonz\">kofi</a></td>\n<td><a href=\"https://www.codewars.com/users/bgoonz\">Codewars</a></td>\n<td><a href=\"https://dribbble.com/bgoonz4242?onboarding=true\">Dribble</a></td>\n<td><a href=\"https://glitch.com/@bgoonz\">Glitch</a></td>\n</tr>\n<tr>\n<td><a href=\"https://app.contentful.com/spaces/lelpu0ihaz11/assets?id=MocOPmmNliLn6PPv\">contentful</a></td>\n<td><a href=\"https://app.netlify.com/user/settings#profile\">Netlify</a></td>\n<td><a href=\"https://stackblitz.com/@bgoonz\">Stackblitz</a></td>\n<td><a href=\"https://vercel.com/bgoonz\">Vercel</a></td>\n<td><a href=\"https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA/featured\">Youtube</a></td>\n</tr>\n<tr>\n<td><a href=\"https://web-dev-hub.com/\">wordpress</a></td>\n<td><a href=\"https://edabit.com/user/dsRcx6yCwAgYwZbRB\">Edabit</a></td>\n<td><a href=\"https://vimeo.com/user128661018\">Vinmeo</a></td>\n<td><a href=\"https://jsfiddle.net/user/bgoonz/\">js fiddle</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://developers.google.com/profile/u/100803355943326309646?utm_source=developers.google.com\">Google Developer Profile</a></td>\n<td><a href=\"https://gitee.com/bgoonz\">Gittee</a></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><a href=\"#blog\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<details>\n<summary>About Me</summary>\n<p><a href=\"#projects\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><img src=\"./skills.PNG\" alt=\"skills\"></p>\n<p><a href=\"#projects\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h5>➤ <a href=\"https://bgoonz-blog.netlify.app/\">Blog:</a></h5>\n<blockquote>\n<p>I write articles for:</p>\n</blockquote>\n<ul>\n<li>CodeX</li>\n<li>Analytics Vidhya</li>\n<li>Star Gazers</li>\n<li>JavaScript in Plain English</li>\n<li>Geek Culture</li>\n<li>Level Up Coding</li>\n<li>\n<a href=\"https://dev.to/bgoonz\">\n  <img src=\"https://d2fltix0v2e0sb.cloudfront.net/dev-badge.svg\" alt=\"Bryan C Guner's DEV Community Profile\" height=\"30px\" width=\"30px\">\n</a>\n</li>\n</ul>\n<a href=\"https://dev.to/bgoonz\">\n \n> Netlify Research Program Participant!\n<p><a href=\"https://github.com/sindresorhus/awesome\"><img src=\"https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg\" alt=\"Awesome\"></a> <a href=\"https://github.com/chetanraj/awesome-github-badges\"><img src=\"https://img.shields.io/badge/Made%20With-Love-orange.svg\" alt=\"Made With Love\"></a></p>\n<p><a href=\"https://forthebadge.com\"><img src=\"https://forthebadge.com/images/badges/certified-snoop-lion.svg\" alt=\"forthebadge\"></a><a href=\"https://forthebadge.com\"><img src=\"https://forthebadge.com/images/badges/60-percent-of-the-time-works-every-time.svg\" alt=\"forthebadge\"></a></p>\n<p><a href=\"https://bgoonz.github.io/\"><img src=\"https://img.shields.io/website-up-down-green-red/http/shields.io.svg\" alt=\"Website shields.io\"></a><a href=\"https://GitHub.com/bgoonz/ask-me-anything\"><img src=\"https://img.shields.io/badge/Ask%20me-anything-1abc9c.svg\" alt=\"Ask Me Anything !\"></a><a href=\"https://gitter.im/bgoonz/community?utm_source=badge&#x26;utm_medium=badge&#x26;utm_campaign=pr-badge\"><img src=\"https://badges.gitter.im/bgoonz/community.svg\" alt=\"Gitter\"></a><a href=\"https://pypi.python.org/pypi/ansicolortags/\"><img src=\"https://img.shields.io/pypi/l/ansicolortags.svg\" alt=\"PyPI license\"></a></p>\n<p><a href=\"https://GitHub.com/bgoonz/bgoonz/graphs/commit-activity\"><img src=\"https://img.shields.io/badge/Maintained%3F-yes-green.svg\" alt=\"Maintenance\"></a><a href=\"https://GitHub.com/bgoonz/bgoonz/\"><img src=\"https://ga-beacon.appspot.com/UA-38514290-17/github.com/Naereen/Naereen/README.md?pixel\" alt=\"Analytics\"></a><a href=\"https://github.com/ellerbrock/open-source-badges/\"><img src=\"https://badges.frapsoft.com/os/v1/open-source.png?v=103\" alt=\"Open Source Love\"></a> <a href=\"https://github.com/ellerbrock/open-source-badges/\"><img src=\"https://badges.frapsoft.com/bash/v1/bash.png?v=103\" alt=\"Bash Shell\"></a></p>\n<p><a href=\"https://github.com/bgoonz?tab=followers\"><img src=\"https://img.shields.io/github/followers/bgoonz.svg?style=social&#x26;label=Follow&#x26;maxAge=2592000\" alt=\"GitHub followers\"></a>\n<img src=\"https://img.shields.io/badge/-JavaScript-black?style=flat&#x26;logo=javascript\" alt=\"JavaScript\"></p>\n<p><img src=\"https://img.shields.io/badge/-React-black?style=flat&#x26;logo=react\" alt=\"React\"> <img src=\"https://img.shields.io/badge/-Redux-lightblue?style=flat&#x26;logo=redux\" alt=\"Redux\">\n<img src=\"https://img.shields.io/badge/-HTML5-E34F26?style=flat&#x26;logo=html5&#x26;logoColor=white\" alt=\"HTML5\"> <img src=\"https://img.shields.io/badge/-CSS3-1572B6?style=flat&#x26;logo=css3\" alt=\"CSS3\"> <img src=\"https://img.shields.io/badge/-Sass-black?style=flat&#x26;logo=sass\" alt=\"Sass\"></p>\n<p><img src=\"https://img.shields.io/badge/-Express-blue?style=flat&#x26;logo=express\" alt=\"Express\"> <img src=\"https://img.shields.io/badge/-Nodejs-green?style=flat&#x26;logo=Node.js\" alt=\"Nodejs\"><img src=\"https://img.shields.io/badge/-Python-lightyellow?style=flat&#x26;logo=python&#x26;logoColor=blue\" alt=\"Python\"> <img src=\"https://img.shields.io/badge/-Bootstrap-7952B3?style=flat&#x26;logo=bootstrap&#x26;logoColor=white\" alt=\"Bootstrap\">\n<img src=\"https://img.shields.io/badge/-Docker-black?style=flat&#x26;logo=docker\" alt=\"Docker\"> <img src=\"https://img.shields.io/badge/-MySQL-black?style=flat&#x26;logo=mysql\" alt=\"MySQL\"> <img src=\"https://img.shields.io/badge/-PostgreSQL-blue?style=flat&#x26;logo=postgresql\" alt=\"PostgresQL\"> <img src=\"https://img.shields.io/badge/-Git-black?style=flat&#x26;logo=git\" alt=\"Git\"> <img src=\"https://img.shields.io/badge/-Ruby-darkred?style=flat&#x26;logo=ruby\" alt=\"Ruby\"> <img src=\"https://img.shields.io/badge/-MaterialUI-0081CB?style=flat&#x26;logo=Material-UI&#x26;logoColor=white\" alt=\"Material-UI\"></p>\n<h3 align=\"center\">A passionate Web Developer, Electrical Engineer, Musician & Producer</h3>\n<ul>\n<li>🔭 Contract Web Development <strong>Relational Concepts</strong></li>\n<li>🌱 I'm currently learning <strong>React/Redux, Python, Java, Express, jQuery</strong></li>\n<li>👯 I'm looking to collaborate on <a href=\"https://goofy-euclid-1cd736.netlify.app/core-site/index.html\">Any web audio or open source educational tools.</a></li>\n<li>🤝 I'm looking for help with <a href=\"https://github.com/bgoonz/React-Practice\">Learning React</a></li>\n<li>👨‍💻 All of my projects are available at <a href=\"https://bgoonz.github.io/\">https://bgoonz.github.io/</a></li>\n<li>📝 I regularly write articles on <a href=\"https://bryanguner.medium.com/\">medium</a> &#x26;&#x26; <a href=\"https://web-dev-resource-hub.netlify.app/\">Web-Dev-Resource-Hub</a></li>\n<li>💬 Ask me about <strong>Anything:</strong></li>\n<li>📫 How to reach me <strong>bryan.guner@gmail.com</strong></li>\n<li>⚡ Fun fact <strong>I played Bamboozle Music Festival at the Meadowlands Stadium Complex when I was 14.</strong></li>\n</ul>\n<h3>i really like music :headphones:</h3>\n<h4>What's the most useful business-related book you've ever read?</h4>\n<blockquote>\n<p>A Random Walk Down Wall Street</p>\n</blockquote>\n<h4>What's your favorite non-business book?</h4>\n<blockquote>\n<p>Hitchhiker's Guide To The Galaxy</p>\n</blockquote>\n<h4>If money were not an issue, what would you be doing right now?</h4>\n<blockquote>\n<p>Designing recording software/hardware and using it</p>\n</blockquote>\n<h4>What words of advice would you give your younger self?</h4>\n<blockquote>\n<p>Try harder and listen to your parents more (the latter bit of advice would be almost certain to fall on deaf ears lol)</p>\n</blockquote>\n<h4>What's the most creative thing you've ever done?</h4>\n<blockquote>\n<p>I built a platform that listens to a guitarist's performance and automatically triggers guitar effects at the appropriate time in the song.</p>\n</blockquote>\n<h4>Which founders or startups do you most admire?</h4>\n<blockquote>\n<p>Is it to basic to say Tesla... I know they're prevalent now but I've been an avid fan since as early as 2012.</p>\n</blockquote>\n<h4>What's your super power?</h4>\n<blockquote>\n<p>Having really good ideas and forgetting them moments later.</p>\n</blockquote>\n<h4>What's the best way for people to get in touch with you?</h4>\n<blockquote>\n<p>A text</p>\n</blockquote>\n<h4>What aspects of your work are you most passionate about?</h4>\n<p>Creating things that change my every day life.</p>\n<h4>What was the most impactful class you took in school?</h4>\n<blockquote>\n<p>Modern Physics... almost changed my major after that class... but at the end of the day engineering was a much more fiscally secure avenue.</p>\n</blockquote>\n<h4>What's something you wish you had done years earlier?</h4>\n<blockquote>\n<p>Learned to code ... and sing</p>\n</blockquote>\n<h4>What words of wisdom do you live by?</h4>\n<blockquote>\n<p>*Disclaimer: The following wisdom is very cliche ... but... \"Be the change that you wish to see in the world.\"</p>\n</blockquote>\n<blockquote>\n<p>Mahatma Gandhi</p>\n</blockquote>\n</details>\n<details>\n <summary>🤖 <b>My Programming Stats</b>: </summary>\n<br>\n<p><a href=\"https://github.com/bgoonz/github-readme-stats\"><img src=\"https://github-readme-stats.vercel.app/api/wakatime?username=bgoonz\" alt=\"bgoonz&#x27;s wakatime stats\"></a></p>\n<p><img src=\"https://github.com/bgoonz/bgoonz/blob/master/langs.PNG\" alt=\"waka1\"></p>\n<p><img src=\"https://github.com/bgoonz/bgoonz/blob/master/waka.PNG\" alt=\"waka2\"></p>\n</details>\n<details>\n  \n<summary>See More</summary>\n<p><a href=\"https://wakatime.com/@bgoonz\">wakatime</a></p>\n<p><a href=\"https://resume.github.io/?bgoonz\">github-resume</a></p>\n</details>\n<!-- start work experience section -->\n<details>\n<summary> Resume </summary>\n<h1>➤ Technical Skills­­­</h1>\n<table>\n<thead>\n<tr>\n<th><strong>Programming**</strong> Languages:**</th>\n<th>JavaScript ES-6, NodeJS, React, HTML5, CSS3, SCSS, Bash Shell, Excel, SQL, NoSQL, MATLAB, Python, C++</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Databases:</strong></td>\n<td>PostgreSQL, MongoDB</td>\n</tr>\n<tr>\n<td><strong>Cloud:</strong></td>\n<td>Docker, AWS, Google App Engine, Netlify, Digital Ocean, Heroku, Azure Cloud Services</td>\n</tr>\n<tr>\n<td><strong>OS:</strong></td>\n<td>Linux, Windows (WSL), IOS</td>\n</tr>\n<tr>\n<td><strong>Agile:</strong></td>\n<td>GitHub, BitBucket, Jira, Confluence</td>\n</tr>\n<tr>\n<td><strong>IDEs:</strong></td>\n<td>VSCode, Visual Studio, Atom, Code Blocks, Sublime Text 3, Brackets</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><a href=\"#experience\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h1>➤ Experience</h1>\n<table>\n<thead>\n<tr>\n<th><strong>Relational Concepts:</strong> Hallandale Beach, FL</th>\n<th>March 2020 - Present</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Front End Web Developer</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Responsible for front-end development for a custom real estate application which provides sophisticated and fully customizable filtering to allow investors and real estate professionals to narrow in on exact search targets.</li>\n<li>Designed mock-up screens, wireframes, and workflows for intuitive user experience.</li>\n<li>Migrated existing multi-page user experience into singular page interfaces using React components.</li>\n<li>Participated in every stage of the design from conception through development and iterative improvement.</li>\n<li>Produced user stories and internal documentation for future site development and maintenance.</li>\n<li>Implemented modern frameworks including Bootstrap and Font-Awesome to give the site an aesthetic overhaul.</li>\n<li>Managed all test deployments using a combination of Digital Ocean and Netlify.</li>\n<li>Produced unit tests using a combination of Mocha and Chai.</li>\n<li>Injected Google Analytics to capture pertinent usage data to produce an insightful dashboard experience.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>Environment:</strong></th>\n<th><strong>JavaScript, JQuery, React, HTML5 &#x26; CSS, Bootstrap, DOJO, Google Cloud, Bash Script</strong></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><strong>Cembre:</strong> Edison, NJ</th>\n<th>Nov 2019 – Mar 2020</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Product Development Engineer</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Converted client's product needs into technical specs to be sent to the development team in Italy.</li>\n<li>Reorganized internal file server structure.</li>\n<li>Conducted remote / in person system integration and product demonstrations.</li>\n<li>Presided over internal and end user software trainings in addition to producing the corresponding documentation.</li>\n<li>Served as the primary point of contact for troubleshooting railroad hardware and software in the North America.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>Environment:</strong></th>\n<th><strong>Excel, AutoCAD, PowerPoint, Word</strong></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<hr>\n<p><a href=\"#education\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h1>➤ Education</h1>\n<table>\n<thead>\n<tr>\n<th>**B.S. Electrical Engineering, TCNJ, ** Ewing NJ</th>\n<th>2014 – 2019</th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<p><strong>Capstone Project – Team Lead</strong></p>\n<ul>\n<li>Successfully completed and delivered a platform to digitize a guitar signal and perform filtering before executing frequency &#x26; time domain analysis to track a current performance against prerecorded performance.</li>\n<li>Implemented the Dynamic Time Warping algorithm in C++ and Python to autonomously activate or adjust guitar effect at multiple pre-designated section of performance.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>Environment:</strong></th>\n<th><strong>C++, Python, MATLAB, PureData</strong></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n</details>\n<details>\n<summary> My Projects</summary>\n<table>\n  <thead>\n    <tr>\n      <th>Project Name</th>\n      <th>Skills used</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href='https://web-dev-resource-hub.netlify.app/'>Web-Dev-Resource-Hub (blog)</a></td>\n      <td>Html, Css, javascript, Python, jQuery,  React,  FireBase,  AWS S3,  Netlify,  Heroku,  NodeJS,  PostgreSQL,  C++,  Web Audio API</td>\n      <td>My blog site contains my resource sharing and blog site ... centered mostly on web development and just a bit of audio production / generally nerdy things I find interesting.</td>\n    </tr>\n       <tr>\n      <td><a href='https://project-showcase-bgoonz.netlify.app/'>Dynamic Guitar Effects Triggering Using A Modified Dynamic Time Warping Algorithm</a></td>\n      <td>C, C++, Python, Java, Pure Data, Matlab</td>\n      <td>Successfully completed and delivered a platform to digitize a guitar signal and perform filtering before executing frequency & time domain analysis to track a current performance against prerecorded performance.Implemented the Dynamic Time Warping algorithm in C++ and Python to autonomously activate or adjust guitar effect at multiple pre-designated section of performance.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://trusting-dijkstra-4d3b17.netlify.app/\">Data Structures & Algorithms Interactive Learning Site</a></td>\n      <td>HTML, CSS, Javascript,  Python,  Java,  jQuery,  Repl.it-Database API</td>\n      <td>A interactive and comprehensive guide and learning tool for DataStructures and Algorithms ... concentrated on JS but with some examples in Python,  C++ and Java as well</td>\n    </tr>\n    <tr>\n      <td><a href='https://mihirbegmusic.netlify.app/'>MihirBeg.com</a></td>\n      <td>Html, Css, Javascript,  Bootstrap,  FontAwesome,  jQuery</td>\n      <td>A responsive and mobile friendly content promotion site for an Audio Engineer to engage with fans and potential clients</td>\n    </tr>\n    <tr>\n      <td><a href='https://tetris42.netlify.app/'>Tetris-JS</a></td>\n      <td>Html, Css, Javascript</td>\n      <td>The classic game of tetris implemented in plain javascipt and styled with a retro-futureistic theme</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://githtmlpreview.netlify.app/\">Git Html Preview Tool</a></td>\n      <td>Git,  Javascript,  CSS3,  HTML5,  Bootstrap,  BitBucket</td>\n      <td>Loads HTML using CORS proxy,  then process all links,  frames,  scripts and styles,  and load each of them using CORS proxy,  so they can be evaluated by the browser.</td>\n    </tr>\n    <tr>\n      <td><a href='https://project-showcase-bgoonz.netlify.app/'>Mini Project Showcase</a></td>\n      <td>HTML, HTML5, CSS, CSS3, Javascript, jQuery</td>\n      <td>add songs and play music, it also uses to store data in  INDEXEDB Database by which we can play songs, if we not clear the catch then song will remain stored in database.</td>\n    </tr>\n    \n  </tbody>\n</table>\n<h2>➤ Current Projects:</h2>\n<p><a href=\"https://github.com/bgoonz/Lambda\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=bgoonz&#x26;repo=Lambda\" alt=\"ReadMe Card\"></a>\n<a href=\"https://github.com/bgoonz/bgoonz.github.io\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=bgoonz&#x26;repo=bgoonz.github.io\" alt=\"ReadMe Card\"></a>\n<a href=\"https://github.com/bgoonz/WEB-DEV-TOOLS-HUB\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=bgoonz&#x26;repo=WEB-DEV-TOOLS-HUB\" alt=\"ReadMe Card\"></a>\n<a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=bgoonz&#x26;repo=DS-ALGO-OFFICIAL\" alt=\"ReadMe Card\"></a></p>\n<p align=\"center\">\n<hr>\n<hr>\n<h2>Portfolio:</h2>\n<h1><a href=\"https://portfolio42.netlify.app/\">netlify</a></h1>\n<hr>\n<hr>\n<div style=\" border: 1px solid black\">\n<img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23b9b236-746e-409c-8e86-30b4385e3b72/hr1-raypham.gif\" alt=\"hr-line\" width=\"100%\" height=\"22\">\n</div>\n<hr>\n<hr>\n<h1><a href=\"https://ecstatic-jang-593fd1.netlify.app/readme\">Learning React Blog</a></h1>\n<h4>React Repo:</h4>\n<p><a href=\"https://github.com/bgoonz/React-Practice\">React Repo</a></p>\n<hr>\n<h2><a href=\"https://codesandbox.io/embed/zealous-microservice-ti7em?autoresize=1&expanddevtools=1&fontsize=14&hidenavigation=1&moduleview=1&theme=dark\"   style=\"width:100%; height:20px; border:0; border-radius: 4px; overflow:hidden;\" rel=\"React Todo\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Foo\"></a></h2>\n<div style=\" border: 1px solid black\">\n<img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23b9b236-746e-409c-8e86-30b4385e3b72/hr1-raypham.gif\" alt=\"hr-line\" width=\"100%\" height=\"22\">\n</div>\n<h1><a href=\"https://documentation-site-react2-peitff669-bgoonz.vercel.app/\">react-documentation-site</a></h1>\n<p><a href=\"https://codesandbox.io/s/magical-stallman-ov0d1?autoresize=1&#x26;expanddevtools=1&#x26;fontsize=12&#x26;hidenavigation=1&#x26;moduleview=1&#x26;theme=dark\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit magical-stallman-ov0d1\"></a></p>\n<div style=\" border: 1px solid black\">\n<img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23b9b236-746e-409c-8e86-30b4385e3b72/hr1-raypham.gif\" alt=\"hr-line\" width=\"100%\" height=\"22\">\n</div>\n<hr>\n<h2>➤ Codepens (mostly embeded animations)</h2>\n<h1><a href=\"https://embedable-content.netlify.app/\">code-pens-embedded</a></h1>\n<p><a href=\"#weekly-quick-snips\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ Weekly-Quick-Snips:</h2>\n<hr>\n<h4>Snippet of the Day:</h4>\n<h3>replaceAll</h3>\n<p>the method string.replaceAll(search, replaceWith) replaces all appearances of search string with replaceWith.</p>\n<pre><code class=\"language-javascript\">const str = 'this is a JSsnippets example';\n\nconst updatedStr = str.replace('example', 'snippet'); // 'this is a  JSsnippets snippet'\n\n\nThe tricky part is that replace method replaces only the very first match of the substring we have passed:\n\n\nconst str = 'this is a JSsnippets example and examples are great';\n\nconst updatedStr = str.replace('example', 'snippet'); //'this is a JSsnippets snippet and examples are great'\n\nIn order to go through this, we need to use a global regexp instead:\n\n\nconst str = 'this is a JSsnippets example and examples are great';\n\nconst updatedStr = str.replace(/example/g, 'snippet'); //'this is a JSsnippets snippet and snippets are greatr'\n\nbut now we have new friend in town, replaceAll\n\nconst str = 'this is a JSsnippets example and examples are great';\n\nconst updatedStr = str.replaceAll('example', 'snippet'); //'this is a JSsnippets snippet and snippets are greatr'\n</code></pre>\n<hr>\n<h3>Fibonacci in Python:</h3>\n<pre><code class=\"language-py\">def fib_iter(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    p0 = 0\n    p1 = 1\n    for i in range(n-1):\n        next_val = p0 + p1\n        p0 = p1\n        p1 = next_val\n    return next_val\nfor i in range(10):\n    print(f'{i}: {fib_iter(i)}')\n</code></pre>\n<hr>\n<h4>Yesterday's Snippet of the day:</h4>\n<hr>\n<pre><code class=\"language-py\">def quicksort(l):\n    # One of our base cases is an empty list or list with one element\n    if len(l) == 0 or len(l) == 1:\n        return l\n    # If we have a left list, a pivot point and a right list...\n    # assigns the return values of the partition() function\n    left, pivot, right = partition(l)\n    # Our sorted list looks like left + pivot + right, but sorted.\n    # Pivot has to be in brackets to be a list, so python can concatenate all the elements to a single list\n    return quicksort(left) + [pivot] + quicksort(right)\n\n\n\nprint(quicksort([]))\n\n\n\nprint(quicksort([1]))\n\n\n\nprint(quicksort([1,2]))\n\nprint(quicksort([2,1]))\n\n\nprint(quicksort([2,2]))\n\n\nprint(quicksort([5,3,9,4,8,1,7]))\n\n\nprint(quicksort([1,2,3,4,5,6,7]))\n\n\nprint(quicksort([9,8,7,6,5,4,3,2,1]))\n</code></pre>\n<hr>\n<details>\n  \n  <summary>See Older Snippets!</summary>\n  \n  \n  #### This Week's snippets: \n  \n  ---\n  \n  \n   >will replace any spaces in file names with an underscore!\n```bash\n for file in *; do mv \"$file\" `echo $file | tr ' ' '_'` ; done\n  ## TAKING IT A STEP FURTHER:\n # Let's do it recursivley:\n  function RecurseDirs ()\n{\n    oldIFS=$IFS\n    IFS=$'\\n'\n    for f in \"$@\"\n    do\n  # YOUR CODE HERE!\n<p>[<img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\">]</p>\n<p>for file in *; do mv \"$file\" <code>echo $file | tr ' ' '_'</code> ; done\nif [[ -d \"${f}\" ]]; then\ncd \"${f}\"\nRecurseDirs $(ls -1 \".\")\ncd ..\nfi\ndone\nIFS=$oldIFS\n}\nRecurseDirs \"./\"</p>\n<pre><code> ---\n ### Copy to clipboard jQuerry\n > Language: Javascript/Jquery\n\n\n>In combination with the script tag :  &#x3C;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\">&#x3C;/script> , this snippet will add a copy to clipboard button to all of your embedded &#x3C;code> blocks.\n\n\n```js\n$(document).ready(function() {\n  $('code, pre').append('&#x3C;span class=\"command-copy\" >&#x3C;i class=\"fa fa-clipboard\" aria-hidden=\"true\">&#x3C;/i>&#x3C;/span>');\n\n  $('code span.command-copy').click(function(e) {\n    var text = $(this).parent().text().trim(); //.text();\n    var copyHex = document.createElement('input');\n    copyHex.value = text\n    document.body.appendChild(copyHex);\n    copyHex.select();\n    document.execCommand('copy');\n    console.log(copyHex.value)\n    document.body.removeChild(copyHex);\n  });\n\n\n  $('pre span.command-copy').click(function(e) {\n    var text = $(this).parent().text().trim();\n    var copyHex = document.createElement('input');\n    copyHex.value = text\n    document.body.appendChild(copyHex);\n    copyHex.select();\n    document.execCommand('copy');\n    console.log(copyHex.value)\n    document.body.removeChild(copyHex);\n  });\n})\n</code></pre>\n<hr>\n<h3>Append Files in PWD</h3>\n<pre><code class=\"language-js\">//APPEND-DIR.js\nconst fs = require('fs');\nlet cat = require('child_process').execSync('cat *').toString('UTF-8');\nfs.writeFile('output.md', cat, (err) => {\n    if (err) throw err;\n});\n</code></pre>\n<hr>\n<h3>doesUserFrequentStarbucks.js</h3>\n<pre><code class=\"language-js\">const isAppleDevice = /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconsole.log(isAppleDevice);\n// Result: will return true if user is on an Apple device\n</code></pre>\n<hr>\n<h3>arr-intersection.js</h3>\n<pre><code class=\"language-js\">/*\n function named intersection(firstArr) that takes in an array and\nreturns a function. \nWhen the function returned by intersection is invoked\npassing in an array (secondArr) it returns a new array containing the elements\ncommon to both firstArr and secondArr.\n*/\nfunction intersection(firstArr) {\n    return (secondArr) => {\n        let common = [];\n        for (let i = 0; i &#x3C; firstArr.length; i++) {\n            let el = firstArr[i];\n            if (secondArr.indexOf(el) > -1) {\n                common.push(el);\n            }\n        }\n        return common;\n    };\n}\nlet abc = intersection(['a', 'b', 'c']); // returns a function\nconsole.log(abc(['b', 'd', 'c'])); // returns [ 'b', 'c' ]\n\nlet fame = intersection(['f', 'a', 'm', 'e']); // returns a function\nconsole.log(fame(['a', 'f', 'z', 'b'])); // returns [ 'f', 'a' ]\n</code></pre>\n<hr>\n<h3>arr-of-cum-partial-sums.js</h3>\n<pre><code class=\"language-js\">/*\nFirst is recurSum(arr, start) which returns the sum of the elements of arr from the index start till the very end.\nSecond is partrecurSum() that recursively concatenates the required sum into an array and when we reach the end of the array, it returns the concatenated array.\n*/\n//arr.length -1 = 5\n//                   arr   [    1,    7,    12,   6,    5,    10   ]\n//                   ind   [    0     1     2     3     4      5   ]\n//                              ↟                              ↟\n//                            start                           end\n\nfunction recurSum(arr, start = 0, sum = 0) {\n    if (start &#x3C; arr.length) {\n        return recurSum(arr, start + 1, sum + arr[start]);\n    }\n\n    return sum;\n}\n\nfunction rPartSumsArr(arr, partSum = [], start = 0, end = arr.length - 1) {\n    if (start &#x3C;= end) {\n        return rPartSumsArr(arr, partSum.concat(recurSum(arr, start)), ++start, end);\n    }\n    return partSum.reverse();\n}\n\nconsole.log('------------------------------------------------rPartSumArr------------------------------------------------');\nconsole.log('rPartSumsArr(arr)=[ 1, 1, 5, 2, 6, 10 ]: ', rPartSumsArr(arr));\nconsole.log('rPartSumsArr(arr1)=[ 1, 7, 12, 6, 5, 10 ]: ', rPartSumsArr(arr1));\nconsole.log('------------------------------------------------rPartSumArr------------------------------------------------');\n/*\n------------------------------------------------rPartSumArr------------------------------------------------\nrPartSumsArr(arr)=[ 1, 1, 5, 2, 6, 10 ]:  [ 10, 16, 18, 23, 24, 25 ]\nrPartSumsArr(arr1)=[ 1, 7, 12, 6, 5, 10 ]:  [ 10, 15, 21, 33, 40, 41 ]\n------------------------------------------------rPartSumArr------------------------------------------------\n*/\n</code></pre>\n<hr>\n<h3>camel2Kabab.js</h3>\n<pre><code class=\"language-js\">function camelToKebab(value) {\n    return value.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n</code></pre>\n<hr>\n<h3>camelCase.js</h3>\n<pre><code class=\"language-js\">function camel(str) {\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function (match, index) {\n        if (+match === 0) return ''; // or if (/\\s+/.test(match)) for white spaces\n        return index === 0 ? match.toLowerCase() : match.toUpperCase();\n    });\n}\n</code></pre>\n<hr>\n<h3>concatLinkedLists.js</h3>\n<pre><code class=\"language-js\">function addTwoNumbers(l1, l2) {\n    let result = new ListNode(0);\n    let currentNode = result;\n    let carryOver = 0;\n    while (l1 != null || l2 != null) {\n        let v1 = 0;\n        let v2 = 0;\n        if (l1 != null) v1 = l1.val;\n        if (l2 != null) v2 = l2.val;\n\n        let sum = v1 + v2 + carryOver;\n        carryOver = Math.floor(sum / 10);\n        sum = sum % 10;\n        currentNode.next = new ListNode(sum);\n\n        currentNode = currentNode.next;\n        if (l1 != null) l1 = l1.next;\n        if (l2 != null) l2 = l2.next;\n    }\n\n    if (carryOver > 0) {\n        currentNode.next = new ListNode(carryOver);\n    }\n\n    return result.next;\n}\n</code></pre>\n<hr>\n<h3>fast-is-alpha-numeric.js</h3>\n<pre><code class=\"language-js\">//Function to test if a character is alpha numeric that is faster than a regular\n//expression in JavaScript\n\nlet isAlphaNumeric = (char) => {\n    char = char.toString();\n    let id = char.charCodeAt(0);\n    if (\n        !(id > 47 &#x26;&#x26; id &#x3C; 58) &#x26;&#x26; // if not numeric(0-9)\n        !(id > 64 &#x26;&#x26; id &#x3C; 91) &#x26;&#x26; // if not letter(A-Z)\n        !(id > 96 &#x26;&#x26; id &#x3C; 123) // if not letter(a-z)\n    ) {\n        return false;\n    }\n    return true;\n};\n\nconsole.log(isAlphaNumeric('A')); //true\nconsole.log(isAlphaNumeric(2)); //true\nconsole.log(isAlphaNumeric('z')); //true\nconsole.log(isAlphaNumeric(' ')); //false\nconsole.log(isAlphaNumeric('!')); //false\n</code></pre>\n<hr>\n<h3>find-n-replace.js</h3>\n<pre><code class=\"language-js\">function replaceWords(str, before, after) {\n    if (/^[A-Z]/.test(before)) {\n        after = after[0].toUpperCase() + after.substring(1);\n    } else {\n        after = after[0].toLowerCase() + after.substring(1);\n    }\n    return str.replace(before, after);\n}\nconsole.log(replaceWords('Let us go to the store', 'store', 'mall')); //\"Let us go to the mall\"\nconsole.log(replaceWords('He is Sleeping on the couch', 'Sleeping', 'sitting')); //\"He is Sitting on the couch\"\nconsole.log(replaceWords('His name is Tom', 'Tom', 'john'));\n//\"His name is John\"\n</code></pre>\n<hr>\n<h3>flatten-arr.js</h3>\n<pre><code class=\"language-js\">/*Simple Function to flatten an array into a single layer */\nconst flatten = (array) => array.reduce((accum, ele) => accum.concat(Array.isArray(ele) ? flatten(ele) : ele), []);\n</code></pre>\n<hr>\n<h3>isWeekDay.js</h3>\n<pre><code class=\"language-js\">const isWeekday = (date) => date.getDay() % 6 !== 0;\nconsole.log(isWeekday(new Date(2021, 0, 11)));\n// Result: true (Monday)\nconsole.log(isWeekday(new Date(2021, 0, 10)));\n// Result: false (Sunday)\n</code></pre>\n<hr>\n<h3>longest-common-prefix.js</h3>\n<pre><code class=\"language-js\">function longestCommonPrefix(strs) {\n    let prefix = '';\n    if (strs.length === 0) return prefix;\n    for (let i = 0; i &#x3C; strs[0].length; i++) {\n        const character = strs[0][i];\n        for (let j = 0; j &#x3C; strs.length; j++) {\n            if (strs[j][i] !== character) return prefix;\n        }\n        prefix = prefix + character;\n    }\n    return prefix;\n}\n</code></pre>\n<p><a href=\"https://wakatime.com\"><img src=\"https://wakatime.com/share/@bgoonz42/e088a908-1c73-434f-9eab-b73ea4f17d3c.png\" /></a></p>\n</details>\n<hr>\n<p><a href=\"#github-gists\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h1>➤ Github Gists</h1>\n<h2><a href=\"https://bgoonzgist.netlify.app/\">Github Gists</a></h2>\n<p><a href=\"https://gist.github.com/bgoonz/659a9b81ac45453bedc0a1a36275b580\">list-of-my-websites</a></p>\n<hr>\n</details>\n</div>"
                },
                {
                    "url": "/docs/articles/basic-web-dev/",
                    "relativePath": "docs/articles/basic-web-dev.md",
                    "relativeDir": "docs/articles",
                    "base": "basic-web-dev.md",
                    "name": "basic-web-dev",
                    "frontmatter": {
                        "title": "review",
                        "sections": [],
                        "seo": { "title": "", "description": "", "robots": [], "extra": [], "type": "stackbit_page_meta" },
                        "template": "advanced"
                    },
                    "html": "<hr>\n<h2>description: Review</h2>\n<h1>Review-Of-Previous-Concepts</h1>\n<h3>Review of Concepts</h3>\n<h3>Running JS Locally Concepts</h3>\n<ul>\n<li>\n<p>Match the commands <code>ls</code>, <code>cd</code>, <code>pwd</code> to their descriptions</p>\n<ul>\n<li><code>ls</code> lists contents of current directory</li>\n<li>\n<p><code>cd</code> changes current directory</p>\n<ul>\n<li><code>cd ..</code> takes you up one level</li>\n<li><code>cd</code> alone takes you back home</li>\n</ul>\n</li>\n<li><code>pwd</code> returns current directory</li>\n</ul>\n</li>\n<li>Given a folder structure diagram, a list of 'cd (path)' commands and target files, match the paths to the target files.</li>\n<li>Use VSCode to create a folder. Within the folder create a .js file containing <code>console.log('hello new world');</code> and save it.</li>\n<li>Use node to execute a JavaScript file in the terminal</li>\n</ul>\n<h3>Plain Old JS Object Lesson Concepts</h3>\n<ul>\n<li>\n<p>Label variables as either Primitive vs. Reference</p>\n<ul>\n<li>\n<p>primitives: strings, booleans, numbers, null and undefined</p>\n<ul>\n<li>primitives are immutable</li>\n</ul>\n</li>\n<li>\n<p>refereces: objects (including arrays)</p>\n<ul>\n<li>references are mutable</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Identify when to use <code>.</code> vs <code>[]</code> when accessing values of an object</p>\n<ul>\n<li>\n<p>dot syntax <code>object.key</code></p>\n<ul>\n<li>easier to read</li>\n<li>easier to write</li>\n<li>cannot use variables as keys</li>\n<li>keys cannot begin with a number</li>\n</ul>\n</li>\n<li>\n<p>bracket notation <code>object[\"key]</code></p>\n<ul>\n<li>allows variables as keys</li>\n<li>strings that start with numbers can be use as keys</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Write an object literal with a variable key using interpolation</p>\n<ul>\n<li>\n<p>put it in brackets to access the value of the variable, rather than just make the value that string</p>\n<pre><code class=\"language-javascript\">let a = 'b';\nlet obj = { a: 'letter_a', [a]: 'letter b' };\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Use the <code>obj[key] !== undefined</code> pattern to check if a given variable that contains a key exists in an object</p>\n<ul>\n<li>can also use <code>(key in object)</code> syntax interchangeably (returns a boolean)</li>\n</ul>\n</li>\n<li>\n<p>Utilize Object.keys and Object.values in a function</p>\n<ul>\n<li><code>Object.keys(obj)</code> returns an array of all the keys in <code>obj</code></li>\n<li><code>Object.values(obj)</code> returns an array of the values in <code>obj</code></li>\n</ul>\n</li>\n<li>\n<p>Iterate through an object using a <code>for in</code> loop</p>\n<pre><code class=\"language-javascript\">let printValues = function (obj) {\n    for (let key in obj) {\n        let value = obj[key];\n        console.log(value);\n    }\n};\n</code></pre>\n</li>\n<li>\n<p>Define a function that utilizes <code>...rest</code> syntax to accept an arbitrary number of arguments</p>\n<ul>\n<li><code>...rest</code> syntax will store all additional arguments in an array</li>\n<li>\n<p>array will be empty if there are no additional arguments</p>\n<pre><code class=\"language-javascript\">let myFunction = function (str, ...strs) {\n    console.log('The first string is ' + str);\n    console.log('The rest of the strings are:');\n    strs.forEach(function (str) {\n        console.log(str);\n    });\n};\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3></h3>\n<ul>\n<li>\n<p>Use <code>...spread</code> syntax for Object literals and Array literals</p>\n<pre><code class=\"language-javascript\">let arr1 = ['a', 'b', 'c'];\nlet longer = [...arr1, 'd', 'e']; // [\"a\", \"b\", \"c\", \"d\", \"e\"]\n// without spread syntax, this would give you a nested array\nlet withoutRest = [arr1, 'd', 'e']; // [[\"a\", \"b\", \"c\"], \"d\", \"e\"]\n</code></pre>\n</li>\n<li>\n<p>Destructure an array to reference specific elements</p>\n<p>```javascript</p>\n<p>let array = [35,9];</p>\n<p>let [firstEl, secondEl] = array;</p>\n<p>console.log(firstEl); // => 35</p>\n<p>console.log(secondEl); // => 9</p>\n</li>\n</ul>\n<p>// can also destructure using ... syntax let array = [35,9,14]; let [head, ...tail] = array; console.log(head); // => 35 console.log(tail); // => [9, 14]</p>\n<pre><code class=\"language-javascript\">- Destructure an object to reference specific values\n   - if you want to use variable names that don't match the keys, you can use aliasing\n      - `let { oldkeyname: newkeyname } = object`\n   - rule of thumb—only destructure values from objects that are two levels deep\n```javascript\nlet obj = {\n   name: \"Wilfred\",\n   appearance: [\"short\", \"mustache\"],\n   favorites: {\n      color: \"mauve\",\n      food: \"spaghetti squash\",\n      number: 3\n   }\n}\n// with variable names that match keys\nlet { name, appearance } = obj;\nconsole.log(name); // \"Wilfred\"\nconsole.log(appearance); // [\"short\", \"mustache\"]\n\n// with new variable names (aliasing)\nlet {name: myName, appearance: myAppearance} = obj;\n\nconsole.log(myName); // \"Wilfred\"\nconsole.log(myAppearance); // [\"short\", \"mustache\"]\n\n// in a function call\nlet sayHello = function({name}) {\nconsole.log(\"Hello, \" + name); // \"Hello Wilfred\"\n}\n\n// nested objects + aliasing\nlet { favorites: {color, food: vegetable} } = obj;\nconsole.log(color, vegetable); //=> mauve spaghetti squash\n</code></pre>\n<ul>\n<li>\n<p>Write a function that accepts a array as an argument and returns an object representing the count of each character in the array</p>\n<pre><code class=\"language-javascript\">//\nlet elementCounts = function (array) {\n    let obj = {};\n    array.forEach(function (el) {\n        if (el in obj) obj[el] += 1;\n        else obj[el] = 1;\n    });\n    return obj;\n};\nconsole.log(elementCounts(['e', 'f', 'g', 'f'])); // => Object {e: 1, f: 2, g: 1}\n</code></pre>\n</li>\n</ul>\n<h3>Callbacks Lesson Concepts</h3>\n<ul>\n<li>\n<p>Given multiple plausible reasons, identify why functions are called \"First Class Objects\" in JavaScript.</p>\n<ul>\n<li>they can be stored in variables, passed as arguments to other functions, and serve as return value for a function</li>\n<li>supports same basic operations as other types (strings, bools, numbers)</li>\n<li>higher-order functions take functions as arguments or return functions as values</li>\n</ul>\n</li>\n<li>\n<p>Given a code snippet containing an anonymous callback, a named callback, and multiple <code>console.log</code>s, predict what will be printed</p>\n<ul>\n<li>what is this referring to?</li>\n</ul>\n</li>\n<li>Write a function that takes in a value and two callbacks. The function should return the result of the callback that is greater.</li>\n</ul>\n<pre><code class=\"language-javascript\">let greaterCB = function (val, callback1, callback2) {\n    if (callback1(val) > callback2(val)) {\n        return callback1(val);\n    }\n    return callback2(val);\n};\n\nlet greaterCB = function (val, callback1, callback2) {\n    if (callback1(val) > callback2(val)) {\n        return callback1(val);\n    }\n    return callback2(val);\n};\n</code></pre>\n<p>// shorter version let greaterCB = function(val, callback1, callback2) { return Math.max(callback1(val), callback2(val)); } // even shorter, cause why not let greaterCB = (val, cb1, cb2) => Math.max(cb1(val), cb2(val));</p>\n<pre><code class=\"language-javascript\">- Write a function, myMap, that takes in an array and a callback as arguments. The function should mimic the behavior of `Array#map`.\n```javascript\nlet myMap = function(array, callback) {\n   let newArr = [];\n   for (let i = 0; i &#x3C; array.length; i ++) {\n      mapped = callback(array[i], i, array);\n      newArr.push(mapped);\n   }\n   return newArr;\n}\nconsole.log( myMap([16,25,36], Math.sqrt)); // => [4, 5, 6];\n\nlet myMapArrow = (array, callback) => {\n   let newArr = [];\n   array.forEach( (ele, ind, array) => {\n      newArr.push(callback(ele, ind, array));\n   })\n   return newArr;\n}\nconsole.log(myMapArrow([16,25,36], Math.sqrt)); // => [4, 5, 6];\n</code></pre>\n<ul>\n<li>\n<p>Write a function, myFilter, that takes in an array and a callback as arguments. The function should mimic the behavior of <code>Array#filter</code>.</p>\n<pre><code class=\"language-javascript\">let myFilter = function (array, callback) {\n    let filtered = [];\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (callback(array[i])) {\n            filtered.push(array[i], i, array);\n        }\n    }\n};\n</code></pre>\n</li>\n<li>\n<p>Write a function, myEvery, that takes in an array and a callback as arguments. The function should mimic the behavior of <code>Array#every</code>.</p>\n<pre><code class=\"language-javascript\">let myEvery = function (array, callback) {\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (!callback(array[i], i, array)) {\n            return false;\n        }\n    }\n    return true;\n};\n// with arrow function syntax\nlet myEvery = (array, callback) => {\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (!callback(array[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n</code></pre>\n</li>\n</ul>\n<h3>Scope Lesson Concepts</h3>\n<ul>\n<li>\n<p>Identify the difference between <code>const</code>, <code>let</code>, and <code>var</code> declarations</p>\n<ul>\n<li><code>const</code> - cannot reassign variable, scoped to block</li>\n<li><code>let</code> - can reassign variable, scoped to block</li>\n<li><code>var</code> - outdated, may or may not be reassigned, scoped to function. can be not just reassigned, but also redeclared!</li>\n<li>a variable will always evaluate to the value it contains regardless of how it was declared</li>\n</ul>\n</li>\n<li>\n<p>Explain the difference between <code>const</code>, <code>let</code>, and <code>var</code> declarations</p>\n<ul>\n<li>\n<p><code>var</code> is function scoped—so if you declare it anywhere in a function, the declaration (but not assignment) is \"hoisted\"</p>\n<ul>\n<li>so it will exist in memory as \"undefined\" which is bad and unpredictable</li>\n</ul>\n</li>\n<li><code>var</code> will also allow you to redeclare a variable, while <code>let</code> or <code>const</code> will raise a syntax error. you shouldn't be able to do that!</li>\n<li><code>const</code> won't let you reassign a variable, but if it points to a mutable object, you will still be able to change the value by mutating the object</li>\n<li>block-scoped variables allow new variables with the same name in new scopes</li>\n<li>block-scoped still performs hoisting of all variables within the block, but it doesn't initialize to the value of <code>undefined</code> like <code>var</code> does, so it throws a specific reference error if you try to access the value before it has been declared</li>\n<li>\n<p>if you do not use <code>var</code> or <code>let</code> or <code>const</code> when initializing, it will be declared as global—THIS IS BAD</p>\n<ul>\n<li>if you assign a value without a declaration, it exists in the global scope (so then it would be accessible by all outer scopes, so bad). however, there's no hoisting, so it doesn't exist in the scope until after the line is run</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining</p>\n<ul>\n<li>scope of a program means the set of variables that are available for use within the program</li>\n<li>\n<p>global scope is represented by the <code>window</code> object in the browser and the <code>global</code> object in Node.js</p>\n<ul>\n<li>global variables are available everywhere, and so increase the risk of name collisions</li>\n</ul>\n</li>\n<li>\n<p>local scope is the set of variables available for use within the function</p>\n<ul>\n<li>when we enter a function, we enter a new scope</li>\n<li>includes functions arguments, local variables declared inside function, and any variables that were already declared when the function is defined (hmm about that last one)</li>\n</ul>\n</li>\n<li>for blocks (denoted by curly braces <code>{}</code>, as in conditionals or <code>for</code> loops), variables can be block scoped</li>\n<li>\n<p>inner scope does not have access to variables in the outer scope</p>\n<ul>\n<li>scope chaining—if a given variable is not found in immediate scope, javascript will search all accessible outer scopes until variable is found</li>\n<li>so an inner scope can access outer scope variables</li>\n<li>but an outer scope can never access inner scope variables</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Define an arrow function</p>\n<p>```javascript</p>\n<p>let arrowFunction = (param1, param2) => {</p>\n<p>let sum = param1 + param2;</p>\n<p>return sum;</p>\n<p>}</p>\n</li>\n</ul>\n<p>// with 1 param you can remove parens around parameters let arrowFunction = param => { param += 1; return param; }</p>\n<p>// if your return statement is one line, you can use implied return let arrowFunction = param => param + 1;</p>\n<p>// you don't have to assign to variable, can be anonymous // if you never need to use it again param => param + 1;</p>\n<p>```</p>\n<ul>\n<li>\n<p>Given an arrow function, deduce the value of <code>this</code> without executing the code</p>\n<ul>\n<li>arrow functions are automatically bound to the context they were declared in</li>\n<li>unlike regular function which use the context they are invoked in (unless they have been bound using <code>Function#bind</code>)</li>\n<li>if you implement an arrow function as a method in an object the context it will be bound to is NOT the object itself, but the global context</li>\n<li>\n<p>so you can't use an arrow function to define a method directly</p>\n<p>```javascript</p>\n<p>let obj = {</p>\n<p>name: \"my object\",</p>\n<p>unboundFunc: function () {</p>\n<p>return this.name;</p>\n<p>// this function will be able to be called on different objects</p>\n<p>},</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3></h3>\n<p>boundToGlobal: () => { return this.name; // this function, no matter how you call it, will be called // on the global object, and it cannot be rebound // this is because it was defined using arrow syntax },</p>\n<pre><code class=\"language-javascript\">makeFuncBoundToObj: function () {\n    return () => {\n        return this.name;\n    }\n    // this function will return a function that will be bound\n    // to the object where we call the outer method\n    // because the arrow syntax is nested inside one of this\n    // function's methods, it cannot be rebound\n},\n\nmakeUnboundFunc: function () {\n    return function () {\n        return this.name;\n    }\n    //this function will return a function that will still be unbound\n},\n\nimmediatelyInvokedFunc: function () {\n    return this.name;\n}(), // this property will be set to the return value of this anonymous function,\n// which is invoked during the object definition;\n// basically, it's a way to check the context inside of an object, at this moment\n\ninnerObj: {\n    name: \"inner object\",\n    innerArrowFunc: () =>  {\n        return this.name;\n    } // the context inside a nested object is not the parent, it's still\n    // the global object. entering an object definition doesn't change the context\n},\n\n\nlet otherObj = { name: \"my other object\" }\n// call unboundFunc on obj, we get \"my object\" console.log(\"unboundFunc: \", obj.unboundFunc()); // => \"my object\" // assign unboundFunc to a variable and call it let newFunc = obj.unboundFunc; // this newFunc will default to being called on global object console.log(\"newFunc: \",newFunc()); // => undefined // but you could bind it directly to a different object if you wanted console.log(\"newFunc: \", newFunc.bind(otherObj)()); // \"my other object\"\n// meanwhile, obj.boundToGlobal will only ever be called on global object console.log(\"boundToGlobal: \", obj.boundToGlobal()); //=> undefined let newBoundFunc = obj.boundToGlobal; console.log(\"newBoundFunc: \", newBoundFunc()); // => undefined // even if you try to directly bind to another object, it won't work! console.log(\"newBoundFunc: \", newBoundFunc.bind(otherObj)()); // => undefined\n// let's make a new function that will always be bound to the context // where we call our function maker let boundFunc = obj.makeFuncBoundToObj();// note that we're invoking, not just assigning console.log(\"boundFunc: \", boundFunc()); // => \"my object\" // we can't rebind this function console.log(\"boundFunc: \", boundFunc.bind(otherObj)()) // =>\"my object\"\n// but if I call makeFuncBoundToObj on another context // the new bound function is stuck with that other context let boundToOther = obj.makeFuncBoundToObj.bind(otherObj)(); console.log(\"boundToOther: \", boundToOther()); // => \"my other object\" console.log(\"boundToOther: \", boundToOther.bind(obj)()) // \"my other object\"\n// the return value of my immediately invoked function // shows that the context inside of the object is the // global object, not the object itself // context only changes inside a function that is called // on an object console.log(\"immediatelyInvokedFunc: \", obj.immediatelyInvokedFunc); // => undefined\n// even though we're inside a nested object, the context is // still the same as it was outside the outer object // in this case, the global object console.log(\"innerArrowFunc: \", obj.innerObj.innerArrowFunc()); // => undefined\n</code></pre>\n<p>}</p>\n<pre><code class=\"language-javascript\">- Implement a closure and explain how the closure effects scope\n   - a closure is \"the combination of a function and the lexical environment within which that function was declared\"\n      - alternatively, \"when an inner function uses or changes variables in an outer function\"\n   - closures have access to any variables within their own scope + scope of outer functions + global scope — the set of all these available variables is \"lexical environemnt\"\n   - closure keeps reference to all variables **even if the outer function has returned**\n      - each function has a private mutable state that cannot be accessed externally\n      - the inner function will maintain a reference to the scope in which it was declared. so it has access to variables that were initialized in any outer scope—even if that scope\n      - if a variable exists in the scope of what could have been accessed by a function (e.g. global scope, outer function, etc), does that variable wind up in the closure even if it never got accessed?\n      - if you change the value of a variable (e.g. i++) you will change the value of that variable in the scope that it was declared in\n\n\n```javascript\nfunction createCounter() {\n   // this function starts a counter at 0, then returns a\n   // new function that can access and change that counter\n   //\n   // each new counter you create will have a single internal\n   // state, that can be changed only by calling the function.\n   // you can't access that state from outside of the function,\n   // even though the count variable in question is initialized\n   // by the outer function, and it remains accessible to the\n   // inner function after the outer function returns.\n   let count = 0;\n   return function() {\n      count ++;\n      return count;\n   }\n}\n\nlet counter = createCounter();\nconsole.log(counter()); //=> 1\nconsole.log(counter()); //=> 2\n// so the closure here comes into play because\n// an inner function is accessing and changing\n// a variable from an outer function\n\n// the closure is the combination of the counter\n// function and the all the variables that existed\n// in the scope that it was declared in. because\n// inner blocks/functions have access to outer\n// scopes, that includes the scope of the outer\n// function.\n\n// so counter variable is a closure, in that\n// it contains the inner count value that was\n// initialized by the outer createCounter() function\n// count has been captured or closed over\n\n// this state is private, so if i run createCounter again\n// i get a totally separate count that doesn't interact\n// with the previous one and each of the new functions\n// will have their own internal state based on the\n// initial declaration in the now-closed outer function\n\nlet counter2 = createCounter();\nconsole.log(counter2()); // => 1\n\n// if i set a new function equal to my existing counter\n// the internal state is shared with the new function\nlet counter3 = counter2;\nconsole.log(counter3());\n</code></pre>\n<ul>\n<li>\n<p>Define a method that references <code>this</code> on an object literal</p>\n<ul>\n<li>\n<p>when we use <code>this</code> in a method it refers to the object that the method is invoked on</p>\n<ul>\n<li>it will let you access other pieces of information from within that object, or even other methods</li>\n<li>method style invocation - <code>object.method(args)</code> (e.g. built in examples like <code>Array#push</code>, or <code>String#toUpperCase</code>)</li>\n</ul>\n</li>\n<li>context is set every time we invoke a function</li>\n<li>function style invocation sets the context to the global object no matter what</li>\n<li>being inside an object does not make the context that object! you still have to use method-style invocation</li>\n</ul>\n</li>\n<li>\n<p>Utilize the built in <code>Function#bind</code> on a callback to maintain the context of this</p>\n<ul>\n<li>when we call bind on a function, we get an exotic function back—so the context will always be the same for that new function</li>\n</ul>\n<pre><code class=\"language-text\">let cat = {\npurr: function () {\nconsole.log(\"meow\");\n},\npurrMore: function () {\nthis.purr();\n},\n};\nlet sayMeow = cat.purrMore; console.log(sayMeow()); // TypeError: this.purr is not a function\n\n\n// we can use the built in Function.bind to ensure our context, our this, // is the cat object let boundCat = sayMeow.bind(cat);\nboundCat(); // prints \"meow\"\n</code></pre>\n<p>``</p>\n</li>\n</ul>\n<h3></h3>\n<h3></h3>\n<pre><code class=\"language-javascript\">   - `bind` can also work with arguments, so you can have a version of a function with particular arguments and a particular context. the first arg will be the context aka the `this` you want it to use. the next arguments will be the functions arguments that you are binding\n      - if you just want to bind it to those arguments in particular, you can use `null` as the first argument, so the context won't be bound, just the arguments\n- Given a code snippet, identify what `this` refers to\n   - important to recognize the difference between scope and context\n      - scope works like a dictionary that has all the variables that are available within a given block, plus a pointer back the next outer scope (which itself has pointers to new scopes until you reach the global scope. so you can think about a whole given block's scope as a kind of linked list of dictionaries) (also, this is not to say that scope is actually implemented in this way, that is just the schema that i can use to understand it)\n      - context refers to the value of the `this` keyword\n   - the keyword `this` exists in every function and it evaluates to the object that is currently invoking that function\n   - so the context is fairly straightforward when we talk about methods being called on specific objects\n   - you could, however, call an object's method on something other than that object, and then this would refer to the context where/how it was called, e.g.\n```javascript\nlet dog = {\n   name: \"Bowser\",\n   changeName: function () {\n      this.name = \"Layla\";\n  },\n};\n\n// note this is **not invoked** - we are assigning the function itself\nlet change = dog.changeName;\nconsole.log(change()); // undefined\n\n// our dog still has the same name\nconsole.log(dog); // { name: 'Bowser', changeName: [Function: changeName] }\n\n// instead of changing the dog we changed the global name!!!\nconsole.log(this); // Object [global] {etc, etc, etc,  name: 'Layla'}\n</code></pre>\n<ul>\n<li>\n<p>CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!</p>\n<ul>\n<li>could throw an error if it expects this to have some other method or whatever that doesn't exist</li>\n<li>you could also overwrite values or assign values to exist in a space where they should not exist</li>\n</ul>\n</li>\n<li>\n<p>if you call a function as a callback, it will set <code>this</code> to be the outer function itself, even if the function you were calling is a method that was called on a particular object</p>\n<pre><code class=\"language-text\">let cat = {\npurr: function () {\nconsole.log(\"meow\");\n},\npurrMore: function () {\nthis.purr();\n},\n};\nglobal.setTimeout(cat.purrMore, 5000); // 5 seconds later: TypeError: this.purr is not a function\n</code></pre>\n</li>\n</ul>\n<p>we can use strict mode with <code>\"use strict\";</code> this will prevent you from accessing the global object with <code>this</code> in functions, so if you try to call <code>this</code> in the global context and change a value, you will get a type error, and the things you try to access will be undefined</p>\n<h3></h3>\n<p>let sayMeow = cat.purrMore; console.log(sayMeow()); // TypeError: this.purr is not a function</p>\n<p>// we can use the built in Function.bind to ensure our context, our <code>this</code>, // is the cat object let boundCat = sayMeow.bind(cat);</p>\n<p>boundCat(); // prints \"meow\"</p>\n<pre><code class=\"language-text\">   - `bind` can also work with arguments, so you can have a version of a function with particular arguments and a particular context. the first arg will be the context aka the `this` you want it to use. the next arguments will be the functions arguments that you are binding\n      - if you just want to bind it to those arguments in particular, you can use `null` as the first argument, so the context won't be bound, just the arguments\n- Given a code snippet, identify what `this` refers to\n   - important to recognize the difference between scope and context\n      - scope works like a dictionary that has all the variables that are available within a given block, plus a pointer back the next outer scope (which itself has pointers to new scopes until you reach the global scope. so you can think about a whole given block's scope as a kind of linked list of dictionaries) (also, this is not to say that scope is actually implemented in this way, that is just the schema that i can use to understand it)\n      - context refers to the value of the `this` keyword\n   - the keyword `this` exists in every function and it evaluates to the object that is currently invoking that function\n   - so the context is fairly straightforward when we talk about methods being called on specific objects\n   - you could, however, call an object's method on something other than that object, and then this would refer to the context where/how it was called, e.g.\n```javascript\nlet dog = {\n   name: \"Bowser\",\n   changeName: function () {\n      this.name = \"Layla\";\n  },\n};\n\n// note this is **not invoked** - we are assigning the function itself\nlet change = dog.changeName;\nconsole.log(change()); // undefined\n\n// our dog still has the same name\nconsole.log(dog); // { name: 'Bowser', changeName: [Function: changeName] }\n\n// instead of changing the dog we changed the global name!!!\nconsole.log(this); // Object [global] {etc, etc, etc,  name: 'Layla'}\n</code></pre>\n<ul>\n<li>\n<p>CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!</p>\n<ul>\n<li>could throw an error if it expects this to have some other method or whatever that doesn't exist</li>\n<li>you could also overwrite values or assign values to exist in a space where they should not exist</li>\n</ul>\n</li>\n<li>\n<p>if you call a function as a callback, it will set <code>this</code> to be the outer function itself, even if the function you were calling is a method that was called on a particular object</p>\n<p>```javascript</p>\n<p>let cat = {</p>\n<p>purr: function () {</p>\n<p>console.log(\"meow\");</p>\n<p>},</p>\n<p>purrMore: function () {</p>\n<p>this.purr();</p>\n<p>},</p>\n<p>};</p>\n</li>\n</ul>\n<p>global.setTimeout(cat.purrMore, 5000); // 5 seconds later: TypeError: this.purr is not a function</p>\n<p>```</p>\n<ul>\n<li>we can use strict mode with <code>\"use strict\";</code> this will prevent you from accessing the global object with <code>this</code> in functions, so if you try to call <code>this</code> in the global context and change a value, you will get a type error, and the things you try to access will be undefined</li>\n</ul>\n<h3>POJOs</h3>\n<h4>1. Label variables as either Primitive vs. Reference</h4>\n<p>Javascript considers most data types to be 'primitive', these data types are immutable, and are passed by value. The more complex data types: Array and Object are mutable, are considered 'reference' data types, and are passed by reference.</p>\n<ul>\n<li>Boolean - Primitive</li>\n<li>Null - Primitive</li>\n<li>Undefined - Primitive</li>\n<li>Number - Primitive</li>\n<li>String - Primitive</li>\n<li>Array - Reference</li>\n<li>Object - Reference</li>\n<li>Function - Reference</li>\n</ul>\n<h4>2. Identify when to use . vs [] when accessing values of an object</h4>\n<pre><code class=\"language-javascript\">let obj = { one: 1, two: 2 };\n\n// Choose the square brackets property accessor when the property name is determined at\n// runtime, or if the property name is not a valid identifier\nlet myKey = 'one';\nconsole.log(obj[myKey]);\n\n// Choose the dot property accessor when the property name is known ahead of time.\nconsole.log(obj.two);\n</code></pre>\n<h4>3. Write an object literal with a variable key using interpolation</h4>\n<pre><code class=\"language-javascript\">let keyName = 'two';\n\n// If the key is not known, you can use an alternative `[]` syntax for\n// object initialization only\nlet obj2 = { [keyName]: 2 };\nconsole.log(obj2);\n</code></pre>\n<h4>4. Use the obj[key] !== undefined pattern to check if a given variable that contains a key exists in an object</h4>\n<pre><code class=\"language-javascript\">function doesKeyExist(obj, key) {\n    // obj[key] !== undefined\n    // or:\n    return key in obj;\n}\n\nlet course = { bootcamp: 'Lambda', course: 'Bootcamp Prep' };\nconsole.log(doesKeyExist(course, 'course')); // => true\nconsole.log(doesKeyExist(course, 'name')); // => false\n</code></pre>\n<h4>5. Utilize Object.keys and Object.values in a function</h4>\n<pre><code class=\"language-javascript\">function printKeys(object) {\n    return Object.keys(object);\n}\n\nfunction printValues(object) {\n    return Object.values(object);\n}\n\nconsole.log(printKeys({ dog: 'Strelka', dog2: 'Belka' }));\nconsole.log(printValues({ dog: 'Strelka', dog2: 'Belka' }));\n</code></pre>\n<h4>6. Iterate through an object using a for in loop</h4>\n<pre><code class=\"language-javascript\">let player = { name: 'Sergey', skill: 'hockey' };\n\nfor (let key in player) {\n    console.log(key, player[key]);\n}\n\nconsole.log(Object.entries(player));\n</code></pre>\n<h4>7. Define a function that utilizes ...rest syntax to accept an arbitrary number of arguments</h4>\n<pre><code class=\"language-javascript\">function restSum(...otherNums) {\n    let sum = 0;\n    console.log(otherNums);\n    otherNums.forEach(function (num) {\n        sum += num;\n    });\n\n    return sum;\n}\n\nconsole.log(restSum(3, 5, 6)); // => 14\nconsole.log(restSum(1, 2, 3, 4, 5, 6, 7, 8, 9)); // => 45\nconsole.log(restSum(0)); // => 0\n</code></pre>\n<h4>8. Use ...spread syntax for Object literals and Array literals</h4>\n<pre><code class=\"language-javascript\">let numArray = [1, 2, 3];\nlet moreNums = [...numArray, 4, 5, 6];\n\nconsole.log(moreNums);\n\nlet shoe = { color: 'red', size: 10 };\nlet newShoe = { ...shoe, brand: 'Nike', size: 12 };\nconsole.log(newShoe);\nnewShoe.color = 'black';\nconsole.log(newShoe);\n\nconsole.log(shoe);\n</code></pre>\n<h4>9. Destructure an array to reference specific elements</h4>\n<pre><code class=\"language-javascript\">let arr = ['one', 'two', 'three'];\n\nlet [first] = arr;\nconsole.log(first);\n</code></pre>\n<h4>10. Destructure an object to reference specific values</h4>\n<pre><code class=\"language-javascript\">let me = {\n    name: 'Ian',\n    instruments: ['bass', 'synth', 'guitar'],\n    siblings: {\n        brothers: ['Alistair'],\n        sisters: ['Meghan']\n    }\n};\n\nlet {\n    name,\n    instruments: musical_instruments,\n    siblings: { sisters }\n} = me;\n\nconsole.log(name);\nconsole.log(musical_instruments);\nconsole.log(sisters);\n</code></pre>\n<h4>11. Write a function that accepts a string as an argument and returns an object representing the count of each character in the array</h4>\n<pre><code class=\"language-javascript\">function charCount(inputString) {\n    let res = inputString.split('').reduce(function (accum, el) {\n        if (el in accum) {\n            accum[el] = accum[el] + 1;\n        } else {\n            accum[el] = 1;\n        }\n        return accum;\n    }, {});\n    return res;\n}\n\nconsole.log(charCount('aaabbbeebbcdkjfalksdfjlkasdfasdfiiidkkdingds'));\n</code></pre>\n<h3></h3>\n<h3>Review of Concepts</h3>\n<h4>1. Identify the difference between const, let, and var declarations</h4>\n<h4>2. Explain the difference between const, let, and var declarations</h4>\n<pre><code class=\"language-javascript\">var a = 'a';\n</code></pre>\n<ul>\n<li><code>var</code> is the historical keyword used for variable declaration.</li>\n<li><code>var</code> declares variables in function scope, or global scope if not inside a function.</li>\n<li>We consider <code>var</code> to be <em>deprecated</em> and it is never used in this course.</li>\n</ul>\n<pre><code class=\"language-javascript\">let b = 'b';\n</code></pre>\n<ul>\n<li><code>let</code> is the keyword we use most often for variable declaration.</li>\n<li><code>let</code> declares variables in block scope.</li>\n<li>variables declared with <code>let</code> are re-assignable.</li>\n</ul>\n<pre><code class=\"language-javascript\">const c = 'c';\n</code></pre>\n<ul>\n<li><code>const</code> is a specialized form of <code>let</code> that can only be used to <strong>initialize</strong> a variable.</li>\n<li>Except when it is declared, you cannot assign to a <code>const</code> variable.</li>\n<li><code>const</code> scopes variables the same way that <code>let</code> does.</li>\n</ul>\n<h4>3. Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining</h4>\n<p>Consider this <code>run</code> function, inside which <code>foo</code> and <code>bar</code> have <code>function scope</code>. <code>i</code> and <code>baz</code> are scoped to the block expression.</p>\n<pre><code class=\"language-javascript\">// function and block scope in this example\nfunction run() {\n    var foo = 'Foo';\n    let bar = 'Bar';\n\n    console.log(foo, bar);\n\n    {\n        console.log(foo);\n        let baz = 'Bazz';\n        console.log(baz);\n    }\n\n    console.log(baz); // ReferenceError\n}\n\nrun();\n</code></pre>\n<p>Notice that referencing <code>baz</code> from outside it's block results in JavaScript throwing a ReferenceError.</p>\n<p>Consider this <code>run</code> function, inside of which <code>foo</code> has <code>function scope</code>.</p>\n<pre><code class=\"language-javascript\">function run() {\n    console.log(foo); // undefined\n    var foo = 'Foo';\n    console.log(foo); // Foo\n}\n\nrun();\n</code></pre>\n<p>Consider this <code>func1</code> function and it's nested scopes.</p>\n<pre><code class=\"language-javascript\">// global scope\nfunction func1(arg1) {\n    // func1 scope\n\n    return function func2(arg2) {\n        // func2 scope\n\n        return function func3(arg3) {\n            // func3 scope\n\n            console.log(arg1, arg2, arg3);\n        };\n    };\n}\n</code></pre>\n<h4>6. Implement a closure and explain how the closure effects scope</h4>\n<pre><code class=\"language-javascript\">const adder = (arg1) => {\n    return (arg2) => {\n        return arg1 + arg2;\n    };\n};\n\nconst func2 = adder(2);\nconst result = func2(2);\nconsole.log(result); // => 4;\n</code></pre>\n<h4>4. Define an arrow function</h4>\n<pre><code class=\"language-javascript\">const returnValue = (val) => val;\n</code></pre>\n<p>This simple construct will create a function that accepts <code>val</code> as a parameter, and returns <code>val</code> immediately. We do not need to type <code>return val</code>, because this is a single-line function.</p>\n<p>Identically, we could write</p>\n<pre><code class=\"language-javascript\">const returnValue = (val) => {\n    return val;\n};\n</code></pre>\n<h4>5. Given an arrow function, deduce the value of <code>this</code> without executing the code</h4>\n<pre><code class=\"language-javascript\">function fDAdder(arr) {\n    console.log(this);\n\n    return arr.reduce((acc, ele) => {\n        return acc + ele;\n    });\n}\n\nfDAdder([1, 2, 4, 6]);\n</code></pre>\n<p>If we use a <em>function declaration</em> style function, the <code>this</code> variable is set to the <code>global</code> object (i.e. <code>Object [global]</code> in Node.JS and <code>Window</code> in your browser).</p>\n<pre><code class=\"language-javascript\">const adder = (arr) => {\n    console.log(this);\n    arr.reduce((acc, ele) => (sum += ele));\n};\nadder([1, 2, 4, 6]);\n</code></pre>\n<p>In this example, we use a <em>fat arrow</em> style function. Note that when we declare a funciton like this <code>this</code> becomes</p>\n<h4>7. Define a method that references this on an object literal</h4>\n<pre><code class=\"language-javascript\">const pokemon = {\n    firstname: 'Pika',\n    lastname: 'Chu',\n    getPokeName: function () {\n        const fullname = `${this.firstname} ${this.lastname}`;\n        return fullname;\n    }\n};\n\nconsole.log(pokemon.getPokeName());\n</code></pre>\n<h4>8. Utilize the built in Function#bind on a callback to maintain the context of <code>this</code></h4>\n<pre><code class=\"language-javascript\">const pokemon = {\n    firstname: 'Pika',\n    lastname: 'Chu',\n    getPokeName: function () {\n        const fullname = `${this.firstname} ${this.lastname}`;\n        return fullname;\n    }\n};\n\nconst logPokemon = pokemon.getPokename.bind(pokemon);\n\nlogPokemon('sushi', 'algorithms'); // Pika Chu loves sushi and algorithms\n</code></pre>\n<h4>9. Given a code snippet, identify what <code>this</code> refers to</h4>\n<pre><code class=\"language-javascript\">function Person(name) {\n    // this.name = name;\n    // let that = this;\n\n    setTimeout(function () {\n        // console.log(this); // => Window\n        // console.log(that); // => [Function] => Person\n        // this.sayName(); // => no method error\n        that.sayName();\n    }, 1000);\n}\n\nPerson.prototype.sayName = function () {\n    console.log(this.name);\n};\n\nconst jane = new Person('Jane');\n</code></pre>"
                },
                {
                    "url": "/docs/articles/python/",
                    "relativePath": "docs/articles/python.md",
                    "relativeDir": "docs/articles",
                    "base": "python.md",
                    "name": "python",
                    "frontmatter": {
                        "title": "lorem-ipsum",
                        "weight": 0,
                        "excerpt": "lorem-ipsum",
                        "seo": { "title": "", "description": "", "robots": [], "extra": [], "type": "stackbit_page_meta" },
                        "template": "docs"
                    },
                    "html": "<h2>Lorem ipsum</h2>\n<p>Lorem ipsum dolor sit amet, <strong>consectetur adipiscing elit</strong>, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n<ul>\n<li>Lorem ipsum</li>\n<li>dolor sit amet</li>\n</ul>"
                },
                {
                    "url": "/docs/faq/contact/",
                    "relativePath": "docs/faq/contact.md",
                    "relativeDir": "docs/faq",
                    "base": "contact.md",
                    "name": "contact",
                    "frontmatter": {
                        "title": "lorem-ipsum",
                        "sections": [],
                        "seo": { "title": "", "description": "", "robots": [], "extra": [], "type": "stackbit_page_meta" },
                        "template": "advanced"
                    },
                    "html": ""
                },
                {
                    "url": "/docs/articles/algo/",
                    "relativePath": "docs/articles/algo.md",
                    "relativeDir": "docs/articles",
                    "base": "algo.md",
                    "name": "algo",
                    "frontmatter": {
                        "title": "ds-algo-overview",
                        "subtitle": "The ds-algo-overview provides you with a blueprint of default post and page styles.",
                        "image": "images/5.jpg",
                        "seo": {
                            "title": "ds-algo-overview",
                            "description": "A reference for suggested typographic treatment and styles for your content",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "ds-algo-overview", "keyName": "property" },
                                {
                                    "name": "og:description",
                                    "value": "A reference for suggested typographic treatment and styles for your content",
                                    "keyName": "property"
                                },
                                { "name": "og:image", "value": "images/5.jpg", "keyName": "property", "relativeUrl": true },
                                { "name": "twitter:card", "value": "summary_large_image" },
                                { "name": "twitter:title", "value": "ds-algo-overview" },
                                { "name": "twitter:description", "value": "A reference for suggested typographic treatment and styles for your content" },
                                { "name": "twitter:image", "value": "images/5.jpg", "relativeUrl": true }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<h1>Fundamental Data Structures In JavaScript</h1>\n<p>Fundamental Data Structures In JavaScript</p>\n<h2>Data structures in JavaScript</h2>\n<p>Here's a website I created to practice data structures!\n<a href=\"https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/\"><strong>directory</strong>\n<em>Edit description</em>ds-algo-official-c3dw6uapg-bgoonz.vercel.app</a></p>\n<p>Here's the repo that the website is built on:\n<a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\"><strong>bgoonz/DS-ALGO-OFFICIAL</strong>\n<em>Navigation ####Author:Bryan Guner Big O notation is the language we use for talking about how long an algorithm takes…</em>github.com</a></p>\n<h2>Resources (article content below):</h2>\n<h3>Videos</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=0IAPZzGSbME&#x26;list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&#x26;index=2&#x26;t=0s\">Abdul Bari: YouTubeChannel for Algorithms</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=lxja8wBwN0k&#x26;list=PLKKfKV1b9e8ps6dD3QA5KFfHdiWj9cB1s\">Data Structures and algorithms</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLmGElG-9wxc9Us6IK6Qy-KHlG_F3IS6Q9\">Data Structures and algorithms Course</a></li>\n<li><a href=\"https://www.khanacademy.org/computing/computer-science/algorithms\">Khan Academy</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\">Data structures by mycodeschool</a>Pre-requisite for this lesson is good understanding of pointers in C.</li>\n<li><a href=\"https://www.youtube.com/watch?v=HtSuA80QTyo&#x26;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">MIT 6.006: Intro to Algorithms(2011)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=5_5oE5lgrhw&#x26;list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi\">Data Structures and Algorithms by Codewithharry</a></li>\n</ul>\n<h3>Books</h3>\n<ul>\n<li><a href=\"https://edutechlearners.com/download/Introduction_to_algorithms-3rd%20Edition.pdf\">Introduction to Algorithms</a> by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein</li>\n<li><a href=\"http://www.sso.sy/sites/default/files/competitive%20programming%203_1.pdf\">Competitive Programming 3</a> by Steven Halim and Felix Halim</li>\n<li><a href=\"https://cses.fi/book/book.pdf\">Competitive Programmers Hand Book</a> Beginner friendly hand book for competitive programmers.</li>\n<li><a href=\"https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Data%20Structures%20and%20Algorithms%20-%20Narasimha%20Karumanchi.pdf\">Data Structures and Algorithms Made Easy</a> by Narasimha Karumanchi</li>\n<li><a href=\"https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Learning%20Algorithms%20Through%20Programming%20and%20Puzzle%20Solving.pdf\">Learning Algorithms Through Programming and Puzzle Solving</a> by Alexander Kulikov and Pavel Pevzner</li>\n</ul>\n<h3>Coding practice</h3>\n<ul>\n<li><a href=\"https://leetcode.com/\">LeetCode</a></li>\n<li><a href=\"https://www.interviewbit.com/\">InterviewBit</a></li>\n<li><a href=\"https://codility.com/\">Codility</a></li>\n<li><a href=\"https://www.hackerrank.com/\">HackerRank</a></li>\n<li><a href=\"https://projecteuler.net/\">Project Euler</a></li>\n<li><a href=\"https://spoj.com/\">Spoj</a></li>\n<li><a href=\"https://code.google.com/codejam/contests.html\">Google Code Jam practice problems</a></li>\n<li><a href=\"https://www.hackerearth.com/\">HackerEarth</a></li>\n<li><a href=\"https://www.topcoder.com/\">Top Coder</a></li>\n<li><a href=\"https://www.codechef.com/\">CodeChef</a></li>\n<li><a href=\"https://www.codewars.com/\">Codewars</a></li>\n<li><a href=\"https://codesignal.com/\">CodeSignal</a></li>\n<li><a href=\"http://codekata.com/\">CodeKata</a></li>\n<li><a href=\"https://www.firecode.io/\">Firecode</a></li>\n</ul>\n<h3>Courses</h3>\n<ul>\n<li><a href=\"https://academy.zerotomastery.io/p/master-the-coding-interview-faang-interview-prep\">Master the Coding Interview: Big Tech (FAANG) Interviews</a> Course by Andrei and his team.</li>\n<li><a href=\"https://realpython.com/python-data-structures\">Common Python Data Structures</a> Data structures are the fundamental constructs around which you build your programs. Each data structure provides a particular way of organizing data so it can be accessed efficiently, depending on your use case. Python ships with an extensive set of data structures in its standard library.</li>\n<li><a href=\"https://www.geeksforgeeks.org/fork-cpp-course-structure\">Fork CPP</a> A good course for beginners.</li>\n<li><a href=\"https://codeforces.com/edu/course/2\">EDU</a> Advanced course.</li>\n<li><a href=\"https://www.udacity.com/course/c-for-programmers--ud210\">C++ For Programmers</a> Learn features and constructs for C++.</li>\n</ul>\n<h3>Guides</h3>\n<ul>\n<li><a href=\"http://www.geeksforgeeks.org/\">GeeksForGeeks — A CS portal for geeks</a></li>\n<li><a href=\"https://www.learneroo.com/subjects/8\">Learneroo — Algorithms</a></li>\n<li><a href=\"http://www.topcoder.com/tc?d1=tutorials&#x26;d2=alg_index&#x26;module=Static\">Top Coder tutorials</a></li>\n<li><a href=\"http://www.infoarena.ro/training-path\">Infoarena training path</a> (RO)</li>\n<li>Steven &#x26; Felix Halim — <a href=\"https://uva.onlinejudge.org/index.php?option=com_onlinejudge&#x26;Itemid=8&#x26;category=118\">Increasing the Lower Bound of Programming Contests</a> (UVA Online Judge)</li>\n</ul>\n<h2><strong><em>space</em></strong></h2>\n<blockquote>\n<p><em>The space complexity represents the memory consumption of a data structure. As for most of the things in life, you can't have it all, so it is with the data structures. You will generally need to trade some time for space or the other way around.</em></p>\n</blockquote>\n<h2><em>time</em></h2>\n<blockquote>\n<p><em>The time complexity for a data structure is in general more diverse than its space complexity.</em></p>\n</blockquote>\n<h2><em>Several operations</em></h2>\n<blockquote>\n<p><em>In contrary to algorithms, when you look at the time complexity for data structures you need to express it for several operations that you can do with data structures. It can be adding elements, deleting elements, accessing an element or even searching for an element.</em></p>\n</blockquote>\n<h2><em>Dependent on data</em></h2>\n<blockquote>\n<p><em>Something that data structure and algorithms have in common when talking about time complexity is that they are both dealing with data. When you deal with data you become dependent on them and as a result the time complexity is also dependent of the data that you received. To solve this problem we talk about 3 different time complexity.</em></p>\n</blockquote>\n<ul>\n<li><strong>The best-case complexity: when the data looks the best</strong></li>\n<li><strong>The worst-case complexity: when the data looks the worst</strong></li>\n<li><strong>The average-case complexity: when the data looks average</strong></li>\n</ul>\n<h2>Big O notation</h2>\n<p>The complexity is usually expressed with the Big O notation. The wikipedia page about this subject is pretty complex but you can find here a good summary of the different complexity for the most famous data structures and sorting algorithms.</p>\n<h2>The Array data structure</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*Qk3UYgeqXamRrFLR.gif\"></p>\n<h2>Definition</h2>\n<p>An Array data structure, or simply an Array, is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. The simplest type of data structure is a linear array, also called one-dimensional array. From Wikipedia</p>\n<p>Arrays are among the oldest and most important data structures and are used by every program. They are also used to implement many other data structures.</p>\n<p><em>Complexity</em>\n<em>Average</em>\n<em>Access Search Insertion Deletion</em></p>\n<p>O(1) O(n) O(1) O(n)</p>\n<pre><code class=\"language-js\">class ArrayADT {\n    constructor() {\n        this.array = [];\n    }\n\n    add(data) {\n        this.array.push(data);\n    }\n\n    remove(data) {\n        this.array = this.array.filter((current) => current !== data);\n    }\n\n    search(data) {\n        const foundIndex = this.array.indexOf(data);\n        if (foundIndex === -1) {\n            return foundIndex;\n        }\n\n        return null;\n    }\n\n    getAtIndex(index) {\n        return this.array[index];\n    }\n\n    length() {\n        return this.array.length;\n    }\n\n    print() {\n        console.log(this.array.join(' '));\n    }\n}\n\nconst array = new ArrayADT();\nconsole.log('const array = new ArrayADT();: ', array);\nconsole.log('-------------------------------');\n\nconsole.log('array.add(1): ', array.add(1));\narray.add(3);\narray.add(4);\nconsole.log('array.add(2);: ', array.add(2), 'array.add(3);', array.add(3), 'array.add(4); ', array.add(4));\n\nconsole.log('-------------------------------');\narray.print();\nconsole.log('-------------------------------');\n\nconsole.log('search 3 gives index 2:', array.search(3));\nconsole.log('-------------------------------');\n\nconsole.log('getAtIndex 2 gives 3:', array.getAtIndex(2));\nconsole.log('-------------------------------');\n\nconsole.log('length is 4:', array.length());\nconsole.log('-------------------------------');\n\narray.remove(3);\narray.print();\nconsole.log('-------------------------------');\n\narray.add(5);\narray.add(5);\narray.print();\nconsole.log('-------------------------------');\n\narray.remove(5);\narray.print();\nconsole.log('-------------------------------');\n/*\n     ~ final : (master) node 01-array.js \n    const array = new ArrayADT();:  ArrayADT { array: [] }\n    -------------------------------\n    array.add(1):  undefined\n    array.add(2);:  undefined array.add(3); undefined array.add(4);  undefined\n    -------------------------------\n    1 3 4 2 3 4\n    -------------------------------\n    search 3 gives index 2: null\n    -------------------------------\n    getAtIndex 2 gives 3: 4\n    -------------------------------\n    length is 4: 6\n    -------------------------------\n    1 4 2 4\n    -------------------------------\n    1 4 2 4 5 5\n    -------------------------------\n    1 4 2 4\n    -------------------------------\n     ~ final : (master) \n     */\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*-BJ2hU-CZO2kuzu4x5a53g.png\"></p>\n<p>indexvalue0 … this is the first value, stored at zero position</p>\n<ol>\n<li>The index of an array <strong>runs in sequence</strong></li>\n<li>This could be useful for storing data that are required to be ordered, such as rankings or queues</li>\n<li>In JavaScript, array's value could be mixed; meaning value of each index could be of different data, be it String, Number or even Objects</li>\n</ol>\n<pre><code class=\"language-js\">    // 1. Creating Arrays\n    let firstArray = [\"a\",\"b\",\"c\"];\n    let secondArray = [\"d\",\"e\",\"f\"];\n\n    // 2. Access an Array Item\n    console.log(firstArray[0]); // Results: \"a\"\n\n    // 3. Loop over an Array\n    firstArray.forEach(function(item, index, array){\n        console.log(item, index);\n    });\n    // Results:\n    // a 0\n    // b 1\n    // c 2\n\n    // 4. Add new item to END of array\n    secondArray.push('g');\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\", \"g\"]\n\n    // 5. Remove item from END of array\n    secondArray.pop();\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\"]\n\n    // 6. Remove item from FRONT of array\n    secondArray.shift();\n    console.log(secondArray);\n    // Results: [\"e\",\"f\"]\n\n    // 7. Add item to FRONT of array\n    secondArray.unshift(\"d\");\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\"]\n\n    // 8. Find INDEX of an item in array\n    let position = secondArray.indexOf('f');\n    // Results: 2\n\n    // 9. Remove Item by Index Position\n    secondArray.splice(position, 1);\n    console.log(secondArray);\n    // Note, the second argument, in this case \"1\",\n    // represent the number of array elements to be removed\n    // Results:  [\"d\",\"e\"]\n\n    // 10. Copy an Array\n    let shallowCopy = secondArray.slice();\n    console.log(secondArray);\n    console.log(shallowCopy);\n    // Results: ShallowCopy === [\"d\",\"e\"]\n\n    // 11. JavaScript properties that BEGIN with a digit MUST be accessed using bracket notation\n    renderer.3d.setTexture(model, 'character.png');     // a syntax error\n    renderer['3d'].setTexture(model, 'character.png');  // works properly\n\n\n    // 12. Combine two Arrays\n    let thirdArray = firstArray.concat(secondArray);\n    console.log(thirdArray);\n    // [\"a\",\"b\",\"c\", \"d\", \"e\"];\n\n    // 13. Combine all Array elements into a string\n    console.log(thirdArray.join()); // Results: a,b,c,d,e\n    console.log(thirdArray.join('')); // Results: abcde\n    console.log(thirdArray.join('-')); // Results: a-b-c-d-e\n\n    // 14. Reversing an Array (in place, i.e. destructive)\n    console.log(thirdArray.reverse()); // [\"e\", \"d\", \"c\", \"b\", \"a\"]\n\n    // 15. sort\n    let unsortedArray = [\"Alphabet\", \"Zoo\", \"Products\", \"Computer Science\", \"Computer\"];\n    console.log(unsortedArray.sort());\n    // Results: [\"Alphabet\", \"Computer\", \"Computer Science\", \"Products\", \"Zoo\" ]\n</code></pre>\n<h2>2. Objects</h2>\n<p>Think of objects as a logical grouping of a bunch of properties.</p>\n<p>Properties could be some variable that it's storing or some methods that it's using.</p>\n<p>I also visualize an object as a table.</p>\n<p>The main difference is that object's \"index\" need not be numbers and is not necessarily sequenced.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2572/1*KVZkD2zrgEa_47igW8Hq8g.png\"></p>\n<pre><code class=\"language-js\">// 16. Creating an Object\n\nlet newObj = {\n    name: \"I'm an object\",\n    values: [1, 10, 11, 20],\n    others: '',\n    '1property': 'example of property name starting with digit'\n};\n\n// 17. Figure out what keys/properties are in an object\nconsole.log(Object.keys(newObj));\n// Results: [ 'name', 'values', 'others', '1property' ]\n\n// 18. Show all values stored in the object\nconsole.log(Object.values(newObj));\n\n// Results:\n// [ 'I\\'m an object',\n//   [ 1, 10, 11, 20 ],\n//   '',\n//   'example of property name starting with digit' ]\n\n// 19. Show all key and values of the object\nfor (let [key, value] of Object.entries(newObj)) {\n    console.log(`${key}: ${value}`);\n}\n// Results:\n// name: I'm an object\n// values: 1,10,11,20\n// others:\n// 1property: example of property name starting with digit\n\n// 20. Accessing Object's Properties\n// Two different ways to access properties, both produce same results\nconsole.log(newObj.name);\nconsole.log(newObj['name']);\n\n// But if the property name starts with a digit,\n// we CANNOT use dot notation\nconsole.log(newObj['1property']);\n\n// 21. Adding a Method to an Object\nnewObj.helloWorld = function () {\n    console.log('Hello World from inside an object!');\n};\n\n// 22. Invoking an Object's Method\nnewObj.helloWorld();\n</code></pre>\n<h2>The Hash Table</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*avbxLAFocSV6vsl5.gif\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2048/0*3GJiRoLyEoZ_aIlO\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Hash Table (Hash Map) is a data structure used to implement an associative array, a structure that can map keys to values. A Hash Table uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. From Wikipedia</em></p>\n</blockquote>\n<p>Hash Tables are considered the more efficient data structure for lookup and for this reason, they are widely used.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion</p>\n<ul>\n<li>\n<p>O(1) O(1) O(1)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n</li>\n</ul>\n<p>Note, here I am storing another object for every hash in my Hash Table.</p>\n<pre><code class=\"language-js\">class HashTable {\n    constructor(size) {\n        this.values = {};\n        this.numberOfValues = 0;\n        this.size = size;\n    }\n    add(key, value) {\n        let hash = this.calculateHash(key);\n        if (!this.values.hasOwnProperty(hash)) {\n            this.values[hash] = {};\n        }\n        if (!this.values[hash].hasOwnProperty(key)) {\n            this.numberOfValues++;\n        }\n        this.values[hash][key] = value;\n    }\n    remove(key) {\n        let hash = this.calculateHash(key);\n        if (this.values.hasOwnProperty(hash) &#x26;&#x26; this.values[hash].hasOwnProperty(key)) {\n            delete this.values[hash][key];\n            this.numberOfValues--;\n        }\n    }\n    calculateHash(key) {\n        return key.toString().length % this.size;\n    }\n    search(key) {\n        let hash = this.calculateHash(key);\n        if (this.values.hasOwnProperty(hash) &#x26;&#x26; this.values[hash].hasOwnProperty(key)) {\n            return this.values[hash][key];\n        } else {\n            return null;\n        }\n    }\n    length() {\n        return this.numberOfValues;\n    }\n    print() {\n        let string = '';\n        for (let value in this.values) {\n            for (let key in this.values[value]) {\n                string += this.values[value][key] + ' ';\n            }\n        }\n        console.log(string.trim());\n    }\n}\nlet hashTable = new HashTable(3);\nhashTable.add('first', 1);\nhashTable.add('second', 2);\nhashTable.add('third', 3);\nhashTable.add('fourth', 4);\nhashTable.add('fifth', 5);\nhashTable.print(); // => 2 4 1 3 5\nconsole.log('length gives 5:', hashTable.length()); // => 5\nconsole.log('search second gives 2:', hashTable.search('second')); // => 2\nhashTable.remove('fourth');\nhashTable.remove('first');\nhashTable.print(); // => 2 3 5\nconsole.log('length gives 3:', hashTable.length()); // => 3\n/*\n       ~ js-files : (master) node hash.js \n    2 4 1 3 5\n    length gives 5: 5\n    search second gives 2: 2\n    2 3 5\n    length gives 3: 3\n    */\n</code></pre>\n<h2>The Set</h2>\n<h2>Sets</h2>\n<p>Sets are pretty much what it sounds like. It's the same intuition as Set in Mathematics. I visualize Sets as Venn Diagrams.</p>\n<pre><code class=\"language-js\">// 23. Creating a new Set\nlet newSet = new Set();\n\n// 24. Adding new elements to a set\nnewSet.add(1); // Set[1]\nnewSet.add('text'); // Set[1, \"text\"]\n\n// 25. Check if element is in set\nnewSet.has(1); // true\n\n// 24. Check size of set\nconsole.log(newSet.size); // Results: 2\n\n// 26. Delete element from set\nnewSet.delete(1); // Set[\"text\"]\n\n// 27. Set Operations: isSuperSet\nfunction isSuperset(set, subset) {\n    for (let elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n// 28. Set Operations: union\nfunction union(setA, setB) {\n    let _union = new Set(setA);\n    for (let elem of setB) {\n        _union.add(elem);\n    }\n    return _union;\n}\n\n// 29. Set Operations: intersection\nfunction intersection(setA, setB) {\n    let _intersection = new Set();\n    for (let elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n// 30. Set Operations: symmetricDifference\nfunction symmetricDifference(setA, setB) {\n    let _difference = new Set(setA);\n    for (let elem of setB) {\n        if (_difference.has(elem)) {\n            _difference.delete(elem);\n        } else {\n            _difference.add(elem);\n        }\n    }\n    return _difference;\n}\n// 31. Set Operations: difference\nfunction difference(setA, setB) {\n    let _difference = new Set(setA);\n    for (let elem of setB) {\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n\n// Examples\nlet setA = new Set([1, 2, 3, 4]);\nlet setB = new Set([2, 3]);\nlet setC = new Set([3, 4, 5, 6]);\n\nconsole.log(isSuperset(setA, setB)); // => true\nconsole.log(union(setA, setC)); // => Set [1, 2, 3, 4, 5, 6]\nconsole.log(intersection(setA, setC)); // => Set [3, 4]\nconsole.log(symmetricDifference(setA, setC)); // => Set [1, 2, 5, 6]\nconsole.log(difference(setA, setC)); // => Set [1, 2]\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*gOE33ANZP2ujbjIG\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Set is an abstract data type that can store certain values, without any particular order, and no repeated values. It is a computer implementation of the mathematical concept of a finite Set. From Wikipedia</em></p>\n</blockquote>\n<p>The Set data structure is usually used to test whether elements belong to set of values. Rather then only containing elements, Sets are more used to perform operations on multiple values at once with methods such as union, intersect, etc…</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion</p>\n<ul>\n<li>\n<p>O(n) O(n) O(n)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"language-js\">function Set() {\n    this.values = [];\n    this.numberOfValues = 0;\n}\n\nSet.prototype.add = function (value) {\n    if (!~this.values.indexOf(value)) {\n        this.values.push(value);\n        this.numberOfValues++;\n    }\n};\nSet.prototype.remove = function (value) {\n    let index = this.values.indexOf(value);\n    if (~index) {\n        this.values.splice(index, 1);\n        this.numberOfValues--;\n    }\n};\nSet.prototype.contains = function (value) {\n    return this.values.indexOf(value) !== -1;\n};\nSet.prototype.union = function (set) {\n    let newSet = new Set();\n    set.values.forEach(function (value) {\n        newSet.add(value);\n    });\n    this.values.forEach(function (value) {\n        newSet.add(value);\n    });\n    return newSet;\n};\nSet.prototype.intersect = function (set) {\n    let newSet = new Set();\n    this.values.forEach(function (value) {\n        if (set.contains(value)) {\n            newSet.add(value);\n        }\n    });\n    return newSet;\n};\nSet.prototype.difference = function (set) {\n    let newSet = new Set();\n    this.values.forEach(function (value) {\n        if (!set.contains(value)) {\n            newSet.add(value);\n        }\n    });\n    return newSet;\n};\nSet.prototype.isSubset = function (set) {\n    return set.values.every(function (value) {\n        return this.contains(value);\n    }, this);\n};\nSet.prototype.length = function () {\n    return this.numberOfValues;\n};\nSet.prototype.print = function () {\n    console.log(this.values.join(' '));\n};\n\nlet set = new Set();\nset.add(1);\nset.add(2);\nset.add(3);\nset.add(4);\nset.print(); // => 1 2 3 4\nset.remove(3);\nset.print(); // => 1 2 4\nconsole.log('contains 4 is true:', set.contains(4)); // => true\nconsole.log('contains 3 is false:', set.contains(3)); // => false\nconsole.log('---');\nlet set1 = new Set();\nset1.add(1);\nset1.add(2);\nlet set2 = new Set();\nset2.add(2);\nset2.add(3);\nlet set3 = set2.union(set1);\nset3.print(); // => 1 2 3\nlet set4 = set2.intersect(set1);\nset4.print(); // => 2\nlet set5 = set.difference(set3); // 1 2 4 diff 1 2 3\nset5.print(); // => 4\nlet set6 = set3.difference(set); // 1 2 3 diff 1 2 4\nset6.print(); // => 3\nconsole.log('set1 subset of set is true:', set.isSubset(set1)); // => true\nconsole.log('set2 subset of set is false:', set.isSubset(set2)); // => false\nconsole.log('set1 length gives 2:', set1.length()); // => 2\nconsole.log('set3 length gives 3:', set3.length()); // => 3\n</code></pre>\n<h2>The Singly Linked List</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2048/0*fLs64rV-Xq19aVCA.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Singly Linked List is a linear collection of data elements, called nodes pointing to the next node by means of pointer. It is a data structure consisting of a group of nodes which together represent a sequence. Under the simplest form, each node is composed of data and a reference (in other words, a link) to the next node in the sequence.</em></p>\n</blockquote>\n<p>Linked Lists are among the simplest and most common data structures because it allows for efficient insertion or removal of elements from any position in the sequence.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code class=\"language-js\">function Node(data) {\n    this.data = data;\n    this.next = null;\n}\n\nfunction SinglyLinkedList() {\n    this.head = null;\n    this.tail = null;\n    this.numberOfValues = 0;\n}\n\nSinglyLinkedList.prototype.add = function (data) {\n    let node = new Node(data);\n    if (!this.head) {\n        this.head = node;\n        this.tail = node;\n    } else {\n        this.tail.next = node;\n        this.tail = node;\n    }\n    this.numberOfValues++;\n};\nSinglyLinkedList.prototype.remove = function (data) {\n    let previous = this.head;\n    let current = this.head;\n    while (current) {\n        if (current.data === data) {\n            if (current === this.head) {\n                this.head = this.head.next;\n            }\n            if (current === this.tail) {\n                this.tail = previous;\n            }\n            previous.next = current.next;\n            this.numberOfValues--;\n        } else {\n            previous = current;\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.insertAfter = function (data, toNodeData) {\n    let current = this.head;\n    while (current) {\n        if (current.data === toNodeData) {\n            let node = new Node(data);\n            if (current === this.tail) {\n                this.tail.next = node;\n                this.tail = node;\n            } else {\n                node.next = current.next;\n                current.next = node;\n            }\n            this.numberOfValues++;\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.traverse = function (fn) {\n    let current = this.head;\n    while (current) {\n        if (fn) {\n            fn(current);\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.length = function () {\n    return this.numberOfValues;\n};\nSinglyLinkedList.prototype.print = function () {\n    let string = '';\n    let current = this.head;\n    while (current) {\n        string += current.data + ' ';\n        current = current.next;\n    }\n    console.log(string.trim());\n};\n\nlet singlyLinkedList = new SinglyLinkedList();\nsinglyLinkedList.print(); // => ''\nsinglyLinkedList.add(1);\nsinglyLinkedList.add(2);\nsinglyLinkedList.add(3);\nsinglyLinkedList.add(4);\nsinglyLinkedList.print(); // => 1 2 3 4\nconsole.log('length is 4:', singlyLinkedList.length()); // => 4\nsinglyLinkedList.remove(3); // remove value\nsinglyLinkedList.print(); // => 1 2 4\nsinglyLinkedList.remove(9); // remove non existing value\nsinglyLinkedList.print(); // => 1 2 4\nsinglyLinkedList.remove(1); // remove head\nsinglyLinkedList.print(); // => 2 4\nsinglyLinkedList.remove(4); // remove tail\nsinglyLinkedList.print(); // => 2\nconsole.log('length is 1:', singlyLinkedList.length()); // => 1\nsinglyLinkedList.add(6);\nsinglyLinkedList.print(); // => 2 6\nsinglyLinkedList.insertAfter(3, 2);\nsinglyLinkedList.print(); // => 2 3 6\nsinglyLinkedList.insertAfter(4, 3);\nsinglyLinkedList.print(); // => 2 3 4 6\nsinglyLinkedList.insertAfter(5, 9); // insertAfter a non existing node\nsinglyLinkedList.print(); // => 2 3 4 6\nsinglyLinkedList.insertAfter(5, 4);\nsinglyLinkedList.insertAfter(7, 6); // insertAfter the tail\nsinglyLinkedList.print(); // => 2 3 4 5 6 7\nsinglyLinkedList.add(8); // add node with normal method\nsinglyLinkedList.print(); // => 2 3 4 5 6 7 8\nconsole.log('length is 7:', singlyLinkedList.length()); // => 7\nsinglyLinkedList.traverse(function (node) {\n    node.data = node.data + 10;\n});\nsinglyLinkedList.print(); // => 12 13 14 15 16 17 18\nsinglyLinkedList.traverse(function (node) {\n    console.log(node.data);\n}); // => 12 13 14 15 16 17 18\nconsole.log('length is 7:', singlyLinkedList.length()); // => 7\n</code></pre>\n<h2>The Doubly Linked List</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*TQXiR-L_itiG3WP-.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Doubly Linked List is a linked data structure that consists of a set of sequentially linked records called nodes. Each node contains two fields, called links, that are references to the previous and to the next node in the sequence of nodes. From Wikipedia</em></p>\n</blockquote>\n<p>Having two node links allow traversal in either direction but adding or removing a node in a doubly linked list requires changing more links than the same operations on a Singly Linked List.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>class Node {\n    constructor(data) {\n        this.data = data;\n        this.previous = null;\n        this.next = null;\n    }\n}\nclass DoublyLinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.numberOfValues = 0;\n    }\n\n    add(data) {\n        let node = new Node(data);\n        if (!this.head) {\n            this.head = node;\n            this.tail = node;\n        } else {\n            node.previous = this.tail;\n            this.tail.next = node;\n            this.tail = node;\n        }\n        this.numberOfValues++;\n    }\n    remove(data) {\n        let current = this.head;\n        while (current) {\n            if (current.data === data) {\n                if (current === this.head &#x26;&#x26; current === this.tail) {\n                    this.head = null;\n                    this.tail = null;\n                } else if (current === this.head) {\n                    this.head = this.head.next;\n                    this.head.previous = null;\n                } else if (current === this.tail) {\n                    this.tail = this.tail.previous;\n                    this.tail.next = null;\n                } else {\n                    current.previous.next = current.next;\n                    current.next.previous = current.previous;\n                }\n                this.numberOfValues--;\n            }\n            current = current.next;\n        }\n    }\n    insertAfter(data, toNodeData) {\n        let current = this.head;\n        while (current) {\n            if (current.data === toNodeData) {\n                let node = new Node(data);\n                if (current === this.tail) {\n                    this.add(data);\n                } else {\n                    current.next.previous = node;\n                    node.previous = current;\n                    node.next = current.next;\n                    current.next = node;\n                    this.numberOfValues++;\n                }\n            }\n            current = current.next;\n        }\n    }\n    traverse(fn) {\n        let current = this.head;\n        while (current) {\n            if (fn) {\n                fn(current);\n            }\n            current = current.next;\n        }\n    }\n    traverseReverse(fn) {\n        let current = this.tail;\n        while (current) {\n            if (fn) {\n                fn(current);\n            }\n            current = current.previous;\n        }\n    }\n    length() {\n        return this.numberOfValues;\n    }\n    print() {\n        let string = \"\";\n        let current = this.head;\n        while (current) {\n            string += current.data + \" \";\n            current = current.next;\n        }\n        console.log(string.trim());\n    }\n}\n\nlet doublyLinkedList = new DoublyLinkedList();\ndoublyLinkedList.print(); // => ''\ndoublyLinkedList.add(1);\ndoublyLinkedList.add(2);\ndoublyLinkedList.add(3);\ndoublyLinkedList.add(4);\ndoublyLinkedList.print(); // => 1 2 3 4\nconsole.log(\"length is 4:\", doublyLinkedList.length()); // => 4\ndoublyLinkedList.remove(3); // remove value\ndoublyLinkedList.print(); // => 1 2 4\ndoublyLinkedList.remove(9); // remove non existing value\ndoublyLinkedList.print(); // => 1 2 4\ndoublyLinkedList.remove(1); // remove head\ndoublyLinkedList.print(); // => 2 4\ndoublyLinkedList.remove(4); // remove tail\ndoublyLinkedList.print(); // => 2\nconsole.log(\"length is 1:\", doublyLinkedList.length()); // => 1\ndoublyLinkedList.remove(2); // remove tail, the list should be empty\ndoublyLinkedList.print(); // => ''\nconsole.log(\"length is 0:\", doublyLinkedList.length()); // => 0\ndoublyLinkedList.add(2);\ndoublyLinkedList.add(6);\ndoublyLinkedList.print(); // => 2 6\ndoublyLinkedList.insertAfter(3, 2);\ndoublyLinkedList.print(); // => 2 3 6\ndoublyLinkedList.traverseReverse(function (node) {\n    console.log(node.data);\n});\ndoublyLinkedList.insertAfter(4, 3);\ndoublyLinkedList.print(); // => 2 3 4 6\ndoublyLinkedList.insertAfter(5, 9); // insertAfter a non existing node\ndoublyLinkedList.print(); // => 2 3 4 6\ndoublyLinkedList.insertAfter(5, 4);\ndoublyLinkedList.insertAfter(7, 6); // insertAfter the tail\ndoublyLinkedList.print(); // => 2 3 4 5 6 7\ndoublyLinkedList.add(8); // add node with normal method\ndoublyLinkedList.print(); // => 2 3 4 5 6 7 8\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\ndoublyLinkedList.traverse(function (node) {\n    node.data = node.data + 10;\n});\ndoublyLinkedList.print(); // => 12 13 14 15 16 17 18\ndoublyLinkedList.traverse(function (node) {\n    console.log(node.data);\n}); // => 12 13 14 15 16 17 18\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\ndoublyLinkedList.traverseReverse(function (node) {\n    console.log(node.data);\n}); // => 18 17 16 15 14 13 12\ndoublyLinkedList.print(); // => 12 13 14 15 16 17 18\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\n/*\n   ~ js-files : (master) node double-linked-list.js\n\n1 2 3 4\nlength is 4: 4\n1 2 4\n1 2 4\n2 4\n2\nlength is 1: 1\n\nlength is 0: 0\n2 6\n2 3 6\n6\n3\n2\n2 3 4 6\n2 3 4 6\n2 3 4 5 6 7\n2 3 4 5 6 7 8\nlength is 7: 7\n12 13 14 15 16 17 18\n12\n13\n14\n15\n16\n17\n18\nlength is 7: 7\n18\n17\n16\n15\n14\n13\n12\n12 13 14 15 16 17 18\nlength is 7: 7\n ~ js-files : (master)\n*/\n</code></pre>\n<h2>The Stack</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/4050/0*qsjYW-Lvfo22ecLE.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Stack is an abstract data type that serves as a collection of elements, with two principal operations: push, which adds an element to the collection, and pop, which removes the most recently added element that was not yet removed. The order in which elements come off a Stack gives rise to its alternative name, LIFO (for last in, first out). From Wikipedia</em></p>\n</blockquote>\n<p>A Stack often has a third method peek which allows to check the last pushed element without popping it.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>function Stack() {\n  this.stack = [];\n}\n\nStack.prototype.push = function(value) {\n  this.stack.push(value);\n};\nStack.prototype.pop = function() {\n  return this.stack.pop();\n};\nStack.prototype.peek = function() {\n  return this.stack[this.stack.length - 1];\n};\nStack.prototype.length = function() {\n  return this.stack.length;\n};\nStack.prototype.print = function() {\n  console.log(this.stack.join(' '));\n};\n\nlet stack = new Stack();\nstack.push(1);\nstack.push(2);\nstack.push(3);\nstack.print(); // => 1 2 3\nconsole.log('length is 3:', stack.length()); // => 3\nconsole.log('peek is 3:', stack.peek()); // => 3\nconsole.log('pop is 3:', stack.pop()); // => 3\nstack.print(); // => 1 2\nconsole.log('pop is 2:', stack.pop());  // => 2\nconsole.log('length is 1:', stack.length()); // => 1\nconsole.log('pop is 1:', stack.pop()); // => 1\nstack.print(); // => ''\nconsole.log('peek is undefined:', stack.peek()); // => undefined\nconsole.log('pop is undefined:', stack.pop()); // => undefined\n</code></pre>\n<h2>The Queue</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/4050/0*YvfuX5tKP7-V0p7v.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Queue is a particular kind of abstract data type or collection in which the entities in the collection are kept in order and the principal operations are the addition of entities to the rear terminal position, known as enqueue, and removal of entities from the front terminal position, known as dequeue. This makes the Queue a First-In-First-Out (FIFO) data structure. In a FIFO data structure, the first element added to the Queue will be the first one to be removed.</em></p>\n</blockquote>\n<p>As for the Stack data structure, a peek operation is often added to the Queue data structure. It returns the value of the front element without dequeuing it.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(n)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>function Queue() {\n  this.queue = [];\n}\n\nQueue.prototype.enqueue = function(value) {\n  this.queue.push(value);\n};\nQueue.prototype.dequeue = function() {\n  return this.queue.shift();\n};\nQueue.prototype.peek = function() {\n  return this.queue[0];\n};\nQueue.prototype.length = function() {\n  return this.queue.length;\n};\nQueue.prototype.print = function() {\n  console.log(this.queue.join(' '));\n};\n\nlet queue = new Queue();\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nqueue.print(); // => 1 2 3\nconsole.log('length is 3:', queue.length()); // => 3\nconsole.log('peek is 1:', queue.peek()); // => 3\nconsole.log('dequeue is 1:', queue.dequeue()); // => 1\nqueue.print(); // => 2 3\nconsole.log('dequeue is 2:', queue.dequeue());  // => 2\nconsole.log('length is 1:', queue.length()); // => 1\nconsole.log('dequeue is 3:', queue.dequeue()); // => 3\nqueue.print(); // => ''\nconsole.log('peek is undefined:', queue.peek()); // => undefined\nconsole.log('dequeue is undefined:', queue.dequeue()); // => undefined\n</code></pre>\n<h2>The Tree</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*yUiQ-NaPKeLQnN7n\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Tree is a widely used data structure that simulates a hierarchical tree structure, with a root value and subtrees of children with a parent node. A tree data structure can be defined recursively as a collection of nodes (starting at a root node), where each node is a data structure consisting of a value, together with a list of references to nodes (the \"children\"), with the constraints that no reference is duplicated, and none points to the root node. From Wikipedia</em></p>\n</blockquote>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(n) O(n)\nTo get a full overview of the time and space complexity of the Tree data structure, have a look to this excellent Big O cheat sheet.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*DCdQiB6XqBJCrFRz12BwqA.png\"></p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>function Node(data) {\n  this.data = data;\n  this.children = [];\n}\n\nfunction Tree() {\n  this.root = null;\n}\n\nTree.prototype.add = function(data, toNodeData) {\n  let node = new Node(data);\n  let parent = toNodeData ? this.findBFS(toNodeData) : null;\n  if(parent) {\n    parent.children.push(node);\n  } else {\n    if(!this.root) {\n      this.root = node;\n    } else {\n      return 'Root node is already assigned';\n    }\n  }\n};\nTree.prototype.remove = function(data) {\n  if(this.root.data === data) {\n    this.root = null;\n  }\n\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      if(node.children[i].data === data) {\n        node.children.splice(i, 1);\n      } else {\n        queue.push(node.children[i]);\n      }\n    }\n  }\n};\nTree.prototype.contains = function(data) {\n  return this.findBFS(data) ? true : false;\n};\nTree.prototype.findBFS = function(data) {\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    if(node.data === data) {\n      return node;\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  return null;\n};\nTree.prototype._preOrder = function(node, fn) {\n  if(node) {\n    if(fn) {\n      fn(node);\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      this._preOrder(node.children[i], fn);\n    }\n  }\n};\nTree.prototype._postOrder = function(node, fn) {\n  if(node) {\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      this._postOrder(node.children[i], fn);\n    }\n    if(fn) {\n      fn(node);\n    }\n  }\n};\nTree.prototype.traverseDFS = function(fn, method) {\n  let current = this.root;\n  if(method) {\n    this['_' + method](current, fn);\n  } else {\n    this._preOrder(current, fn);\n  }\n};\nTree.prototype.traverseBFS = function(fn) {\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    if(fn) {\n      fn(node);\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n};\nTree.prototype.print = function() {\n  if(!this.root) {\n    return console.log('No root node found');\n  }\n  let newline = new Node('|');\n  let queue = [this.root, newline];\n  let string = '';\n  while(queue.length) {\n    let node = queue.shift();\n    string += node.data.toString() + ' ';\n    if(node === newline &#x26;&#x26; queue.length) {\n      queue.push(newline);\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  console.log(string.slice(0, -2).trim());\n};\nTree.prototype.printByLevel = function() {\n  if(!this.root) {\n    return console.log('No root node found');\n  }\n  let newline = new Node('\\n');\n  let queue = [this.root, newline];\n  let string = '';\n  while(queue.length) {\n    let node = queue.shift();\n    string += node.data.toString() + (node.data !== '\\n' ? ' ' : '');\n    if(node === newline &#x26;&#x26; queue.length) {\n      queue.push(newline);\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  console.log(string.trim());\n};\n\nlet tree = new Tree();\ntree.add('ceo');\ntree.add('cto', 'ceo');\ntree.add('dev1', 'cto');\ntree.add('dev2', 'cto');\ntree.add('dev3', 'cto');\ntree.add('cfo', 'ceo');\ntree.add('accountant', 'cfo');\ntree.add('cmo', 'ceo');\ntree.print(); // => ceo | cto cfo cmo | dev1 dev2 dev3 accountant\ntree.printByLevel();  // => ceo \\n cto cfo cmo \\n dev1 dev2 dev3 accountant\nconsole.log('tree contains dev1 is true:', tree.contains('dev1')); // => true\nconsole.log('tree contains dev4 is false:', tree.contains('dev4')); // => false\nconsole.log('--- BFS');\ntree.traverseBFS(function(node) { console.log(node.data); }); // => ceo cto cfo cmo dev1 dev2 dev3 accountant\nconsole.log('--- DFS preOrder');\ntree.traverseDFS(function(node) { console.log(node.data); }, 'preOrder'); // => ceo cto dev1 dev2 dev3 cfo accountant cmo\nconsole.log('--- DFS postOrder');\ntree.traverseDFS(function(node) { console.log(node.data); }, 'postOrder'); // => dev1 dev2 dev3 cto accountant cfo cmo ceo\ntree.remove('cmo');\ntree.print(); // => ceo | cto cfo | dev1 dev2 dev3 accountant\ntree.remove('cfo');\ntree.print(); // => ceo | cto | dev1 dev2 dev3\n</code></pre>\n<h2>The Graph</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*q31mL1kjFWlIzw3l.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Graph data structure consists of a finite (and possibly mutable) set of vertices or nodes or points, together with a set of unordered pairs of these vertices for an undirected Graph or a set of ordered pairs for a directed Graph. These pairs are known as edges, arcs, or lines for an undirected Graph and as arrows, directed edges, directed arcs, or directed lines for a directed Graph. The vertices may be part of the Graph structure, or may be external entities represented by integer indices or references. From Wikipedia</em></p>\n</blockquote>\n<p>A Graph data structure may also associate to each edge some edge value, such as a symbolic label or a numeric attribute (cost, capacity, length, etc.).</p>\n<p>Representation\nThere are different ways of representing a graph, each of them with its own advantages and disadvantages. Here are the main 2:</p>\n<p>Adjacency list: For every vertex a list of adjacent vertices is stored. This can be viewed as storing the list of edges. This data structure allows the storage of additional data on the vertices and edges.\nAdjacency matrix: Data are stored in a two-dimensional matrix, in which the rows represent source vertices and columns represent destination vertices. The data on the edges and vertices must be stored externally.\nComplexity\nAdjacency list\nStorage Add Vertex Add Edge Query\nO( V + E\nAdjacency matrix\nStorage Add Vertex Add Edge Query\nO( V ^2) O(</p>\n<p>Graph</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>//below uses the adjacency list representation.\n</code></pre>\n<pre><code class=\"language-js\">        function Graph() {\n          this.vertices = [];\n          this.edges = [];\n          this.numberOfEdges = 0;\n        }\n\n        Graph.prototype.addVertex = function(vertex) {\n          this.vertices.push(vertex);\n          this.edges[vertex] = [];\n        };\n        Graph.prototype.removeVertex = function(vertex) {\n          let index = this.vertices.indexOf(vertex);\n          if(~index) {\n            this.vertices.splice(index, 1);\n          }\n          while(this.edges[vertex].length) {\n            let adjacentVertex = this.edges[vertex].pop();\n            this.removeEdge(adjacentVertex, vertex);\n          }\n        };\n        Graph.prototype.addEdge = function(vertex1, vertex2) {\n          this.edges[vertex1].push(vertex2);\n          this.edges[vertex2].push(vertex1);\n          this.numberOfEdges++;\n        };\n        Graph.prototype.removeEdge = function(vertex1, vertex2) {\n          let index1 = this.edges[vertex1] ? this.edges[vertex1].indexOf(vertex2) : -1;\n          let index2 = this.edges[vertex2] ? this.edges[vertex2].indexOf(vertex1) : -1;\n          if(~index1) {\n            this.edges[vertex1].splice(index1, 1);\n            this.numberOfEdges--;\n          }\n          if(~index2) {\n            this.edges[vertex2].splice(index2, 1);\n          }\n        };\n        Graph.prototype.size = function() {\n          return this.vertices.length;\n        };\n        Graph.prototype.relations = function() {\n          return this.numberOfEdges;\n        };\n        Graph.prototype.traverseDFS = function(vertex, fn) {\n          if(!~this.vertices.indexOf(vertex)) {\n            return console.log('Vertex not found');\n          }\n          let visited = [];\n          this._traverseDFS(vertex, visited, fn);\n        };\n        Graph.prototype._traverseDFS = function(vertex, visited, fn) {\n          visited[vertex] = true;\n          if(this.edges[vertex] !== undefined) {\n            fn(vertex);\n          }\n          for(let i = 0; i &#x3C; this.edges[vertex].length; i++) {\n            if(!visited[this.edges[vertex][i]]) {\n              this._traverseDFS(this.edges[vertex][i], visited, fn);\n            }\n          }\n        };\n        Graph.prototype.traverseBFS = function(vertex, fn) {\n          if(!~this.vertices.indexOf(vertex)) {\n            return console.log('Vertex not found');\n          }\n          let queue = [];\n          queue.push(vertex);\n          let visited = [];\n          visited[vertex] = true;\n\n          while(queue.length) {\n            vertex = queue.shift();\n            fn(vertex);\n            for(let i = 0; i &#x3C; this.edges[vertex].length; i++) {\n              if(!visited[this.edges[vertex][i]]) {\n                visited[this.edges[vertex][i]] = true;\n                queue.push(this.edges[vertex][i]);\n              }\n            }\n          }\n        };\n        Graph.prototype.pathFromTo = function(vertexSource, vertexDestination) {\n          if(!~this.vertices.indexOf(vertexSource)) {\n            return console.log('Vertex not found');\n          }\n          let queue = [];\n          queue.push(vertexSource);\n          let visited = [];\n          visited[vertexSource] = true;\n          let paths = [];\n\n          while(queue.length) {\n            let vertex = queue.shift();\n            for(let i = 0; i &#x3C; this.edges[vertex].length; i++) {\n              if(!visited[this.edges[vertex][i]]) {\n                visited[this.edges[vertex][i]] = true;\n                queue.push(this.edges[vertex][i]);\n                // save paths between vertices\n                paths[this.edges[vertex][i]] = vertex;\n              }\n            }\n          }\n          if(!visited[vertexDestination]) {\n            return undefined;\n          }\n\n          let path = [];\n          for(let j = vertexDestination; j != vertexSource; j = paths[j]) {\n            path.push(j);\n          }\n          path.push(j);\n          return path.reverse().join('-');\n        };\n        Graph.prototype.print = function() {\n          console.log(this.vertices.map(function(vertex) {\n            return (vertex + ' -> ' + this.edges[vertex].join(', ')).trim();\n          }, this).join(' | '));\n        };\n        ```\n        let graph = new Graph();\n        graph.addVertex(1);\n        graph.addVertex(2);\n        graph.addVertex(3);\n        graph.addVertex(4);\n        graph.addVertex(5);\n        graph.addVertex(6);\n        graph.print(); // 1 -> | 2 -> | 3 -> | 4 -> | 5 -> | 6 ->\n        graph.addEdge(1, 2);\n        graph.addEdge(1, 5);\n        graph.addEdge(2, 3);\n        graph.addEdge(2, 5);\n        graph.addEdge(3, 4);\n        graph.addEdge(4, 5);\n        graph.addEdge(4, 6);\n        graph.print(); // 1 -> 2, 5 | 2 -> 1, 3, 5 | 3 -> 2, 4 | 4 -> 3, 5, 6 | 5 -> 1, 2, 4 | 6 -> 4\n        console.log('graph size (number of vertices):', graph.size()); // => 6\n        console.log('graph relations (number of edges):', graph.relations()); // => 7\n        graph.traverseDFS(1, function(vertex) { console.log(vertex); }); // => 1 2 3 4 5 6\n        console.log('---');\n        graph.traverseBFS(1, function(vertex) { console.log(vertex); }); // => 1 2 5 3 4 6\n        graph.traverseDFS(0, function(vertex) { console.log(vertex); }); // => 'Vertex not found'\n        graph.traverseBFS(0, function(vertex) { console.log(vertex); }); // => 'Vertex not found'\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-5-1\n        console.log('path from 3 to 5:', graph.pathFromTo(3, 5)); // => 3-2-5\n        graph.removeEdge(1, 2);\n        graph.removeEdge(4, 5);\n        graph.removeEdge(10, 11);\n        console.log('graph relations (number of edges):', graph.relations()); // => 5\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-3-2-5-1\n        graph.addEdge(1, 2);\n        graph.addEdge(4, 5);\n        console.log('graph relations (number of edges):', graph.relations()); // => 7\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-5-1\n        graph.removeVertex(5);\n        console.log('graph size (number of vertices):', graph.size()); // => 5\n        console.log('graph relations (number of edges):', graph.relations()); // => 4\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-3-2-1\n</code></pre>\n<p>≡If you found this guide helpful feel free to checkout my github/gists where I host similar content:</p>\n<p><a href=\"https://gist.github.com/bgoonz\">bgoonz's gists · GitHub</a>\n<a href=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong>\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a></p>\n<p>Or Checkout my personal Resource Site:\n<a href=\"https://goofy-euclid-1cd736.netlify.app/\"><strong>a/A-Student-Resources</strong>\n<em>Edit description</em>goofy-euclid-1cd736.netlify.app</a></p>"
                },
                {
                    "url": "/docs/articles/resources/",
                    "relativePath": "docs/articles/resources.md",
                    "relativeDir": "docs/articles",
                    "base": "resources.md",
                    "name": "resources",
                    "frontmatter": {
                        "title": "resources",
                        "weight": 0,
                        "excerpt": "resources",
                        "seo": { "title": "", "description": "", "robots": [], "extra": [], "type": "stackbit_page_meta" },
                        "template": "docs"
                    },
                    "html": "<h1>index</h1>\n<p>This appendix is a non-exhaustive list of new syntactic features and methods that were added to JavaScript in ES6. These features are the most commonly used and most helpful.</p>\n<p>While this appendix doesn't cover ES6 classes, we go over the basics while learning about components in the book. In addition, this appendix doesn't include descriptions of some larger new features like promises and generators. If you'd like more info on those or on any topic below, we encourage you to reference the <a href=\"https://developer.mozilla.org/\">Mozilla Developer Network's website</a> (MDN).</p>\n<h2>Prefer <code>const</code> and <code>let</code> over <code>var</code></h2>\n<p>If you've worked with ES5 JavaScript before, you're likely used to seeing variables declared with <code>var</code>:</p>\n<pre><code class=\"language-text\">ar myVariable = 5;\n</code></pre>\n<p>Both the <code>const</code> and <code>let</code> statements also declare variables. They were introduced in ES6.</p>\n<p>Use <code>const</code> in cases where a variable is never re-assigned. Using <code>const</code> makes this clear to whoever is reading your code. It refers to the \"constant\" state of the variable in the context it is defined within.</p>\n<p>If the variable will be re-assigned, use <code>let</code>.</p>\n<p>We encourage the use of <code>const</code> and <code>let</code> instead of <code>var</code>. In addition to the restriction introduced by <code>const</code>, both <code>const</code> and <code>let</code> are <em>block scoped</em> as opposed to <em>function scoped</em>. This scoping can help avoid unexpected bugs.</p>\n<h2>Arrow functions</h2>\n<p>There are three ways to write arrow function bodies. For the examples below, let's say we have an array of city objects:</p>\n<pre><code class=\"language-text\">onst cities = [\n  { name: 'Cairo', pop: 7764700 },\n  { name: 'Lagos', pop: 8029200 },\n];\n</code></pre>\n<p>If we write an arrow function that spans multiple lines, we must use braces to delimit the function body like this:</p>\n<pre><code class=\"language-text\">const formattedPopulations = cities.map((city) => {\n  const popMM = (city.pop / 1000000).toFixed(2);\n  return popMM + ' million';\n});\nconsole.log(formattedPopulations);\n</code></pre>\n<p>Note that we must also explicitly specify a <code>return</code> for the function.</p>\n<p>However, if we write a function body that is only a single line (or single expression) we can use parentheses to delimit it:</p>\n<pre><code class=\"language-text\">const formattedPopulations2 = cities.map((city) => (\n  (city.pop / 1000000).toFixed(2) + ' million'\n));\n</code></pre>\n<p>Notably, we don't use <code>return</code> as it's implied.</p>\n<p>Furthermore, if your function body is terse you can write it like so:</p>\n<pre><code class=\"language-text\">const pops = cities.map(city => city.pop);\nconsole.log(pops);\n</code></pre>\n<p>The terseness of arrow functions is one of two reasons that we use them. Compare the one-liner above to this:</p>\n<pre><code class=\"language-text\">const popsNoArrow = cities.map(function(city) { return city.pop });\n</code></pre>\n<p>Of greater benefit, though, is how arrow functions bind the <code>this</code> object.</p>\n<p>The traditional JavaScript function declaration syntax (<code>function () {}</code>) will bind <code>this</code> in anonymous functions to the global object. To illustrate the confusion this causes, consider the following example:</p>\n<pre><code class=\"language-text\">unction printSong() {\n  console.log(\"Oops - The Global Object\");\n}\n\nconst jukebox = {\n  songs: [\n    {\n      title: \"Wanna Be Startin' Somethin'\",\n      artist: \"Michael Jackson\",\n    },\n    {\n      title: \"Superstar\",\n      artist: \"Madonna\",\n    },\n  ],\n  printSong: function (song) {\n    console.log(song.title + \" - \" + song.artist);\n  },\n  printSongs: function () {\n\n    this.songs.forEach(function(song) {\n\n      this.printSong(song);\n    });\n  },\n}\n\njukebox.printSongs();\n</code></pre>\n<p>The method <code>printSongs()</code> iterates over <code>this.songs</code> with <code>forEach()</code>. In this context, <code>this</code> is bound to the object (<code>jukebox</code>) as expected. However, the anonymous function passed to <code>forEach()</code> binds its internal <code>this</code> to the global object. As such, <code>this.printSong(song)</code> calls the function declared at the top of the example, <em>not</em> the method on <code>jukebox</code>.</p>\n<p>JavaScript developers have traditionally used workarounds for this behavior, but arrow functions solve the problem by <strong>capturing the <code>this</code> value of the enclosing context</strong>. Using an arrow function for <code>printSongs()</code> has the expected result:</p>\n<pre><code class=\"language-text\">  printSongs: function () {\n    this.songs.forEach((song) => {\n\n      this.printSong(song);\n    });\n  },\n}\n\njukebox.printSongs();\n</code></pre>\n<p>For this reason, throughout the book we use arrow functions for all anonymous functions.</p>\n<h2>Modules</h2>\n<p>ES6 formally supports modules using the <code>import</code>/<code>export</code> syntax.</p>\n<p><strong>Named exports</strong></p>\n<p>Inside any file, you can use <code>export</code> to specify a variable the module should expose. Here's an example of a file that exports two functions:</p>\n<pre><code class=\"language-text\">export const sayHi = () => (console.log('Hi!'));\nexport const sayBye = () => (console.log('Bye!'));\n\nconst saySomething = () => (console.log('Something!'));\n</code></pre>\n<p>Now, anywhere we wanted to use these functions we could use <code>import</code>. We need to specify which functions we want to import. A common way of doing this is using ES6's destructuring assignment syntax to list them out like this:</p>\n<pre><code class=\"language-text\">import { sayHi, sayBye } from './greetings';\n\nsayHi();\nsayBye();\n</code></pre>\n<p>Importantly, the function that was <em>not</em> exported (<code>saySomething</code>) is unavailable outside of the module.</p>\n<p>Also note that we supply a <strong>relative path</strong> to <code>from</code>, indicating that the ES6 module is a local file as opposed to an npm package.</p>\n<p>Instead of inserting an <code>export</code> before each variable you'd like to export, you can use this syntax to list off all the exposed variables in one area:</p>\n<pre><code class=\"language-text\">const sayHi = () => (console.log('Hi!'));\nconst sayBye = () => (console.log('Bye!'));\n\nconst saySomething = () => (console.log('Something!'));\n\nexport { sayHi, sayBye };\n</code></pre>\n<p>We can also specify that we'd like to import all of a module's functionality underneath a given namespace with the <code>import * as &#x3C;Namespace></code> syntax:</p>\n<pre><code class=\"language-text\">import * as Greetings from './greetings';\n\nGreetings.sayHi();\n\nGreetings.sayBye();\n\nGreetings.saySomething();\n</code></pre>\n<p><strong>Default export</strong></p>\n<p>The other type of export is a default export. A module can only contain one default export:</p>\n<pre><code class=\"language-text\">const sayHi = () => (console.log('Hi!'));\nconst sayBye = () => (console.log('Bye!'));\n\nconst saySomething = () => (console.log('Something!'));\n\nconst Greetings = { sayHi, sayBye };\n\nexport default Greetings;\n</code></pre>\n<p>This is a common pattern for libraries. It means you can easily import the library wholesale without specifying what individual functions you want:</p>\n<pre><code class=\"language-text\">import Greetings from './greetings';\n\nGreetings.sayHi();\nGreetings.sayBye();\n</code></pre>\n<p>It's not uncommon for a module to use a mix of both named exports and default exports. For instance, with <code>react-dom</code>, you can import <code>ReactDOM</code> (a default export) like this:</p>\n<pre><code class=\"language-text\">import ReactDOM from 'react-dom';\n\nReactDOM.render(\n\n);\n</code></pre>\n<p>Or, if you're only going to use the <code>render()</code> function, you can import the named <code>render()</code> function like this:</p>\n<pre><code class=\"language-text\">import { render } from 'react-dom';\n\nrender(\n\n);\n</code></pre>\n<p>To achieve this flexibility, the export implementation for <code>react-dom</code> looks something like this:</p>\n<pre><code class=\"language-text\">export const render = (component, target) => {\n\n};\n\nconst ReactDOM = {\n  render,\n\n};\n\nexport default ReactDOM;\n</code></pre>\n<p>If you want to play around with the module syntax, check out the folder <code>code/webpack/es6-modules</code>.</p>\n<p>For more reading on ES6 modules, see this article from Mozilla: \"<a href=\"https://hacks.mozilla.org/2015/08/es6-in-depth-modules/\">ES6 in Depth: Modules</a>\".</p>\n<h2><code>Object.assign()</code></h2>\n<p>We use <code>Object.assign()</code> often throughout the book. We use it in areas where we want to create a modified version of an existing object.</p>\n<p><code>Object.assign()</code> accepts any number of objects as arguments. When the function receives two arguments, it <em>copies</em> the properties of the second object onto the first, like so:</p>\n<pre><code class=\"language-text\">onst coffee = { };\nconst noCream = { cream: false };\nconst noMilk = { milk: false };\nObject.assign(coffee, noCream);\n</code></pre>\n<p>It is idiomatic to pass in three arguments to <code>Object.assign()</code>. The first argument is a new JavaScript object, the one that <code>Object.assign()</code> will ultimately return. The second is the object whose properties we'd like to build off of. The last is the changes we'd like to apply:</p>\n<pre><code class=\"language-text\">const coffeeWithMilk = Object.assign({}, coffee, { milk: true });\n</code></pre>\n<p><code>Object.assign()</code> is a handy method for working with \"immutable\" JavaScript objects.</p>\n<h2>Template literals</h2>\n<p>In ES5 JavaScript, you'd interpolate variables into strings like this:</p>\n<pre><code class=\"language-text\">var greeting = 'Hello, ' + user + '! It is ' + degF + ' degrees outside.';\n</code></pre>\n<p>With ES6 template literals, we can create the same string like this:</p>\n<pre><code class=\"language-text\">const greeting = `Hello, ${user}! It is ${degF} degrees outside.`;\n</code></pre>\n<h2>The spread operator (<code>...</code>)</h2>\n<p>In arrays, the ellipsis <code>...</code> operator will <em>expand</em> the array that follows into the parent array. The spread operator enables us to succinctly construct new arrays as a composite of existing arrays.</p>\n<p>Here is an example:</p>\n<pre><code class=\"language-text\">onst a = [ 1, 2, 3 ];\nconst b = [ 4, 5, 6 ];\nconst c = [ ...a, ...b, 7, 8, 9 ];\n\nconsole.log(c);\n</code></pre>\n<p>Notice how this is different than if we wrote:</p>\n<pre><code class=\"language-text\">const d = [ a, b, 7, 8, 9 ];\nconsole.log(d);\n</code></pre>\n<h2>Enhanced object literals</h2>\n<p>In ES5, all objects were required to have explicit key and value declarations:</p>\n<pre><code class=\"language-text\">const explicit = {\n  getState: getState,\n  dispatch: dispatch,\n};\n</code></pre>\n<p>In ES6, you can use this terser syntax whenever the property name and variable name are the same:</p>\n<pre><code class=\"language-text\">const implicit = {\n  getState,\n  dispatch,\n};\n</code></pre>\n<p>Lots of open source libraries use this syntax, so it's good to be familiar with it. But whether you use it in your own code is a matter of stylistic preference.</p>\n<h2>Default arguments</h2>\n<p>With ES6, you can specify a default value for an argument in the case that it is <code>undefined</code> when the function is called.</p>\n<p>This:</p>\n<pre><code class=\"language-text\">unction divide(a, b) {\n\n  const divisor = typeof b === 'undefined' ? 1 : b;\n\n  return a / divisor;\n}\n</code></pre>\n<p>Can be written as this:</p>\n<pre><code class=\"language-text\">function divide(a, b = 1) {\n  return a / b;\n}\n</code></pre>\n<p>In both cases, using the function looks like this:</p>\n<pre><code class=\"language-text\">divide(14, 2);\n\ndivide(14, undefined);\n\ndivide(14);\n</code></pre>\n<p>Whenever the argument <code>b</code> in the example above is <code>undefined</code>, the default argument is used. Note that <code>null</code> will not use the default argument:</p>\n<pre><code class=\"language-text\">divide(14, null);\n</code></pre>\n<h2>Destructuring assignments</h2>\n<h3>For arrays</h3>\n<p>In ES5, extracting and assigning multiple elements from an array looked like this:</p>\n<pre><code class=\"language-text\">ar fruits = [ 'apples', 'bananas', 'oranges' ];\nvar fruit1 = fruits[0];\nvar fruit2 = fruits[1];\n</code></pre>\n<p>In ES6, we can use the destructuring syntax to accomplish the same task like this:</p>\n<pre><code class=\"language-text\">const [ veg1, veg2 ] = [ 'asparagus', 'broccoli', 'onion' ];\nconsole.log(veg1);\nconsole.log(veg2);\n</code></pre>\n<p>The variables in the array on the left are \"matched\" and assigned to the corresponding elements in the array on the right. Note that <code>'onion'</code> is ignored and has no variable bound to it.</p>\n<h3>For objects</h3>\n<p>We can do something similar for extracting object properties into variables:</p>\n<pre><code class=\"language-text\">const smoothie = {\n  fats: [ 'avocado', 'peanut butter', 'greek yogurt' ],\n  liquids: [ 'almond milk' ],\n  greens: [ 'spinach' ],\n  fruits: [ 'blueberry', 'banana' ],\n};\n\nconst { liquids, fruits } = smoothie;\n\nconsole.log(liquids);\nconsole.log(fruits);\n</code></pre>\n<h3>Parameter context matching</h3>\n<p>We can use these same principles to bind arguments inside a function to properties of an object supplied as an argument:</p>\n<pre><code class=\"language-text\">const containsSpinach = ({ greens }) => {\n  if (greens.find(g => g === 'spinach')) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\ncontainsSpinach(smoothie);\n</code></pre>\n<p>We do this often with functional React components:</p>\n<pre><code class=\"language-text\">const IngredientList = ({ ingredients, onClick }) => (\n  &#x3C;ul className='IngredientList'>\n    {\n      ingredients.map(i => (\n        &#x3C;li\n          key={i.id}\n          onClick={() => onClick(i.id)}\n          className='item'\n        >\n          {i.name}\n        &#x3C;/li>\n      ))\n    }\n  &#x3C;/ul>\n)\n</code></pre>\n<p>Here, we use destructuring to extract the props into variables (<code>ingredients</code> and <code>onClick</code>) that we then use inside the component's function body.</p>"
                },
                {
                    "url": "/docs/articles/ds-algo-overview/",
                    "relativePath": "docs/articles/ds-algo-overview.md",
                    "relativeDir": "docs/articles",
                    "base": "ds-algo-overview.md",
                    "name": "ds-algo-overview",
                    "frontmatter": {
                        "title": "ds-algo-overview",
                        "subtitle": "The ds-algo-overview provides you with a blueprint of default post and page styles.",
                        "image": "images/5.jpg",
                        "seo": {
                            "title": "ds-algo-overview",
                            "description": "A reference for suggested typographic treatment and styles for your content",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "ds-algo-overview", "keyName": "property" },
                                {
                                    "name": "og:description",
                                    "value": "A reference for suggested typographic treatment and styles for your content",
                                    "keyName": "property"
                                },
                                { "name": "og:image", "value": "images/5.jpg", "keyName": "property", "relativeUrl": true },
                                { "name": "twitter:card", "value": "summary_large_image" },
                                { "name": "twitter:title", "value": "ds-algo-overview" },
                                { "name": "twitter:description", "value": "A reference for suggested typographic treatment and styles for your content" },
                                { "name": "twitter:image", "value": "images/5.jpg", "relativeUrl": true }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<h1>Fundamental Data Structures In JavaScript</h1>\n<p>Fundamental Data Structures In JavaScript</p>\n<h2>Data structures in JavaScript</h2>\n<p>Here's a website I created to practice data structures!\n<a href=\"https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/\"><strong>directory</strong>\n<em>Edit description</em>ds-algo-official-c3dw6uapg-bgoonz.vercel.app</a></p>\n<p>Here's the repo that the website is built on:\n<a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\"><strong>bgoonz/DS-ALGO-OFFICIAL</strong>\n<em>Navigation ####Author:Bryan Guner Big O notation is the language we use for talking about how long an algorithm takes…</em>github.com</a></p>\n<h2>Resources (article content below):</h2>\n<h3>Videos</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=0IAPZzGSbME&#x26;list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&#x26;index=2&#x26;t=0s\">Abdul Bari: YouTubeChannel for Algorithms</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=lxja8wBwN0k&#x26;list=PLKKfKV1b9e8ps6dD3QA5KFfHdiWj9cB1s\">Data Structures and algorithms</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLmGElG-9wxc9Us6IK6Qy-KHlG_F3IS6Q9\">Data Structures and algorithms Course</a></li>\n<li><a href=\"https://www.khanacademy.org/computing/computer-science/algorithms\">Khan Academy</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\">Data structures by mycodeschool</a>Pre-requisite for this lesson is good understanding of pointers in C.</li>\n<li><a href=\"https://www.youtube.com/watch?v=HtSuA80QTyo&#x26;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">MIT 6.006: Intro to Algorithms(2011)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=5_5oE5lgrhw&#x26;list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi\">Data Structures and Algorithms by Codewithharry</a></li>\n</ul>\n<h3>Books</h3>\n<ul>\n<li><a href=\"https://edutechlearners.com/download/Introduction_to_algorithms-3rd%20Edition.pdf\">Introduction to Algorithms</a> by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein</li>\n<li><a href=\"http://www.sso.sy/sites/default/files/competitive%20programming%203_1.pdf\">Competitive Programming 3</a> by Steven Halim and Felix Halim</li>\n<li><a href=\"https://cses.fi/book/book.pdf\">Competitive Programmers Hand Book</a> Beginner friendly hand book for competitive programmers.</li>\n<li><a href=\"https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Data%20Structures%20and%20Algorithms%20-%20Narasimha%20Karumanchi.pdf\">Data Structures and Algorithms Made Easy</a> by Narasimha Karumanchi</li>\n<li><a href=\"https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Learning%20Algorithms%20Through%20Programming%20and%20Puzzle%20Solving.pdf\">Learning Algorithms Through Programming and Puzzle Solving</a> by Alexander Kulikov and Pavel Pevzner</li>\n</ul>\n<h3>Coding practice</h3>\n<ul>\n<li><a href=\"https://leetcode.com/\">LeetCode</a></li>\n<li><a href=\"https://www.interviewbit.com/\">InterviewBit</a></li>\n<li><a href=\"https://codility.com/\">Codility</a></li>\n<li><a href=\"https://www.hackerrank.com/\">HackerRank</a></li>\n<li><a href=\"https://projecteuler.net/\">Project Euler</a></li>\n<li><a href=\"https://spoj.com/\">Spoj</a></li>\n<li><a href=\"https://code.google.com/codejam/contests.html\">Google Code Jam practice problems</a></li>\n<li><a href=\"https://www.hackerearth.com/\">HackerEarth</a></li>\n<li><a href=\"https://www.topcoder.com/\">Top Coder</a></li>\n<li><a href=\"https://www.codechef.com/\">CodeChef</a></li>\n<li><a href=\"https://www.codewars.com/\">Codewars</a></li>\n<li><a href=\"https://codesignal.com/\">CodeSignal</a></li>\n<li><a href=\"http://codekata.com/\">CodeKata</a></li>\n<li><a href=\"https://www.firecode.io/\">Firecode</a></li>\n</ul>\n<h3>Courses</h3>\n<ul>\n<li><a href=\"https://academy.zerotomastery.io/p/master-the-coding-interview-faang-interview-prep\">Master the Coding Interview: Big Tech (FAANG) Interviews</a> Course by Andrei and his team.</li>\n<li><a href=\"https://realpython.com/python-data-structures\">Common Python Data Structures</a> Data structures are the fundamental constructs around which you build your programs. Each data structure provides a particular way of organizing data so it can be accessed efficiently, depending on your use case. Python ships with an extensive set of data structures in its standard library.</li>\n<li><a href=\"https://www.geeksforgeeks.org/fork-cpp-course-structure\">Fork CPP</a> A good course for beginners.</li>\n<li><a href=\"https://codeforces.com/edu/course/2\">EDU</a> Advanced course.</li>\n<li><a href=\"https://www.udacity.com/course/c-for-programmers--ud210\">C++ For Programmers</a> Learn features and constructs for C++.</li>\n</ul>\n<h3>Guides</h3>\n<ul>\n<li><a href=\"http://www.geeksforgeeks.org/\">GeeksForGeeks — A CS portal for geeks</a></li>\n<li><a href=\"https://www.learneroo.com/subjects/8\">Learneroo — Algorithms</a></li>\n<li><a href=\"http://www.topcoder.com/tc?d1=tutorials&#x26;d2=alg_index&#x26;module=Static\">Top Coder tutorials</a></li>\n<li><a href=\"http://www.infoarena.ro/training-path\">Infoarena training path</a> (RO)</li>\n<li>Steven &#x26; Felix Halim — <a href=\"https://uva.onlinejudge.org/index.php?option=com_onlinejudge&#x26;Itemid=8&#x26;category=118\">Increasing the Lower Bound of Programming Contests</a> (UVA Online Judge)</li>\n</ul>\n<h2><strong><em>space</em></strong></h2>\n<blockquote>\n<p><em>The space complexity represents the memory consumption of a data structure. As for most of the things in life, you can't have it all, so it is with the data structures. You will generally need to trade some time for space or the other way around.</em></p>\n</blockquote>\n<h2><em>time</em></h2>\n<blockquote>\n<p><em>The time complexity for a data structure is in general more diverse than its space complexity.</em></p>\n</blockquote>\n<h2><em>Several operations</em></h2>\n<blockquote>\n<p><em>In contrary to algorithms, when you look at the time complexity for data structures you need to express it for several operations that you can do with data structures. It can be adding elements, deleting elements, accessing an element or even searching for an element.</em></p>\n</blockquote>\n<h2><em>Dependent on data</em></h2>\n<blockquote>\n<p><em>Something that data structure and algorithms have in common when talking about time complexity is that they are both dealing with data. When you deal with data you become dependent on them and as a result the time complexity is also dependent of the data that you received. To solve this problem we talk about 3 different time complexity.</em></p>\n</blockquote>\n<ul>\n<li><strong>The best-case complexity: when the data looks the best</strong></li>\n<li><strong>The worst-case complexity: when the data looks the worst</strong></li>\n<li><strong>The average-case complexity: when the data looks average</strong></li>\n</ul>\n<h2>Big O notation</h2>\n<p>The complexity is usually expressed with the Big O notation. The wikipedia page about this subject is pretty complex but you can find here a good summary of the different complexity for the most famous data structures and sorting algorithms.</p>\n<h2>The Array data structure</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*Qk3UYgeqXamRrFLR.gif\"></p>\n<h2>Definition</h2>\n<p>An Array data structure, or simply an Array, is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. The simplest type of data structure is a linear array, also called one-dimensional array. From Wikipedia</p>\n<p>Arrays are among the oldest and most important data structures and are used by every program. They are also used to implement many other data structures.</p>\n<p><em>Complexity</em>\n<em>Average</em>\n<em>Access Search Insertion Deletion</em></p>\n<p>O(1) O(n) O(1) O(n)</p>\n<pre><code class=\"language-js\">class ArrayADT {\n    constructor() {\n        this.array = [];\n    }\n\n    add(data) {\n        this.array.push(data);\n    }\n\n    remove(data) {\n        this.array = this.array.filter((current) => current !== data);\n    }\n\n    search(data) {\n        const foundIndex = this.array.indexOf(data);\n        if (foundIndex === -1) {\n            return foundIndex;\n        }\n\n        return null;\n    }\n\n    getAtIndex(index) {\n        return this.array[index];\n    }\n\n    length() {\n        return this.array.length;\n    }\n\n    print() {\n        console.log(this.array.join(' '));\n    }\n}\n\nconst array = new ArrayADT();\nconsole.log('const array = new ArrayADT();: ', array);\nconsole.log('-------------------------------');\n\nconsole.log('array.add(1): ', array.add(1));\narray.add(3);\narray.add(4);\nconsole.log('array.add(2);: ', array.add(2), 'array.add(3);', array.add(3), 'array.add(4); ', array.add(4));\n\nconsole.log('-------------------------------');\narray.print();\nconsole.log('-------------------------------');\n\nconsole.log('search 3 gives index 2:', array.search(3));\nconsole.log('-------------------------------');\n\nconsole.log('getAtIndex 2 gives 3:', array.getAtIndex(2));\nconsole.log('-------------------------------');\n\nconsole.log('length is 4:', array.length());\nconsole.log('-------------------------------');\n\narray.remove(3);\narray.print();\nconsole.log('-------------------------------');\n\narray.add(5);\narray.add(5);\narray.print();\nconsole.log('-------------------------------');\n\narray.remove(5);\narray.print();\nconsole.log('-------------------------------');\n/*\n     ~ final : (master) node 01-array.js \n    const array = new ArrayADT();:  ArrayADT { array: [] }\n    -------------------------------\n    array.add(1):  undefined\n    array.add(2);:  undefined array.add(3); undefined array.add(4);  undefined\n    -------------------------------\n    1 3 4 2 3 4\n    -------------------------------\n    search 3 gives index 2: null\n    -------------------------------\n    getAtIndex 2 gives 3: 4\n    -------------------------------\n    length is 4: 6\n    -------------------------------\n    1 4 2 4\n    -------------------------------\n    1 4 2 4 5 5\n    -------------------------------\n    1 4 2 4\n    -------------------------------\n     ~ final : (master) \n     */\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*-BJ2hU-CZO2kuzu4x5a53g.png\"></p>\n<p>indexvalue0 … this is the first value, stored at zero position</p>\n<ol>\n<li>The index of an array <strong>runs in sequence</strong></li>\n<li>This could be useful for storing data that are required to be ordered, such as rankings or queues</li>\n<li>In JavaScript, array's value could be mixed; meaning value of each index could be of different data, be it String, Number or even Objects</li>\n</ol>\n<pre><code class=\"language-js\">    // 1. Creating Arrays\n    let firstArray = [\"a\",\"b\",\"c\"];\n    let secondArray = [\"d\",\"e\",\"f\"];\n\n    // 2. Access an Array Item\n    console.log(firstArray[0]); // Results: \"a\"\n\n    // 3. Loop over an Array\n    firstArray.forEach(function(item, index, array){\n        console.log(item, index);\n    });\n    // Results:\n    // a 0\n    // b 1\n    // c 2\n\n    // 4. Add new item to END of array\n    secondArray.push('g');\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\", \"g\"]\n\n    // 5. Remove item from END of array\n    secondArray.pop();\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\"]\n\n    // 6. Remove item from FRONT of array\n    secondArray.shift();\n    console.log(secondArray);\n    // Results: [\"e\",\"f\"]\n\n    // 7. Add item to FRONT of array\n    secondArray.unshift(\"d\");\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\"]\n\n    // 8. Find INDEX of an item in array\n    let position = secondArray.indexOf('f');\n    // Results: 2\n\n    // 9. Remove Item by Index Position\n    secondArray.splice(position, 1);\n    console.log(secondArray);\n    // Note, the second argument, in this case \"1\",\n    // represent the number of array elements to be removed\n    // Results:  [\"d\",\"e\"]\n\n    // 10. Copy an Array\n    let shallowCopy = secondArray.slice();\n    console.log(secondArray);\n    console.log(shallowCopy);\n    // Results: ShallowCopy === [\"d\",\"e\"]\n\n    // 11. JavaScript properties that BEGIN with a digit MUST be accessed using bracket notation\n    renderer.3d.setTexture(model, 'character.png');     // a syntax error\n    renderer['3d'].setTexture(model, 'character.png');  // works properly\n\n\n    // 12. Combine two Arrays\n    let thirdArray = firstArray.concat(secondArray);\n    console.log(thirdArray);\n    // [\"a\",\"b\",\"c\", \"d\", \"e\"];\n\n    // 13. Combine all Array elements into a string\n    console.log(thirdArray.join()); // Results: a,b,c,d,e\n    console.log(thirdArray.join('')); // Results: abcde\n    console.log(thirdArray.join('-')); // Results: a-b-c-d-e\n\n    // 14. Reversing an Array (in place, i.e. destructive)\n    console.log(thirdArray.reverse()); // [\"e\", \"d\", \"c\", \"b\", \"a\"]\n\n    // 15. sort\n    let unsortedArray = [\"Alphabet\", \"Zoo\", \"Products\", \"Computer Science\", \"Computer\"];\n    console.log(unsortedArray.sort());\n    // Results: [\"Alphabet\", \"Computer\", \"Computer Science\", \"Products\", \"Zoo\" ]\n</code></pre>\n<h2>2. Objects</h2>\n<p>Think of objects as a logical grouping of a bunch of properties.</p>\n<p>Properties could be some variable that it's storing or some methods that it's using.</p>\n<p>I also visualize an object as a table.</p>\n<p>The main difference is that object's \"index\" need not be numbers and is not necessarily sequenced.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2572/1*KVZkD2zrgEa_47igW8Hq8g.png\"></p>\n<pre><code class=\"language-js\">// 16. Creating an Object\n\nlet newObj = {\n    name: \"I'm an object\",\n    values: [1, 10, 11, 20],\n    others: '',\n    '1property': 'example of property name starting with digit'\n};\n\n// 17. Figure out what keys/properties are in an object\nconsole.log(Object.keys(newObj));\n// Results: [ 'name', 'values', 'others', '1property' ]\n\n// 18. Show all values stored in the object\nconsole.log(Object.values(newObj));\n\n// Results:\n// [ 'I\\'m an object',\n//   [ 1, 10, 11, 20 ],\n//   '',\n//   'example of property name starting with digit' ]\n\n// 19. Show all key and values of the object\nfor (let [key, value] of Object.entries(newObj)) {\n    console.log(`${key}: ${value}`);\n}\n// Results:\n// name: I'm an object\n// values: 1,10,11,20\n// others:\n// 1property: example of property name starting with digit\n\n// 20. Accessing Object's Properties\n// Two different ways to access properties, both produce same results\nconsole.log(newObj.name);\nconsole.log(newObj['name']);\n\n// But if the property name starts with a digit,\n// we CANNOT use dot notation\nconsole.log(newObj['1property']);\n\n// 21. Adding a Method to an Object\nnewObj.helloWorld = function () {\n    console.log('Hello World from inside an object!');\n};\n\n// 22. Invoking an Object's Method\nnewObj.helloWorld();\n</code></pre>\n<h2>The Hash Table</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*avbxLAFocSV6vsl5.gif\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2048/0*3GJiRoLyEoZ_aIlO\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Hash Table (Hash Map) is a data structure used to implement an associative array, a structure that can map keys to values. A Hash Table uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. From Wikipedia</em></p>\n</blockquote>\n<p>Hash Tables are considered the more efficient data structure for lookup and for this reason, they are widely used.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion</p>\n<ul>\n<li>\n<p>O(1) O(1) O(1)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n</li>\n</ul>\n<p>Note, here I am storing another object for every hash in my Hash Table.</p>\n<pre><code class=\"language-js\">class HashTable {\n    constructor(size) {\n        this.values = {};\n        this.numberOfValues = 0;\n        this.size = size;\n    }\n    add(key, value) {\n        let hash = this.calculateHash(key);\n        if (!this.values.hasOwnProperty(hash)) {\n            this.values[hash] = {};\n        }\n        if (!this.values[hash].hasOwnProperty(key)) {\n            this.numberOfValues++;\n        }\n        this.values[hash][key] = value;\n    }\n    remove(key) {\n        let hash = this.calculateHash(key);\n        if (this.values.hasOwnProperty(hash) &#x26;&#x26; this.values[hash].hasOwnProperty(key)) {\n            delete this.values[hash][key];\n            this.numberOfValues--;\n        }\n    }\n    calculateHash(key) {\n        return key.toString().length % this.size;\n    }\n    search(key) {\n        let hash = this.calculateHash(key);\n        if (this.values.hasOwnProperty(hash) &#x26;&#x26; this.values[hash].hasOwnProperty(key)) {\n            return this.values[hash][key];\n        } else {\n            return null;\n        }\n    }\n    length() {\n        return this.numberOfValues;\n    }\n    print() {\n        let string = '';\n        for (let value in this.values) {\n            for (let key in this.values[value]) {\n                string += this.values[value][key] + ' ';\n            }\n        }\n        console.log(string.trim());\n    }\n}\nlet hashTable = new HashTable(3);\nhashTable.add('first', 1);\nhashTable.add('second', 2);\nhashTable.add('third', 3);\nhashTable.add('fourth', 4);\nhashTable.add('fifth', 5);\nhashTable.print(); // => 2 4 1 3 5\nconsole.log('length gives 5:', hashTable.length()); // => 5\nconsole.log('search second gives 2:', hashTable.search('second')); // => 2\nhashTable.remove('fourth');\nhashTable.remove('first');\nhashTable.print(); // => 2 3 5\nconsole.log('length gives 3:', hashTable.length()); // => 3\n/*\n       ~ js-files : (master) node hash.js \n    2 4 1 3 5\n    length gives 5: 5\n    search second gives 2: 2\n    2 3 5\n    length gives 3: 3\n    */\n</code></pre>\n<h2>The Set</h2>\n<h2>Sets</h2>\n<p>Sets are pretty much what it sounds like. It's the same intuition as Set in Mathematics. I visualize Sets as Venn Diagrams.</p>\n<pre><code class=\"language-js\">// 23. Creating a new Set\nlet newSet = new Set();\n\n// 24. Adding new elements to a set\nnewSet.add(1); // Set[1]\nnewSet.add('text'); // Set[1, \"text\"]\n\n// 25. Check if element is in set\nnewSet.has(1); // true\n\n// 24. Check size of set\nconsole.log(newSet.size); // Results: 2\n\n// 26. Delete element from set\nnewSet.delete(1); // Set[\"text\"]\n\n// 27. Set Operations: isSuperSet\nfunction isSuperset(set, subset) {\n    for (let elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n// 28. Set Operations: union\nfunction union(setA, setB) {\n    let _union = new Set(setA);\n    for (let elem of setB) {\n        _union.add(elem);\n    }\n    return _union;\n}\n\n// 29. Set Operations: intersection\nfunction intersection(setA, setB) {\n    let _intersection = new Set();\n    for (let elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n// 30. Set Operations: symmetricDifference\nfunction symmetricDifference(setA, setB) {\n    let _difference = new Set(setA);\n    for (let elem of setB) {\n        if (_difference.has(elem)) {\n            _difference.delete(elem);\n        } else {\n            _difference.add(elem);\n        }\n    }\n    return _difference;\n}\n// 31. Set Operations: difference\nfunction difference(setA, setB) {\n    let _difference = new Set(setA);\n    for (let elem of setB) {\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n\n// Examples\nlet setA = new Set([1, 2, 3, 4]);\nlet setB = new Set([2, 3]);\nlet setC = new Set([3, 4, 5, 6]);\n\nconsole.log(isSuperset(setA, setB)); // => true\nconsole.log(union(setA, setC)); // => Set [1, 2, 3, 4, 5, 6]\nconsole.log(intersection(setA, setC)); // => Set [3, 4]\nconsole.log(symmetricDifference(setA, setC)); // => Set [1, 2, 5, 6]\nconsole.log(difference(setA, setC)); // => Set [1, 2]\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*gOE33ANZP2ujbjIG\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Set is an abstract data type that can store certain values, without any particular order, and no repeated values. It is a computer implementation of the mathematical concept of a finite Set. From Wikipedia</em></p>\n</blockquote>\n<p>The Set data structure is usually used to test whether elements belong to set of values. Rather then only containing elements, Sets are more used to perform operations on multiple values at once with methods such as union, intersect, etc…</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion</p>\n<ul>\n<li>\n<p>O(n) O(n) O(n)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"language-js\">function Set() {\n    this.values = [];\n    this.numberOfValues = 0;\n}\n\nSet.prototype.add = function (value) {\n    if (!~this.values.indexOf(value)) {\n        this.values.push(value);\n        this.numberOfValues++;\n    }\n};\nSet.prototype.remove = function (value) {\n    let index = this.values.indexOf(value);\n    if (~index) {\n        this.values.splice(index, 1);\n        this.numberOfValues--;\n    }\n};\nSet.prototype.contains = function (value) {\n    return this.values.indexOf(value) !== -1;\n};\nSet.prototype.union = function (set) {\n    let newSet = new Set();\n    set.values.forEach(function (value) {\n        newSet.add(value);\n    });\n    this.values.forEach(function (value) {\n        newSet.add(value);\n    });\n    return newSet;\n};\nSet.prototype.intersect = function (set) {\n    let newSet = new Set();\n    this.values.forEach(function (value) {\n        if (set.contains(value)) {\n            newSet.add(value);\n        }\n    });\n    return newSet;\n};\nSet.prototype.difference = function (set) {\n    let newSet = new Set();\n    this.values.forEach(function (value) {\n        if (!set.contains(value)) {\n            newSet.add(value);\n        }\n    });\n    return newSet;\n};\nSet.prototype.isSubset = function (set) {\n    return set.values.every(function (value) {\n        return this.contains(value);\n    }, this);\n};\nSet.prototype.length = function () {\n    return this.numberOfValues;\n};\nSet.prototype.print = function () {\n    console.log(this.values.join(' '));\n};\n\nlet set = new Set();\nset.add(1);\nset.add(2);\nset.add(3);\nset.add(4);\nset.print(); // => 1 2 3 4\nset.remove(3);\nset.print(); // => 1 2 4\nconsole.log('contains 4 is true:', set.contains(4)); // => true\nconsole.log('contains 3 is false:', set.contains(3)); // => false\nconsole.log('---');\nlet set1 = new Set();\nset1.add(1);\nset1.add(2);\nlet set2 = new Set();\nset2.add(2);\nset2.add(3);\nlet set3 = set2.union(set1);\nset3.print(); // => 1 2 3\nlet set4 = set2.intersect(set1);\nset4.print(); // => 2\nlet set5 = set.difference(set3); // 1 2 4 diff 1 2 3\nset5.print(); // => 4\nlet set6 = set3.difference(set); // 1 2 3 diff 1 2 4\nset6.print(); // => 3\nconsole.log('set1 subset of set is true:', set.isSubset(set1)); // => true\nconsole.log('set2 subset of set is false:', set.isSubset(set2)); // => false\nconsole.log('set1 length gives 2:', set1.length()); // => 2\nconsole.log('set3 length gives 3:', set3.length()); // => 3\n</code></pre>\n<h2>The Singly Linked List</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2048/0*fLs64rV-Xq19aVCA.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Singly Linked List is a linear collection of data elements, called nodes pointing to the next node by means of pointer. It is a data structure consisting of a group of nodes which together represent a sequence. Under the simplest form, each node is composed of data and a reference (in other words, a link) to the next node in the sequence.</em></p>\n</blockquote>\n<p>Linked Lists are among the simplest and most common data structures because it allows for efficient insertion or removal of elements from any position in the sequence.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code class=\"language-js\">function Node(data) {\n    this.data = data;\n    this.next = null;\n}\n\nfunction SinglyLinkedList() {\n    this.head = null;\n    this.tail = null;\n    this.numberOfValues = 0;\n}\n\nSinglyLinkedList.prototype.add = function (data) {\n    let node = new Node(data);\n    if (!this.head) {\n        this.head = node;\n        this.tail = node;\n    } else {\n        this.tail.next = node;\n        this.tail = node;\n    }\n    this.numberOfValues++;\n};\nSinglyLinkedList.prototype.remove = function (data) {\n    let previous = this.head;\n    let current = this.head;\n    while (current) {\n        if (current.data === data) {\n            if (current === this.head) {\n                this.head = this.head.next;\n            }\n            if (current === this.tail) {\n                this.tail = previous;\n            }\n            previous.next = current.next;\n            this.numberOfValues--;\n        } else {\n            previous = current;\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.insertAfter = function (data, toNodeData) {\n    let current = this.head;\n    while (current) {\n        if (current.data === toNodeData) {\n            let node = new Node(data);\n            if (current === this.tail) {\n                this.tail.next = node;\n                this.tail = node;\n            } else {\n                node.next = current.next;\n                current.next = node;\n            }\n            this.numberOfValues++;\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.traverse = function (fn) {\n    let current = this.head;\n    while (current) {\n        if (fn) {\n            fn(current);\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.length = function () {\n    return this.numberOfValues;\n};\nSinglyLinkedList.prototype.print = function () {\n    let string = '';\n    let current = this.head;\n    while (current) {\n        string += current.data + ' ';\n        current = current.next;\n    }\n    console.log(string.trim());\n};\n\nlet singlyLinkedList = new SinglyLinkedList();\nsinglyLinkedList.print(); // => ''\nsinglyLinkedList.add(1);\nsinglyLinkedList.add(2);\nsinglyLinkedList.add(3);\nsinglyLinkedList.add(4);\nsinglyLinkedList.print(); // => 1 2 3 4\nconsole.log('length is 4:', singlyLinkedList.length()); // => 4\nsinglyLinkedList.remove(3); // remove value\nsinglyLinkedList.print(); // => 1 2 4\nsinglyLinkedList.remove(9); // remove non existing value\nsinglyLinkedList.print(); // => 1 2 4\nsinglyLinkedList.remove(1); // remove head\nsinglyLinkedList.print(); // => 2 4\nsinglyLinkedList.remove(4); // remove tail\nsinglyLinkedList.print(); // => 2\nconsole.log('length is 1:', singlyLinkedList.length()); // => 1\nsinglyLinkedList.add(6);\nsinglyLinkedList.print(); // => 2 6\nsinglyLinkedList.insertAfter(3, 2);\nsinglyLinkedList.print(); // => 2 3 6\nsinglyLinkedList.insertAfter(4, 3);\nsinglyLinkedList.print(); // => 2 3 4 6\nsinglyLinkedList.insertAfter(5, 9); // insertAfter a non existing node\nsinglyLinkedList.print(); // => 2 3 4 6\nsinglyLinkedList.insertAfter(5, 4);\nsinglyLinkedList.insertAfter(7, 6); // insertAfter the tail\nsinglyLinkedList.print(); // => 2 3 4 5 6 7\nsinglyLinkedList.add(8); // add node with normal method\nsinglyLinkedList.print(); // => 2 3 4 5 6 7 8\nconsole.log('length is 7:', singlyLinkedList.length()); // => 7\nsinglyLinkedList.traverse(function (node) {\n    node.data = node.data + 10;\n});\nsinglyLinkedList.print(); // => 12 13 14 15 16 17 18\nsinglyLinkedList.traverse(function (node) {\n    console.log(node.data);\n}); // => 12 13 14 15 16 17 18\nconsole.log('length is 7:', singlyLinkedList.length()); // => 7\n</code></pre>\n<h2>The Doubly Linked List</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*TQXiR-L_itiG3WP-.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Doubly Linked List is a linked data structure that consists of a set of sequentially linked records called nodes. Each node contains two fields, called links, that are references to the previous and to the next node in the sequence of nodes. From Wikipedia</em></p>\n</blockquote>\n<p>Having two node links allow traversal in either direction but adding or removing a node in a doubly linked list requires changing more links than the same operations on a Singly Linked List.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>class Node {\n    constructor(data) {\n        this.data = data;\n        this.previous = null;\n        this.next = null;\n    }\n}\nclass DoublyLinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.numberOfValues = 0;\n    }\n\n    add(data) {\n        let node = new Node(data);\n        if (!this.head) {\n            this.head = node;\n            this.tail = node;\n        } else {\n            node.previous = this.tail;\n            this.tail.next = node;\n            this.tail = node;\n        }\n        this.numberOfValues++;\n    }\n    remove(data) {\n        let current = this.head;\n        while (current) {\n            if (current.data === data) {\n                if (current === this.head &#x26;&#x26; current === this.tail) {\n                    this.head = null;\n                    this.tail = null;\n                } else if (current === this.head) {\n                    this.head = this.head.next;\n                    this.head.previous = null;\n                } else if (current === this.tail) {\n                    this.tail = this.tail.previous;\n                    this.tail.next = null;\n                } else {\n                    current.previous.next = current.next;\n                    current.next.previous = current.previous;\n                }\n                this.numberOfValues--;\n            }\n            current = current.next;\n        }\n    }\n    insertAfter(data, toNodeData) {\n        let current = this.head;\n        while (current) {\n            if (current.data === toNodeData) {\n                let node = new Node(data);\n                if (current === this.tail) {\n                    this.add(data);\n                } else {\n                    current.next.previous = node;\n                    node.previous = current;\n                    node.next = current.next;\n                    current.next = node;\n                    this.numberOfValues++;\n                }\n            }\n            current = current.next;\n        }\n    }\n    traverse(fn) {\n        let current = this.head;\n        while (current) {\n            if (fn) {\n                fn(current);\n            }\n            current = current.next;\n        }\n    }\n    traverseReverse(fn) {\n        let current = this.tail;\n        while (current) {\n            if (fn) {\n                fn(current);\n            }\n            current = current.previous;\n        }\n    }\n    length() {\n        return this.numberOfValues;\n    }\n    print() {\n        let string = \"\";\n        let current = this.head;\n        while (current) {\n            string += current.data + \" \";\n            current = current.next;\n        }\n        console.log(string.trim());\n    }\n}\n\nlet doublyLinkedList = new DoublyLinkedList();\ndoublyLinkedList.print(); // => ''\ndoublyLinkedList.add(1);\ndoublyLinkedList.add(2);\ndoublyLinkedList.add(3);\ndoublyLinkedList.add(4);\ndoublyLinkedList.print(); // => 1 2 3 4\nconsole.log(\"length is 4:\", doublyLinkedList.length()); // => 4\ndoublyLinkedList.remove(3); // remove value\ndoublyLinkedList.print(); // => 1 2 4\ndoublyLinkedList.remove(9); // remove non existing value\ndoublyLinkedList.print(); // => 1 2 4\ndoublyLinkedList.remove(1); // remove head\ndoublyLinkedList.print(); // => 2 4\ndoublyLinkedList.remove(4); // remove tail\ndoublyLinkedList.print(); // => 2\nconsole.log(\"length is 1:\", doublyLinkedList.length()); // => 1\ndoublyLinkedList.remove(2); // remove tail, the list should be empty\ndoublyLinkedList.print(); // => ''\nconsole.log(\"length is 0:\", doublyLinkedList.length()); // => 0\ndoublyLinkedList.add(2);\ndoublyLinkedList.add(6);\ndoublyLinkedList.print(); // => 2 6\ndoublyLinkedList.insertAfter(3, 2);\ndoublyLinkedList.print(); // => 2 3 6\ndoublyLinkedList.traverseReverse(function (node) {\n    console.log(node.data);\n});\ndoublyLinkedList.insertAfter(4, 3);\ndoublyLinkedList.print(); // => 2 3 4 6\ndoublyLinkedList.insertAfter(5, 9); // insertAfter a non existing node\ndoublyLinkedList.print(); // => 2 3 4 6\ndoublyLinkedList.insertAfter(5, 4);\ndoublyLinkedList.insertAfter(7, 6); // insertAfter the tail\ndoublyLinkedList.print(); // => 2 3 4 5 6 7\ndoublyLinkedList.add(8); // add node with normal method\ndoublyLinkedList.print(); // => 2 3 4 5 6 7 8\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\ndoublyLinkedList.traverse(function (node) {\n    node.data = node.data + 10;\n});\ndoublyLinkedList.print(); // => 12 13 14 15 16 17 18\ndoublyLinkedList.traverse(function (node) {\n    console.log(node.data);\n}); // => 12 13 14 15 16 17 18\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\ndoublyLinkedList.traverseReverse(function (node) {\n    console.log(node.data);\n}); // => 18 17 16 15 14 13 12\ndoublyLinkedList.print(); // => 12 13 14 15 16 17 18\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\n/*\n   ~ js-files : (master) node double-linked-list.js\n\n1 2 3 4\nlength is 4: 4\n1 2 4\n1 2 4\n2 4\n2\nlength is 1: 1\n\nlength is 0: 0\n2 6\n2 3 6\n6\n3\n2\n2 3 4 6\n2 3 4 6\n2 3 4 5 6 7\n2 3 4 5 6 7 8\nlength is 7: 7\n12 13 14 15 16 17 18\n12\n13\n14\n15\n16\n17\n18\nlength is 7: 7\n18\n17\n16\n15\n14\n13\n12\n12 13 14 15 16 17 18\nlength is 7: 7\n ~ js-files : (master)\n*/\n</code></pre>\n<h2>The Stack</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/4050/0*qsjYW-Lvfo22ecLE.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Stack is an abstract data type that serves as a collection of elements, with two principal operations: push, which adds an element to the collection, and pop, which removes the most recently added element that was not yet removed. The order in which elements come off a Stack gives rise to its alternative name, LIFO (for last in, first out). From Wikipedia</em></p>\n</blockquote>\n<p>A Stack often has a third method peek which allows to check the last pushed element without popping it.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>function Stack() {\n  this.stack = [];\n}\n\nStack.prototype.push = function(value) {\n  this.stack.push(value);\n};\nStack.prototype.pop = function() {\n  return this.stack.pop();\n};\nStack.prototype.peek = function() {\n  return this.stack[this.stack.length - 1];\n};\nStack.prototype.length = function() {\n  return this.stack.length;\n};\nStack.prototype.print = function() {\n  console.log(this.stack.join(' '));\n};\n\nlet stack = new Stack();\nstack.push(1);\nstack.push(2);\nstack.push(3);\nstack.print(); // => 1 2 3\nconsole.log('length is 3:', stack.length()); // => 3\nconsole.log('peek is 3:', stack.peek()); // => 3\nconsole.log('pop is 3:', stack.pop()); // => 3\nstack.print(); // => 1 2\nconsole.log('pop is 2:', stack.pop());  // => 2\nconsole.log('length is 1:', stack.length()); // => 1\nconsole.log('pop is 1:', stack.pop()); // => 1\nstack.print(); // => ''\nconsole.log('peek is undefined:', stack.peek()); // => undefined\nconsole.log('pop is undefined:', stack.pop()); // => undefined\n</code></pre>\n<h2>The Queue</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/4050/0*YvfuX5tKP7-V0p7v.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Queue is a particular kind of abstract data type or collection in which the entities in the collection are kept in order and the principal operations are the addition of entities to the rear terminal position, known as enqueue, and removal of entities from the front terminal position, known as dequeue. This makes the Queue a First-In-First-Out (FIFO) data structure. In a FIFO data structure, the first element added to the Queue will be the first one to be removed.</em></p>\n</blockquote>\n<p>As for the Stack data structure, a peek operation is often added to the Queue data structure. It returns the value of the front element without dequeuing it.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(n)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>function Queue() {\n  this.queue = [];\n}\n\nQueue.prototype.enqueue = function(value) {\n  this.queue.push(value);\n};\nQueue.prototype.dequeue = function() {\n  return this.queue.shift();\n};\nQueue.prototype.peek = function() {\n  return this.queue[0];\n};\nQueue.prototype.length = function() {\n  return this.queue.length;\n};\nQueue.prototype.print = function() {\n  console.log(this.queue.join(' '));\n};\n\nlet queue = new Queue();\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nqueue.print(); // => 1 2 3\nconsole.log('length is 3:', queue.length()); // => 3\nconsole.log('peek is 1:', queue.peek()); // => 3\nconsole.log('dequeue is 1:', queue.dequeue()); // => 1\nqueue.print(); // => 2 3\nconsole.log('dequeue is 2:', queue.dequeue());  // => 2\nconsole.log('length is 1:', queue.length()); // => 1\nconsole.log('dequeue is 3:', queue.dequeue()); // => 3\nqueue.print(); // => ''\nconsole.log('peek is undefined:', queue.peek()); // => undefined\nconsole.log('dequeue is undefined:', queue.dequeue()); // => undefined\n</code></pre>\n<h2>The Tree</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*yUiQ-NaPKeLQnN7n\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Tree is a widely used data structure that simulates a hierarchical tree structure, with a root value and subtrees of children with a parent node. A tree data structure can be defined recursively as a collection of nodes (starting at a root node), where each node is a data structure consisting of a value, together with a list of references to nodes (the \"children\"), with the constraints that no reference is duplicated, and none points to the root node. From Wikipedia</em></p>\n</blockquote>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(n) O(n)\nTo get a full overview of the time and space complexity of the Tree data structure, have a look to this excellent Big O cheat sheet.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*DCdQiB6XqBJCrFRz12BwqA.png\"></p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>function Node(data) {\n  this.data = data;\n  this.children = [];\n}\n\nfunction Tree() {\n  this.root = null;\n}\n\nTree.prototype.add = function(data, toNodeData) {\n  let node = new Node(data);\n  let parent = toNodeData ? this.findBFS(toNodeData) : null;\n  if(parent) {\n    parent.children.push(node);\n  } else {\n    if(!this.root) {\n      this.root = node;\n    } else {\n      return 'Root node is already assigned';\n    }\n  }\n};\nTree.prototype.remove = function(data) {\n  if(this.root.data === data) {\n    this.root = null;\n  }\n\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      if(node.children[i].data === data) {\n        node.children.splice(i, 1);\n      } else {\n        queue.push(node.children[i]);\n      }\n    }\n  }\n};\nTree.prototype.contains = function(data) {\n  return this.findBFS(data) ? true : false;\n};\nTree.prototype.findBFS = function(data) {\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    if(node.data === data) {\n      return node;\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  return null;\n};\nTree.prototype._preOrder = function(node, fn) {\n  if(node) {\n    if(fn) {\n      fn(node);\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      this._preOrder(node.children[i], fn);\n    }\n  }\n};\nTree.prototype._postOrder = function(node, fn) {\n  if(node) {\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      this._postOrder(node.children[i], fn);\n    }\n    if(fn) {\n      fn(node);\n    }\n  }\n};\nTree.prototype.traverseDFS = function(fn, method) {\n  let current = this.root;\n  if(method) {\n    this['_' + method](current, fn);\n  } else {\n    this._preOrder(current, fn);\n  }\n};\nTree.prototype.traverseBFS = function(fn) {\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    if(fn) {\n      fn(node);\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n};\nTree.prototype.print = function() {\n  if(!this.root) {\n    return console.log('No root node found');\n  }\n  let newline = new Node('|');\n  let queue = [this.root, newline];\n  let string = '';\n  while(queue.length) {\n    let node = queue.shift();\n    string += node.data.toString() + ' ';\n    if(node === newline &#x26;&#x26; queue.length) {\n      queue.push(newline);\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  console.log(string.slice(0, -2).trim());\n};\nTree.prototype.printByLevel = function() {\n  if(!this.root) {\n    return console.log('No root node found');\n  }\n  let newline = new Node('\\n');\n  let queue = [this.root, newline];\n  let string = '';\n  while(queue.length) {\n    let node = queue.shift();\n    string += node.data.toString() + (node.data !== '\\n' ? ' ' : '');\n    if(node === newline &#x26;&#x26; queue.length) {\n      queue.push(newline);\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  console.log(string.trim());\n};\n\nlet tree = new Tree();\ntree.add('ceo');\ntree.add('cto', 'ceo');\ntree.add('dev1', 'cto');\ntree.add('dev2', 'cto');\ntree.add('dev3', 'cto');\ntree.add('cfo', 'ceo');\ntree.add('accountant', 'cfo');\ntree.add('cmo', 'ceo');\ntree.print(); // => ceo | cto cfo cmo | dev1 dev2 dev3 accountant\ntree.printByLevel();  // => ceo \\n cto cfo cmo \\n dev1 dev2 dev3 accountant\nconsole.log('tree contains dev1 is true:', tree.contains('dev1')); // => true\nconsole.log('tree contains dev4 is false:', tree.contains('dev4')); // => false\nconsole.log('--- BFS');\ntree.traverseBFS(function(node) { console.log(node.data); }); // => ceo cto cfo cmo dev1 dev2 dev3 accountant\nconsole.log('--- DFS preOrder');\ntree.traverseDFS(function(node) { console.log(node.data); }, 'preOrder'); // => ceo cto dev1 dev2 dev3 cfo accountant cmo\nconsole.log('--- DFS postOrder');\ntree.traverseDFS(function(node) { console.log(node.data); }, 'postOrder'); // => dev1 dev2 dev3 cto accountant cfo cmo ceo\ntree.remove('cmo');\ntree.print(); // => ceo | cto cfo | dev1 dev2 dev3 accountant\ntree.remove('cfo');\ntree.print(); // => ceo | cto | dev1 dev2 dev3\n</code></pre>\n<h2>The Graph</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*q31mL1kjFWlIzw3l.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Graph data structure consists of a finite (and possibly mutable) set of vertices or nodes or points, together with a set of unordered pairs of these vertices for an undirected Graph or a set of ordered pairs for a directed Graph. These pairs are known as edges, arcs, or lines for an undirected Graph and as arrows, directed edges, directed arcs, or directed lines for a directed Graph. The vertices may be part of the Graph structure, or may be external entities represented by integer indices or references. From Wikipedia</em></p>\n</blockquote>\n<p>A Graph data structure may also associate to each edge some edge value, such as a symbolic label or a numeric attribute (cost, capacity, length, etc.).</p>\n<p>Representation\nThere are different ways of representing a graph, each of them with its own advantages and disadvantages. Here are the main 2:</p>\n<p>Adjacency list: For every vertex a list of adjacent vertices is stored. This can be viewed as storing the list of edges. This data structure allows the storage of additional data on the vertices and edges.\nAdjacency matrix: Data are stored in a two-dimensional matrix, in which the rows represent source vertices and columns represent destination vertices. The data on the edges and vertices must be stored externally.\nComplexity\nAdjacency list\nStorage Add Vertex Add Edge Query\nO( V + E\nAdjacency matrix\nStorage Add Vertex Add Edge Query\nO( V ^2) O(</p>\n<p>Graph</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>//below uses the adjacency list representation.\n</code></pre>\n<pre><code class=\"language-js\">        function Graph() {\n          this.vertices = [];\n          this.edges = [];\n          this.numberOfEdges = 0;\n        }\n\n        Graph.prototype.addVertex = function(vertex) {\n          this.vertices.push(vertex);\n          this.edges[vertex] = [];\n        };\n        Graph.prototype.removeVertex = function(vertex) {\n          let index = this.vertices.indexOf(vertex);\n          if(~index) {\n            this.vertices.splice(index, 1);\n          }\n          while(this.edges[vertex].length) {\n            let adjacentVertex = this.edges[vertex].pop();\n            this.removeEdge(adjacentVertex, vertex);\n          }\n        };\n        Graph.prototype.addEdge = function(vertex1, vertex2) {\n          this.edges[vertex1].push(vertex2);\n          this.edges[vertex2].push(vertex1);\n          this.numberOfEdges++;\n        };\n        Graph.prototype.removeEdge = function(vertex1, vertex2) {\n          let index1 = this.edges[vertex1] ? this.edges[vertex1].indexOf(vertex2) : -1;\n          let index2 = this.edges[vertex2] ? this.edges[vertex2].indexOf(vertex1) : -1;\n          if(~index1) {\n            this.edges[vertex1].splice(index1, 1);\n            this.numberOfEdges--;\n          }\n          if(~index2) {\n            this.edges[vertex2].splice(index2, 1);\n          }\n        };\n        Graph.prototype.size = function() {\n          return this.vertices.length;\n        };\n        Graph.prototype.relations = function() {\n          return this.numberOfEdges;\n        };\n        Graph.prototype.traverseDFS = function(vertex, fn) {\n          if(!~this.vertices.indexOf(vertex)) {\n            return console.log('Vertex not found');\n          }\n          let visited = [];\n          this._traverseDFS(vertex, visited, fn);\n        };\n        Graph.prototype._traverseDFS = function(vertex, visited, fn) {\n          visited[vertex] = true;\n          if(this.edges[vertex] !== undefined) {\n            fn(vertex);\n          }\n          for(let i = 0; i &#x3C; this.edges[vertex].length; i++) {\n            if(!visited[this.edges[vertex][i]]) {\n              this._traverseDFS(this.edges[vertex][i], visited, fn);\n            }\n          }\n        };\n        Graph.prototype.traverseBFS = function(vertex, fn) {\n          if(!~this.vertices.indexOf(vertex)) {\n            return console.log('Vertex not found');\n          }\n          let queue = [];\n          queue.push(vertex);\n          let visited = [];\n          visited[vertex] = true;\n\n          while(queue.length) {\n            vertex = queue.shift();\n            fn(vertex);\n            for(let i = 0; i &#x3C; this.edges[vertex].length; i++) {\n              if(!visited[this.edges[vertex][i]]) {\n                visited[this.edges[vertex][i]] = true;\n                queue.push(this.edges[vertex][i]);\n              }\n            }\n          }\n        };\n        Graph.prototype.pathFromTo = function(vertexSource, vertexDestination) {\n          if(!~this.vertices.indexOf(vertexSource)) {\n            return console.log('Vertex not found');\n          }\n          let queue = [];\n          queue.push(vertexSource);\n          let visited = [];\n          visited[vertexSource] = true;\n          let paths = [];\n\n          while(queue.length) {\n            let vertex = queue.shift();\n            for(let i = 0; i &#x3C; this.edges[vertex].length; i++) {\n              if(!visited[this.edges[vertex][i]]) {\n                visited[this.edges[vertex][i]] = true;\n                queue.push(this.edges[vertex][i]);\n                // save paths between vertices\n                paths[this.edges[vertex][i]] = vertex;\n              }\n            }\n          }\n          if(!visited[vertexDestination]) {\n            return undefined;\n          }\n\n          let path = [];\n          for(let j = vertexDestination; j != vertexSource; j = paths[j]) {\n            path.push(j);\n          }\n          path.push(j);\n          return path.reverse().join('-');\n        };\n        Graph.prototype.print = function() {\n          console.log(this.vertices.map(function(vertex) {\n            return (vertex + ' -> ' + this.edges[vertex].join(', ')).trim();\n          }, this).join(' | '));\n        };\n        ```\n        let graph = new Graph();\n        graph.addVertex(1);\n        graph.addVertex(2);\n        graph.addVertex(3);\n        graph.addVertex(4);\n        graph.addVertex(5);\n        graph.addVertex(6);\n        graph.print(); // 1 -> | 2 -> | 3 -> | 4 -> | 5 -> | 6 ->\n        graph.addEdge(1, 2);\n        graph.addEdge(1, 5);\n        graph.addEdge(2, 3);\n        graph.addEdge(2, 5);\n        graph.addEdge(3, 4);\n        graph.addEdge(4, 5);\n        graph.addEdge(4, 6);\n        graph.print(); // 1 -> 2, 5 | 2 -> 1, 3, 5 | 3 -> 2, 4 | 4 -> 3, 5, 6 | 5 -> 1, 2, 4 | 6 -> 4\n        console.log('graph size (number of vertices):', graph.size()); // => 6\n        console.log('graph relations (number of edges):', graph.relations()); // => 7\n        graph.traverseDFS(1, function(vertex) { console.log(vertex); }); // => 1 2 3 4 5 6\n        console.log('---');\n        graph.traverseBFS(1, function(vertex) { console.log(vertex); }); // => 1 2 5 3 4 6\n        graph.traverseDFS(0, function(vertex) { console.log(vertex); }); // => 'Vertex not found'\n        graph.traverseBFS(0, function(vertex) { console.log(vertex); }); // => 'Vertex not found'\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-5-1\n        console.log('path from 3 to 5:', graph.pathFromTo(3, 5)); // => 3-2-5\n        graph.removeEdge(1, 2);\n        graph.removeEdge(4, 5);\n        graph.removeEdge(10, 11);\n        console.log('graph relations (number of edges):', graph.relations()); // => 5\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-3-2-5-1\n        graph.addEdge(1, 2);\n        graph.addEdge(4, 5);\n        console.log('graph relations (number of edges):', graph.relations()); // => 7\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-5-1\n        graph.removeVertex(5);\n        console.log('graph size (number of vertices):', graph.size()); // => 5\n        console.log('graph relations (number of edges):', graph.relations()); // => 4\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-3-2-1\n</code></pre>\n<p>≡If you found this guide helpful feel free to checkout my github/gists where I host similar content:</p>\n<p><a href=\"https://gist.github.com/bgoonz\">bgoonz's gists · GitHub</a>\n<a href=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong>\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a></p>\n<p>Or Checkout my personal Resource Site:\n<a href=\"https://goofy-euclid-1cd736.netlify.app/\"><strong>a/A-Student-Resources</strong>\n<em>Edit description</em>goofy-euclid-1cd736.netlify.app</a></p>"
                },
                {
                    "url": "/docs/articles/gallery/",
                    "relativePath": "docs/articles/gallery.md",
                    "relativeDir": "docs/articles",
                    "base": "gallery.md",
                    "name": "gallery",
                    "frontmatter": {
                        "title": "lorem-ipsum",
                        "sections": [
                            {
                                "title": "lorem-ipsum",
                                "section_id": "gallery",
                                "subtitle": "Images",
                                "col_number": "three",
                                "grid_items": [
                                    {
                                        "title": "lorem-ipsum",
                                        "title_url": "lorem-ipsum",
                                        "image_alt": "lorem-ipsum",
                                        "content": "## Lorem ipsum\n\nLorem ipsum dolor sit amet, **consectetur adipiscing elit**, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n\n- Lorem ipsum\n- dolor sit amet",
                                        "actions": [],
                                        "type": "grid_item"
                                    },
                                    {
                                        "title": "lorem-ipsum",
                                        "title_url": "lorem-ipsum",
                                        "image_alt": "lorem-ipsum",
                                        "content": "## Lorem ipsum\n\nLorem ipsum dolor sit amet, **consectetur adipiscing elit**, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n\n- Lorem ipsum\n- dolor sit amet",
                                        "actions": [],
                                        "type": "grid_item"
                                    },
                                    {
                                        "title": "lorem-ipsum",
                                        "title_url": "lorem-ipsum",
                                        "image_alt": "lorem-ipsum",
                                        "content": "## Lorem ipsum\n\nLorem ipsum dolor sit amet, **consectetur adipiscing elit**, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n\n- Lorem ipsum\n- dolor sit amet",
                                        "actions": [],
                                        "type": "grid_item"
                                    },
                                    {
                                        "title": "lorem-ipsum",
                                        "title_url": "lorem-ipsum",
                                        "image_alt": "lorem-ipsum",
                                        "content": "## Lorem ipsum\n\nLorem ipsum dolor sit amet, **consectetur adipiscing elit**, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n\n- Lorem ipsum\n- dolor sit amet",
                                        "actions": [],
                                        "type": "grid_item"
                                    },
                                    {
                                        "title": "lorem-ipsum",
                                        "title_url": "lorem-ipsum",
                                        "image_alt": "lorem-ipsum",
                                        "content": "## Lorem ipsum\n\nLorem ipsum dolor sit amet, **consectetur adipiscing elit**, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n\n- Lorem ipsum\n- dolor sit amet",
                                        "actions": [],
                                        "type": "grid_item"
                                    }
                                ],
                                "type": "section_grid"
                            }
                        ],
                        "seo": { "title": "", "description": "", "robots": [], "extra": [], "type": "stackbit_page_meta" },
                        "template": "advanced"
                    },
                    "html": "<h2>Lorem ipsum</h2>\n<p>Lorem ipsum dolor sit amet, <strong>consectetur adipiscing elit</strong>, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n<ul>\n<li>Lorem ipsum</li>\n<li>dolor sit amet</li>\n</ul>"
                },
                {
                    "url": "/docs/links/Social/",
                    "relativePath": "docs/links/Social.md",
                    "relativeDir": "docs/links",
                    "base": "Social.md",
                    "name": "Social",
                    "frontmatter": {
                        "title": "Social Links",
                        "sections": [],
                        "seo": { "title": "", "description": "", "robots": [], "extra": [], "type": "stackbit_page_meta" },
                        "template": "advanced"
                    },
                    "html": "<table>\n<thead>\n<tr>\n<th><a href=\"https://github.com/bgoonz\">GitHub</a></th>\n<th><a href=\"https://repl.it/@bgoonz/\">Replit</a></th>\n<th><a href=\"https://bryanguner.medium.com/\">Medium</a></th>\n<th><a href=\"https://www.quora.com/q/webdevresourcehub?invite_code=qwZOqbpAhgQ6hjjGl8NN\">Quora</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://gitlab.com/bryan.guner.dev\">Gitlab</a></td>\n<td><a href=\"https://www.reddit.com/user/bgoonz1\">Redit</a></td>\n<td><a href=\"https://webcomponents.dev/user/bgoonz\">webcomponents.dev</a></td>\n<td><a href=\"https://dev.to/bgoonz\">dev.to</a></td>\n</tr>\n<tr>\n<td><a href=\"https://bitbucket.org/bgoonz/\">Bitbucket</a></td>\n<td><a href=\"https://runkit.com/bgoonz\">runkit</a></td>\n<td><a href=\"https://www.npmjs.com/~bgoonz11\">npm</a></td>\n<td><a href=\"https://observablehq.com/@bgoonz?tab=profile\">Observable Notebooks</a></td>\n</tr>\n<tr>\n<td><a href=\"https://codepen.io/bgoonz\">code pen</a></td>\n<td><a href=\"https://meta.stackexchange.com/users/936785/bryan-guner\">stack-exchange</a></td>\n<td><a href=\"https://www.upwork.com/freelancers/~01bb1a3627e1e9c630?viewMode=1&#x26;s=1110580755057594368\">Upwork</a></td>\n<td><a href=\"https://www.notion.so/Overview-Of-Css-5d88b0bc9a73422a9be1481d599a56ba\">Notation</a></td>\n</tr>\n<tr>\n<td><a href=\"https://glitch.com/@bgoonz\">Glitch</a></td>\n<td><a href=\"https://app.netlify.com/user/settings#profile\">Netlify</a></td>\n<td><a href=\"https://angel.co/u/bryan-guner\">AngelList</a></td>\n<td><a href=\"https://stackshare.io/bryanguner\">StackShare</a></td>\n</tr>\n<tr>\n<td><a href=\"http://plnkr.co/account/plunks\">Plunk</a></td>\n<td><a href=\"https://dribbble.com/bgoonz4242?onboarding=true\">Dribble</a></td>\n<td><a href=\"https://app.contentful.com/spaces/lelpu0ihaz11/assets?id=MocOPmmNliLn6PPv\">contentful</a></td>\n<td><a href=\"https://giphy.com/channel/bryanguner\">giphy</a></td>\n</tr>\n</tbody>\n</table>\n<p>|</p>"
                },
                {
                    "url": "/docs/faq/",
                    "relativePath": "docs/faq/index.md",
                    "relativeDir": "docs/faq",
                    "base": "index.md",
                    "name": "index",
                    "frontmatter": {
                        "title": "FAQ",
                        "excerpt": "In this section you'll find commonly asked questions regarding the Libris theme. If you have questions, don’t hesitate to ask us directly.",
                        "seo": {
                            "title": "FAQ",
                            "description": "This is the faqpage",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "FAQ", "keyName": "property" },
                                { "name": "og:description", "value": "This is the faqpage", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "FAQ" },
                                { "name": "twitter:description", "value": "This is the faqpage" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<h4>What's the most useful business-related book you've ever read?</h4>\n<blockquote>\n<p>A Random Walk Down Wall Street</p>\n</blockquote>\n<h4>What's your favorite non-business book?</h4>\n<blockquote>\n<p>Hitchhiker's Guide To The Galaxy</p>\n</blockquote>\n<h4>If money were not an issue, what would you be doing right now?</h4>\n<blockquote>\n<p>Designing recording software/hardware and using it</p>\n</blockquote>\n<h4>What words of advice would you give your younger self?</h4>\n<blockquote>\n<p>Try harder and listen to your parents more (the latter bit of advice would be almost certain to fall on deaf ears lol)</p>\n</blockquote>\n<h4>What's the most creative thing you've ever done?</h4>\n<blockquote>\n<p>I built a platform that listens to a guitarist's performance and automatically triggers guitar effects at the appropriate time in the song.</p>\n</blockquote>\n<h4>Which founders or startups do you most admire?</h4>\n<blockquote>\n<p>Is it to basic to say Tesla... I know they're prevalent now but I've been an avid fan since as early as 2012.</p>\n</blockquote>\n<h4>What's your super power?</h4>\n<blockquote>\n<p>Having really good ideas and forgetting them moments later.</p>\n</blockquote>\n<h4>What's the best way for people to get in touch with you?</h4>\n<blockquote>\n<p>A text</p>\n</blockquote>\n<h4>What aspects of your work are you most passionate about?</h4>\n<p>Creating things that change my every day life.</p>\n<h4>What was the most impactful class you took in school?</h4>\n<blockquote>\n<p>Modern Physics... almost changed my major after that class... but at the end of the day engineering was a much more fiscally secure avenue.</p>\n</blockquote>\n<h4>What's something you wish you had done years earlier?</h4>\n<blockquote>\n<p>Learned to code ... and sing</p>\n</blockquote>\n<h4>What words of wisdom do you live by?</h4>\n<blockquote>\n<p>*Disclaimer: The following wisdom is very cliche ... but... \"Be the change that you wish to see in the world.\"</p>\n</blockquote>"
                },
                {
                    "url": "/docs/interact/jupyter-notebooks/",
                    "relativePath": "docs/interact/jupyter-notebooks.md",
                    "relativeDir": "docs/interact",
                    "base": "jupyter-notebooks.md",
                    "name": "jupyter-notebooks",
                    "frontmatter": {
                        "title": "Jupyter Notebooks",
                        "weight": 0,
                        "excerpt": "lorem-ipsum",
                        "seo": { "title": "", "description": "", "robots": [], "extra": [], "type": "stackbit_page_meta" },
                        "template": "docs"
                    },
                    "html": "<p>|</p>"
                },
                {
                    "url": "/docs/links/",
                    "relativePath": "docs/links/index.md",
                    "relativeDir": "docs/links",
                    "base": "index.md",
                    "name": "index",
                    "frontmatter": {
                        "title": "Medium Medium Links",
                        "excerpt": "We'd love it if you participate in the Web-Dev-Hubcommunity. Find out how to get connected.",
                        "seo": {
                            "title": "Medium Links",
                            "description": "This is the community page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Medium Links", "keyName": "property" },
                                { "name": "og:description", "value": "This is the community page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "Medium Links" },
                                { "name": "twitter:description", "value": "This is the community page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<ul>\n<li><a href=\"https://bryanguner.medium.com/introductory-react-part-2-cda01615a186?source=your_stories_page-------------------------------------\">introductory-react-part-2</a></li>\n<li><a href=\"https://bryanguner.medium.com/a-very-quick-guide-to-calculating-big-o-computational-complexity-eb1557e85fa3?source=your_stories_page-------------------------------------\">a-very-quick-guide-to-calculating-big-o-computational-complexity</a></li>\n<li><a href=\"https://javascript.plainenglish.io/introduction-to-react-for-complete-beginners-8021738aa1ad?source=your_stories_page-------------------------------------\">introduction-to-react-for-complete-beginners</a></li>\n<li><a href=\"https://javascript.plainenglish.io/scheduling-settimeout-and-setinterval-fcb2f40d16f7?source=your_stories_page-------------------------------------\">scheduling-settimeout-and-setinterval</a></li>\n<li><a href=\"https://bryanguner.medium.com/css-animations-d196a20099a5?source=your_stories_page-------------------------------------\">css-animations</a></li>\n<li><a href=\"https://bryanguner.medium.com/these-are-the-bash-shell-commands-that-stand-between-me-and-insanity-984865ba5d1b?source=your_stories_page-------------------------------------\">these-are-the-bash-shell-commands-that-stand-between-me-and-insanity</a></li>\n<li><a href=\"https://bryanguner.medium.com/how-to-implement-native-es6-data-structures-using-arrays-objects-ce953b9f6a07?source=your_stories_page-------------------------------------\">how-to-implement-native-es6-data-structures-using-arrays-objects</a></li>\n<li><a href=\"https://medium.com/codex/objects-in-javascript-cc578a781e1d?source=your_stories_page-------------------------------------\">objects-in-javascript</a></li>\n<li><a href=\"https://javascript.plainenglish.io/absolute-beginners-guide-to-javascript-part-1-e222d166b6e1?source=your_stories_page-------------------------------------\">absolute-beginners-guide-to-javascript-part1</a></li>\n<li><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-4-fd686892b9eb?source=your_stories_page-------------------------------------\">web-developer-resource-list-part-4</a></li>\n<li><a href=\"https://medium.com/codex/vscode-extensions-specifically-for-javascript-development-ea91305cbd4a?source=your_stories_page-------------------------------------\">vscode-extensions-specifically-for-javascript-development</a></li>\n<li><a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b?source=your_stories_page-------------------------------------\">a-list-of-all-of-my-articles-to-link-to-future-posts</a></li>\n<li><a href=\"https://javascript.plainenglish.io/lists-stacks-and-queues-in-javascript-88466fae0fbb?source=your_stories_page-------------------------------------\">lists-stacks-and-queues-in-javascript</a></li>\n<li><a href=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a?source=your_stories_page-------------------------------------\">web-development-resources-part-3</a></li>\n<li><a href=\"https://medium.com/codex/web-development-interview-part-3-826ae81a9107?source=your_stories_page-------------------------------------\">web-development-interview-part-3</a></li>\n<li><a href=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6?source=your_stories_page-------------------------------------\">running-list-of-interesting-articles-tools</a></li>\n<li><a href=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24?source=your_stories_page-------------------------------------\">the-best-cloud-based-code-playgrounds-of-2021-part-1</a></li>\n<li><a href=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443?source=your_stories_page-------------------------------------\">front-end-interview-questions-part-2</a></li>\n<li><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263?source=your_stories_page-------------------------------------\">web-developer-resource-list-part-2</a></li>\n<li><a href=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a?source=your_stories_page-------------------------------------\">http-basics</a></li>\n<li><a href=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35?source=your_stories_page-------------------------------------\">javascript-frameworks-libraries</a></li>\n<li><a href=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74?source=your_stories_page-------------------------------------\">my-take-on-awesome-javascript</a></li>\n<li><a href=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931?source=your_stories_page-------------------------------------\">get-started-with-vscode-extensions</a></li>\n<li><a href=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f?source=your_stories_page-------------------------------------\">my-favorite-vscode-themes</a></li>\n<li><a href=\"https://levelup.gitconnected.com/object-oriented-programming-in-javascript-d45007d06333?source=your_stories_page-------------------------------------\">object-oriented-programming-in-javascript</a></li>\n<li><a href=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1?source=your_stories_page-------------------------------------\">javascript-rotate-array-problemwalkthrough</a></li>\n<li><a href=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc?source=your_stories_page-------------------------------------\">super-simple-intro-to-html-651d695f9bc</a></li>\n<li><a href=\"https://medium.com/codex/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98?source=your_stories_page-------------------------------------\">everything-you-need-to-know-about-relational-databases-sql-postgresql</a></li>\n<li><a href=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107?source=your_stories_page-------------------------------------\">understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107</a></li>\n<li><a href=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db?source=your_stories_page-------------------------------------\">complete-javascript-reference-guide-64306cd6b0db</a></li>\n</ul>"
                },
                {
                    "url": "/docs/links/medium-links/",
                    "relativePath": "docs/links/medium-links.md",
                    "relativeDir": "docs/links",
                    "base": "medium-links.md",
                    "name": "medium-links",
                    "frontmatter": {
                        "title": "Medium Medium Links",
                        "excerpt": "We'd love it if you participate in the Web-Dev-Hubcommunity. Find out how to get connected.",
                        "seo": {
                            "title": "Medium Links",
                            "description": "This is the community page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Medium Links", "keyName": "property" },
                                { "name": "og:description", "value": "This is the community page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "Medium Links" },
                                { "name": "twitter:description", "value": "This is the community page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<ul>\n<li><a href=\"https://bryanguner.medium.com/introductory-react-part-2-cda01615a186?source=your_stories_page-------------------------------------\">introductory-react-part-2</a></li>\n<li><a href=\"https://bryanguner.medium.com/a-very-quick-guide-to-calculating-big-o-computational-complexity-eb1557e85fa3?source=your_stories_page-------------------------------------\">a-very-quick-guide-to-calculating-big-o-computational-complexity</a></li>\n<li><a href=\"https://javascript.plainenglish.io/introduction-to-react-for-complete-beginners-8021738aa1ad?source=your_stories_page-------------------------------------\">introduction-to-react-for-complete-beginners</a></li>\n<li><a href=\"https://javascript.plainenglish.io/scheduling-settimeout-and-setinterval-fcb2f40d16f7?source=your_stories_page-------------------------------------\">scheduling-settimeout-and-setinterval</a></li>\n<li><a href=\"https://bryanguner.medium.com/css-animations-d196a20099a5?source=your_stories_page-------------------------------------\">css-animations</a></li>\n<li><a href=\"https://bryanguner.medium.com/these-are-the-bash-shell-commands-that-stand-between-me-and-insanity-984865ba5d1b?source=your_stories_page-------------------------------------\">these-are-the-bash-shell-commands-that-stand-between-me-and-insanity</a></li>\n<li><a href=\"https://bryanguner.medium.com/how-to-implement-native-es6-data-structures-using-arrays-objects-ce953b9f6a07?source=your_stories_page-------------------------------------\">how-to-implement-native-es6-data-structures-using-arrays-objects</a></li>\n<li><a href=\"https://medium.com/codex/objects-in-javascript-cc578a781e1d?source=your_stories_page-------------------------------------\">objects-in-javascript</a></li>\n<li><a href=\"https://javascript.plainenglish.io/absolute-beginners-guide-to-javascript-part-1-e222d166b6e1?source=your_stories_page-------------------------------------\">absolute-beginners-guide-to-javascript-part1</a></li>\n<li><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-4-fd686892b9eb?source=your_stories_page-------------------------------------\">web-developer-resource-list-part-4</a></li>\n<li><a href=\"https://medium.com/codex/vscode-extensions-specifically-for-javascript-development-ea91305cbd4a?source=your_stories_page-------------------------------------\">vscode-extensions-specifically-for-javascript-development</a></li>\n<li><a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b?source=your_stories_page-------------------------------------\">a-list-of-all-of-my-articles-to-link-to-future-posts</a></li>\n<li><a href=\"https://javascript.plainenglish.io/lists-stacks-and-queues-in-javascript-88466fae0fbb?source=your_stories_page-------------------------------------\">lists-stacks-and-queues-in-javascript</a></li>\n<li><a href=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a?source=your_stories_page-------------------------------------\">web-development-resources-part-3</a></li>\n<li><a href=\"https://medium.com/codex/web-development-interview-part-3-826ae81a9107?source=your_stories_page-------------------------------------\">web-development-interview-part-3</a></li>\n<li><a href=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6?source=your_stories_page-------------------------------------\">running-list-of-interesting-articles-tools</a></li>\n<li><a href=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24?source=your_stories_page-------------------------------------\">the-best-cloud-based-code-playgrounds-of-2021-part-1</a></li>\n<li><a href=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443?source=your_stories_page-------------------------------------\">front-end-interview-questions-part-2</a></li>\n<li><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263?source=your_stories_page-------------------------------------\">web-developer-resource-list-part-2</a></li>\n<li><a href=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a?source=your_stories_page-------------------------------------\">http-basics</a></li>\n<li><a href=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35?source=your_stories_page-------------------------------------\">javascript-frameworks-libraries</a></li>\n<li><a href=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74?source=your_stories_page-------------------------------------\">my-take-on-awesome-javascript</a></li>\n<li><a href=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931?source=your_stories_page-------------------------------------\">get-started-with-vscode-extensions</a></li>\n<li><a href=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f?source=your_stories_page-------------------------------------\">my-favorite-vscode-themes</a></li>\n<li><a href=\"https://levelup.gitconnected.com/object-oriented-programming-in-javascript-d45007d06333?source=your_stories_page-------------------------------------\">object-oriented-programming-in-javascript</a></li>\n<li><a href=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1?source=your_stories_page-------------------------------------\">javascript-rotate-array-problemwalkthrough</a></li>\n<li><a href=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc?source=your_stories_page-------------------------------------\">super-simple-intro-to-html-651d695f9bc</a></li>\n<li><a href=\"https://medium.com/codex/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98?source=your_stories_page-------------------------------------\">everything-you-need-to-know-about-relational-databases-sql-postgresql</a></li>\n<li><a href=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107?source=your_stories_page-------------------------------------\">understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107</a></li>\n<li><a href=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db?source=your_stories_page-------------------------------------\">complete-javascript-reference-guide-64306cd6b0db</a></li>\n</ul>"
                },
                {
                    "url": "/docs/quick-reference/docs/",
                    "relativePath": "docs/quick-reference/docs.md",
                    "relativeDir": "docs/quick-reference",
                    "base": "docs.md",
                    "name": "docs",
                    "frontmatter": {
                        "title": "Site Layout",
                        "subtitle": "Here are some of my github repositories to pay around with!",
                        "seo": { "title": "", "description": "", "robots": [], "extra": [], "type": "stackbit_page_meta" },
                        "template": "page",
                        "image": "images/perpetual-comet.jpeg"
                    },
                    "html": "<h1>My Top Repos / Websites:</h1>\n<ul>\n<li><a href=\"https://github.com/bgoonz/PYTHON_PRAC\">Python Practice</a></li>\n<li><a href=\"https://lambda-resources.netlify.app/\">Lambda Bootcamp Website</a></li>\n<li><a href=\"https://github.com/bgoonz/React_Notes_V3\">React Notes</a></li>\n<li><a href=\"https://github.com/bgoonz/Project-Showcase\">Project Showcase</a></li>\n<li><a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\">Data Structures &#x26; Algorithms</a></li>\n<li><a href=\"https://github.com/bgoonz/Lambda-Resource-Static-Assets\">Lambda Site Static Content Server</a></li>\n<li><a href=\"https://github.com/bgoonz/mini-project-showcase\">Mini-Project Showcase</a></li>\n<li><a href=\"https://github.com/bgoonz/Useful-Snippets-js\">Useful Snippets</a></li>\n<li><a href=\"https://github.com/bgoonz/Markdown-Templates\">Markdown Templates</a></li>\n<li><a href=\"https://github.com/bgoonz/zumzi-chat-messenger\">Zumzi Video Conferencing App (mesibo api backend)</a></li>\n</ul>"
                },
                {
                    "url": "/docs/links/my-websites/",
                    "relativePath": "docs/links/my-websites.md",
                    "relativeDir": "docs/links",
                    "base": "my-websites.md",
                    "name": "my-websites",
                    "frontmatter": {
                        "title": "My Websites",
                        "excerpt": "In this section you'll learn how to add syntax highlighting, examples, callouts and much more.",
                        "seo": {
                            "title": "My Websites",
                            "description": "This is the My Websites page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "My Websites", "keyName": "property" },
                                { "name": "og:description", "value": "This is the My Websites page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "My Websites" },
                                { "name": "twitter:description", "value": "This is the My Websites page" }
                            ]
                        },
                        "template": "docs",
                        "weight": 1
                    },
                    "html": "<ol>\n<li><a href=\"https://web-dev-resource-hub.netlify.app\"> WEB DEV RESOURCE HUB </a></li>\n<li><a href=\"https://learning-redux42.netlify.app/\">Learn Redux</a></li>\n<li><a href=\"https://trusting-dijkstra-4d3b17.netlify.app\"> Data Structures Website </a></li>\n<li><a href=\"https://web-dev-interview-prep-quiz-website.netlify.app/intro-js2.html\">Web-Dev-Quizzes</a></li>\n<li><a href=\"https://zen-lamport-5aab2c.netlify.app\"> Recursion </a></li>\n<li><a href=\"https://csb-ov0d1-bgoonz.vercel.app/\">React Documentation Site</a></li>\n<li><a href=\"https://amazing-hodgkin-33aea6.netlify.app\"> Blogs-from-webdevhub </a></li>\n<li><a href=\"https://angry-fermat-dcf5dd.netlify.app\"> Realty Website Demo </a></li>\n<li><a href=\"https://boring-heisenberg-f425d8.netlify.app\"> Best-Prac &#x26; Tools </a></li>\n<li><a href=\"https://site-analysis.netlify.app/\">site-analysis</a></li>\n<li><a href=\"https://clever-bartik-b5ba19.netlify.app\"> a/AOpen Notes </a></li>\n<li><a href=\"https://code-playground.netlify.app\"> Iframe Embed Playground </a></li>\n<li><a href=\"https://condescending-lewin-c96727.netlify.app\"> Triggered Effects Guitar Platform </a></li>\n<li><a href=\"https://determined-dijkstra-666766.netlify.app\"> Live Form </a></li>\n<li><a href=\"https://determined-dijkstra-ee7390.netlify.app\"> Interview Questions </a></li>\n<li><a href=\"https://eager-northcutt-456076.netlify.app\"> Resources Compilation </a></li>\n<li><a href=\"https://ecstatic-jang-593fd1.netlify.app\"> React Blog Depreciated </a></li>\n<li><a href=\"https://eloquent-sammet-ba1810.netlify.app\"> MihirBeg.com </a></li>\n<li><a href=\"https://embedable-content.netlify.app\"> Embeded Html Projects </a></li>\n<li><a href=\"https://festive-borg-e4d856.netlify.app\"> Cheat Sheets </a></li>\n<li><a href=\"https://focused-pasteur-0faac8.netlify.app\"> Early Version Of WebDevHub </a></li>\n<li><a href=\"https://gists42.netlify.app\"> My Gists </a></li>\n<li><a href=\"https://gracious-raman-474030.netlify.app\"> DS-Algo-Links </a></li>\n<li><a href=\"https://happy-mestorf-0f8e75.netlify.app\"> Video Chat App </a></li>\n<li><a href=\"https://hungry-shaw-30d504.netlify.app\"> Ciriculumn </a></li>\n<li><a href=\"https://inspiring-jennings-d14689.netlify.app\"> Cheat Sheets </a></li>\n<li><a href=\"https://links4242.netlify.app\"> Links </a></li>\n<li><a href=\"https://modest-booth-4e17df.netlify.app\"> Medium Articles </a></li>\n<li><a href=\"https://modest-torvalds-34afbc.netlify.app\"> NextJS Blog Template </a></li>\n<li><a href=\"https://modest-varahamihira-772b59.netlify.app\"> React Demo </a></li>\n<li><a href=\"https://nervous-swartz-0ab2cc.netlify.app\"> Ecomerce Norwex V1 </a></li>\n<li><a href=\"https://objective-borg-a327cd.netlify.app\"> Gifs </a></li>\n<li><a href=\"https://pedantic-wing-adbf82.netlify.app\"> Excel2HTML </a></li>\n<li><a href=\"https://pensive-meitner-1ea8c4.netlify.app\"> Data Structures Site </a></li>\n<li><a href=\"https://portfolio42.netlify.app\"> Portfolio </a></li>\n<li><a href=\"https://priceless-shaw-86ccb2.netlify.app\"> Page Templates </a></li>\n<li><a href=\"https://quizzical-mcnulty-fa09f2.netlify.app\"> Photo Gallary </a></li>\n<li><a href=\"https://relaxed-bhaskara-dc85ec.netlify.app\"> Coffee Website </a></li>\n<li><a href=\"https://romantic-hamilton-514b79.netlify.app\"> Awesome Resources </a></li>\n<li><a href=\"https://silly-lichterman-b22b5f.netlify.app\"> Cheat Sheets </a></li>\n<li><a href=\"https://silly-shirley-ec955e.netlify.app\"> Link City </a></li>\n<li><a href=\"https://stoic-mccarthy-2c335f.netlify.app\"> VSCODE Extensions </a></li>\n<li><a href=\"https://web-dev-resource-hub-manual-deploy.netlify.app\"> webdevhub manual attempt </a></li>\n<li><a href=\"https://wonderful-pasteur-392fbe.netlify.app\"> Norwex Resources </a></li>\n<li><a href=\"https://zen-bhabha-bd046f.netlify.app\">idk </a></li>\n<li><a href=\"https://getting-started42.herokuapp.com/\">heroku bare bones template</a></li>\n<li><a href=\"https://bad-reads42.herokuapp.com/\">bad reads</a></li>\n<li><a href=\"https://documentation-site-react2.vercel.app/\">docusaurus</a></li>\n<li><a href=\"https://app.stackbit.com/studio/609b2d7c71a5dd0016f36326\">stackbit</a></li>\n</ol>"
                },
                {
                    "url": "/docs/quick-reference/",
                    "relativePath": "docs/quick-reference/index.md",
                    "relativeDir": "docs/quick-reference",
                    "base": "index.md",
                    "name": "index",
                    "frontmatter": {
                        "title": "Quick Reference & Cheat Sheets",
                        "excerpt": "In this section you'll find basic information about Web-Dev-Hub and how to use it.",
                        "seo": {
                            "title": "Cheat Sheets",
                            "description": "This is the Cheat Sheets page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Cheat Sheets", "keyName": "property" },
                                { "name": "og:description", "value": "This is the Cheat Sheets page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "Cheat Sheets" },
                                { "name": "twitter:description", "value": "This is the Cheat Sheets page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<iframe src=\"https://inspiring-jennings-d14689.netlify.app/\" height=\"1600px\" width=\"100%\" style=\"zoom:0.75;align-self:center;\"></iframe>"
                },
                {
                    "url": "/docs/quick-reference/Emmet/",
                    "relativePath": "docs/quick-reference/Emmet.md",
                    "relativeDir": "docs/quick-reference",
                    "base": "Emmet.md",
                    "name": "Emmet",
                    "frontmatter": {
                        "title": "Emmet Cheat Sheet",
                        "excerpt": "In this section you'll find basic information about Web-Dev-Huband how to use it.",
                        "seo": {
                            "title": "Emmet Cheat Sheet",
                            "description": "This is the Emmet Cheat Sheet page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Emmet Cheat Sheet", "keyName": "property" },
                                { "name": "og:description", "value": "This is the Emmet Cheat Sheet page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "Emmet Cheat Sheet" },
                                { "name": "twitter:description", "value": "This is the Emmet Cheat Sheet page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<h1>Emmet Cheat Sheet</h1>\n<p>EMMET</p>\n<hr>\n<h3>Emmet Cheat Sheet</h3>\n<h3>EMMET</h3>\n<p><em>The a toolkit for web-developers</em></p>\n<h3>Introduction</h3>\n<p>Emmet is a productivity toolkit for web developers that uses expressions to generate HTML snippets.</p>\n<h3>Installation</h3>\n<p>Normally, installation for Emmet should be a straight-forward process from the package-manager, as most of the modern text editors support Emmet.</p>\n<h3>Usage</h3>\n<p>You can use Emmet in two ways:</p>\n<ul>\n<li><span id=\"856f\">Tab Expand Way: Type your emmet code and press <code>Tab</code> key</span></li>\n<li><span id=\"9aea\">Interactive Method: Press <code>alt + ctrl + Enter</code> and start typing your expressions. This should automatically generate HTML snippets on the fly.</span></li>\n</ul>\n<p><strong>This cheatsheet will assume that you press</strong><code>Tab</code><strong>after each expressions.</strong></p>\n<h3>HTML</h3>\n<h3>Generating HTML 5 DOCTYPE</h3>\n<p><code>html:5</code></p>\n<p>Will generate</p>\n<pre><code>&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n  &#x3C;meta charset=\"UTF-8\">\n  &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  &#x3C;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  &#x3C;title>Document&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<h3>Child items</h3>\n<p>Child items are created using <code>></code></p>\n<p><code>ul>li>p</code></p>\n<pre><code>&#x3C;ul>\n  &#x3C;li>\n    &#x3C;p>&#x3C;/p>\n  &#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<h3>Sibling Items</h3>\n<p>Sibling items are created using <code>+</code></p>\n<p><code>html>head+body</code></p>\n<pre><code>&#x3C;html>\n&#x3C;head>&#x3C;/head>\n&#x3C;body>\n\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<h3>Multiplication</h3>\n<p>Items can be multiplied by <code>*</code></p>\n<p><code>ul>li*5</code></p>\n<pre><code>&#x3C;ul>\n  &#x3C;li>&#x3C;/li>\n  &#x3C;li>&#x3C;/li>\n  &#x3C;li>&#x3C;/li>\n  &#x3C;li>&#x3C;/li>\n  &#x3C;li>&#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<h3>Grouping</h3>\n<p>Items can be grouped together using <code>()</code></p>\n<p><code>table>(tr>th*5)+tr>t*5</code></p>\n<pre><code>&#x3C;table>\n  &#x3C;tr>\n    &#x3C;th>&#x3C;/th>\n    &#x3C;th>&#x3C;/th>\n    &#x3C;th>&#x3C;/th>\n    &#x3C;th>&#x3C;/th>\n    &#x3C;th>&#x3C;/th>\n  &#x3C;/tr>\n  &#x3C;tr>\n    &#x3C;t>&#x3C;/t>\n    &#x3C;t>&#x3C;/t>\n    &#x3C;t>&#x3C;/t>\n    &#x3C;t>&#x3C;/t>\n    &#x3C;t>&#x3C;/t>\n  &#x3C;/tr>\n&#x3C;/table>\n</code></pre>\n<h3>Class and ID</h3>\n<p>Class and Id in Emmet can be done using  <code>.</code> and <code>#</code></p>\n<p><code>div.heading</code></p>\n<pre><code>&#x3C;div class=\"heading\">&#x3C;/div>\n</code></pre>\n<p><code>div#heading</code></p>\n<pre><code>&#x3C;div id=\"heading\">&#x3C;/div>\n</code></pre>\n<p>ID and Class can also be combined together</p>\n<p><code>div#heading.center</code></p>\n<pre><code>&#x3C;div id=\"heading\" class=\"center\">&#x3C;/div>\n</code></pre>\n<h3>Adding Content inside tags</h3>\n<p>Contents inside tags can be added using <code>{}</code></p>\n<p><code>h1{Emmet is awesome}+h2{Every front end developers should use this}+p{This is paragraph}*2</code></p>\n<pre><code>&#x3C;h1>Emmet is awesome&#x3C;/h1>\n&#x3C;h2>Every front end developers should use this&#x3C;/h2>\n&#x3C;p>This is paragraph&#x3C;/p>\n&#x3C;p>This is paragraph&#x3C;/p>\n</code></pre>\n<h3>Attributes inside HTML tags</h3>\n<p>Attributes can be added using <code>[]</code></p>\n<p><code>a[href=https://?google.com data-toggle=something target=_blank]</code></p>\n<pre><code>&#x3C;a href=\"https://?google.com\" data-toggle=\"something\" target=\"_blank\">&#x3C;/a>\n</code></pre>\n<h3>Numbering</h3>\n<p>Numbering can be done using <code>$</code></p>\n<p>You can use this inside tag or contents.</p>\n<p><code>h${This is so awesome $}*6</code></p>\n<pre><code>&#x3C;h1>This is so awesome 1&#x3C;/h1>\n&#x3C;h2>This is so awesome 2&#x3C;/h2>\n&#x3C;h3>This is so awesome 3&#x3C;/h3>\n&#x3C;h4>This is so awesome 4&#x3C;/h4>\n&#x3C;h5>This is so awesome 5&#x3C;/h5>\n&#x3C;h6>This is so awesome 6&#x3C;/h6>\n</code></pre>\n<p>Use <code>@-</code> to reverse the Numbering</p>\n<p><code>img[src=image$$@-.jpg]*5</code></p>\n<pre><code>&#x3C;img src=\"image05.jpg\" alt=\"\">\n&#x3C;img src=\"image04.jpg\" alt=\"\">\n&#x3C;img src=\"image03.jpg\" alt=\"\">\n&#x3C;img src=\"image02.jpg\" alt=\"\">\n&#x3C;img src=\"image01.jpg\" alt=\"\">\n</code></pre>\n<p>To start the numbering from specific number, use this way</p>\n<p><code>img[src=emmet$@100.jpg]*5</code></p>\n<pre><code>&#x3C;img src=\"emmet100.jpg\" alt=\"\">\n&#x3C;img src=\"emmet101.jpg\" alt=\"\">\n&#x3C;img src=\"emmet102.jpg\" alt=\"\">\n&#x3C;img src=\"emmet103.jpg\" alt=\"\">\n&#x3C;img src=\"emmet104.jpg\" alt=\"\">\n</code></pre>\n<h3>Tips</h3>\n<ul>\n<li><span id=\"b708\">Use <code>:</code> to expand known abbreviations</span></li>\n</ul>\n<p><code>input:date</code></p>\n<pre><code>&#x3C;input type=\"date\" name=\"\" id=\"\">\n</code></pre>\n<p><code>form:post</code></p>\n<pre><code>&#x3C;form action=\"\" method=\"post\">&#x3C;/form>\n</code></pre>\n<p><code>link:css</code></p>\n<pre><code>&#x3C;link rel=\"stylesheet\" href=\"style.css\">\n</code></pre>\n<ul>\n<li><span id=\"d43e\">Building Navbar</span></li>\n</ul>\n<p><code>.navbar>ul>li*3>a[href=#]{Item $@-}</code></p>\n<pre><code>&#x3C;div class=\"navbar\">\n  &#x3C;ul>\n    &#x3C;li>&#x3C;a href=\"#\">Item 3&#x3C;/a>&#x3C;/li>\n    &#x3C;li>&#x3C;a href=\"#\">Item 2&#x3C;/a>&#x3C;/li>\n    &#x3C;li>&#x3C;a href=\"#\">Item 1&#x3C;/a>&#x3C;/li>\n  &#x3C;/ul>\n&#x3C;/div>\n</code></pre>\n<h3>CSS</h3>\n<p>Emmet works surprisingly well with css as well.</p>\n<ul>\n<li><span id=\"68eb\"><code>f:l</code></span></li>\n</ul>\n<!-- -->\n<pre><code>float: left;\n</code></pre>\n<p>You can also use any options n/r/l</p>\n<ul>\n<li><span id=\"d9cc\"><code>pos:a­</code></span></li>\n</ul>\n<!-- -->\n<pre><code>position: absolute;\n</code></pre>\n<p>Also use any options, pos:a/r/f</p>\n<ul>\n<li><span id=\"5b67\"><code>d:n/b­/f/­i/ib</code></span></li>\n</ul>\n<p><code>d:ib</code></p>\n<pre><code>display: inline-block;\n</code></pre>\n<ul>\n<li><span id=\"26f6\">You can use <code>m</code> for margin and <code>p</code> for padding followed by direction</span></li>\n</ul>\n<p><code>mr</code> -> <code>margin-right</code></p>\n<p><code>pr</code> -> <code>padding-right</code></p>\n<ul>\n<li><span id=\"01cc\"><code>@f</code> will result in</span></li>\n</ul>\n<!-- -->\n<pre><code>@font-face {\n  font-family:;\n  src:url();\n}\n</code></pre>\n<p>You can also use these shorthands</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*h8hsUrJNyVRLYqBQP63DCA.png\" class=\"graf-image\" /></figure>#### If you found this guide helpful feel free to checkout my github/gists where I host similar content:\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--p-anchor\">bgoonz’s gists · GitHub</a></p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>Or Checkout my personal Resource Site:</p>\n<p><a href=\"https://goofy-euclid-1cd736.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://goofy-euclid-1cd736.netlify.app/\"><strong>a/A-Student-Resources</strong><br />\n<em>Edit description</em>goofy-euclid-1cd736.netlify.app</a><a href=\"https://goofy-euclid-1cd736.netlify.app/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/24758e628d37\">March 6, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/emmet-cheat-sheet-24758e628d37\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on May 23, 2021.</p>"
                },
                {
                    "url": "/docs/quick-reference/installation/",
                    "relativePath": "docs/quick-reference/installation.md",
                    "relativeDir": "docs/quick-reference",
                    "base": "installation.md",
                    "name": "installation",
                    "frontmatter": {
                        "title": "Installation",
                        "weight": 1,
                        "seo": {
                            "title": "Installation",
                            "description": "This is the installation page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Installation", "keyName": "property" },
                                { "name": "og:description", "value": "This is the installation page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "Installation" },
                                { "name": "twitter:description", "value": "This is the installation page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<h1>Basic Web Development Environment Setup</h1>\n<blockquote>\n<p>Windows Subsystem for Linux (WSL) and Ubuntu</p>\n</blockquote>\n<h2>Windows Subsystem for Linux (WSL) and Ubuntu</h2>\n<p><a href=\"https://bryanguner.medium.com/?source=post_page-----9f36c3f15afe--------------------------------\"><img src=\"https://miro.medium.com/fit/c/96/96/1*ao1cHo7EQ4faDV8YNJwh_Q.png\" alt=\"Bryan Guner\"></a></p>\n<p>‌</p>\n<p><img src=\"https://miro.medium.com/max/60/0*aqKP1drNHmNm34zz.jpg?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/1600/0*aqKP1drNHmNm34zz.jpg\"></p>\n<p>Test if you have Ubuntu installed by typing “Ubuntu” in the search box in the bottom app bar that reads “Type here to search”. If you see a search result that reads <strong>“Ubuntu 20.04 LTS”</strong> with “App” under it, then you have it installed.</p>\n<p>‌</p>\n<ol>\n<li>In the application search box in the bottom bar, type “PowerShell” to find the application named “Windows PowerShell”</li>\n<li>Right-click on “Windows PowerShell” and choose “Run as administrator” from the popup menu</li>\n<li>In the blue PowerShell window, type the following: <code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code></li>\n<li>Restart your computer</li>\n<li>In the application search box in the bottom bar, type “Store” to find the application named “Microsoft Store”</li>\n<li>Click “Microsoft Store”</li>\n<li>Click the “Search” button in the upper-right corner of the window</li>\n<li>Type in “Ubuntu”</li>\n<li>Click “Run Linux on Windows (Get the apps)”</li>\n<li>Click the orange tile labeled <strong>“Ubuntu”</strong> Note that there are 3 versions in the Microsoft Store… you want the one just entitled ‘Ubuntu’</li>\n<li>Click “Install”</li>\n<li>After it downloads, click “Launch”</li>\n<li>If you get the option, pin the application to the task bar. Otherwise, right-click on the orange Ubuntu icon in the task bar and choose “Pin to taskbar”</li>\n<li>When prompted to “Enter new UNIX username”, type your first name with no spaces</li>\n<li>When prompted, enter and retype a password for this UNIX user (it can be the same as your Windows password)</li>\n<li>Confirm your installation by typing the command <code>whoami ‘as in who-am-i'</code>followed by Enter at the prompt (it should print your first name)</li>\n<li>You need to update your packages, so type <code>sudo apt update</code> (if prompted for your password, enter it)</li>\n<li>You need to upgrade your packages, so type <code>sudo apt upgrade</code> (if prompted for your password, enter it)</li>\n</ol>\n<p>Git comes with Ubuntu, so there’s nothing to install. However, you should configure it using the following instructions.</p>\n<p>‌Open an Ubuntu terminal if you don’t have one open already.</p>\n<ol>\n<li>You need to configure Git, so type <code>git config --global user.name \"Your Name\"</code> with replacing \"Your Name\" with your real name.</li>\n<li>You need to configure Git, so type <code>git config --global user.email your@email.com</code> with replacing \"<a href=\"mailto:your@email.com\">your@email.com</a>\" with your real email.</li>\n</ol>\n<p><strong>Note: if you want git to remember your login credentials type:</strong></p>\n<p>$ git config --global credential.helper store</p>\n<p>‌</p>\n<p>Test if you have Chrome installed by typing “Chrome” in the search box in the bottom app bar that reads “Type here to search”. If you see a search result that reads “Chrome” with “App” under it, then you have it installed. Otherwise, follow these instructions to install Google Chrome.</p>\n<p>‌</p>\n<ol>\n<li>Open Microsoft Edge, the blue “e” in the task bar, and type in <a href=\"http://chrome.google.com/\">http://chrome.google.com</a>. Click the “Download Chrome” button. Click the “Accept and Install” button after reading the terms of service. Click “Save” in the “What do you want to do with ChromeSetup.exe” dialog at the bottom of the window. When you have the option to “Run” it, do so. Answer the questions as you’d like. Set it as the default browser.</li>\n<li>Right-click on the Chrome icon in the task bar and choose “Pin to taskbar”.</li>\n</ol>\n<p>Test if you have Node.js installed by opening an Ubuntu terminal and typing <code>node --version</code>. If it reports \"Command 'node' not found\", then you need to follow these directions.</p>\n<ol>\n<li>In the Ubuntu terminal, type <code>sudo apt update</code> and press Enter</li>\n<li>In the Ubuntu terminal, type <code>sudo apt install build-essential</code> and press Enter</li>\n<li>In the Ubuntu terminal, type <code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash</code> and press Enter</li>\n<li>In the Ubuntu terminal, type <code>. ./.bashrc</code> and press Enter</li>\n<li>In the Ubuntu terminal, type <code>nvm install --lts</code> and press Enter</li>\n<li>Confirm that <strong>node</strong> is installed by typing <code>node --version</code> and seeing it print something that is not \"Command not found\"!</li>\n</ol>\n<p>You will often have to download a zip file and unzip it. It is easier to do this from the command line. So we need to install a linux unzip utility.</p>\n<p>‌In the Ubuntu terminal type: <code>sudo apt install unzip</code> and press Enter</p>\n<p>‌Mocha.js</p>\n<p>Test if you have Mocha.js installed by opening an Ubuntu terminal and typing <code>which mocha</code>. If it prints a path, then you're good. Otherwise, if it prints nothing, install Mocha.js by typing <code>npm install -g mocha</code>.</p>\n<p>‌</p>\n<p>Ubuntu does not come with Python 3. Install it using the command <code>sudo apt install python3</code>. Test it by typing <code>python3 --version</code> and seeing it print a number.</p>\n<p>‌</p>\n<p>‌</p>\n<p>As of the time of writing of this document, WSL has an issue renaming or deleting files if Visual Studio Code is open. So before doing any linux commands which manipulate files, make sure you <strong>close</strong> Visual Studio Code before running those commands in the Ubuntu terminal.</p>\n<p>‌</p>\n<p># Installing build essentials<br>\nsudo apt-get install -y build-essential libssl-dev<br>\n# Nodejs and NVM<br>\ncurl -o- <a href=\"https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh\">https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh</a> | bash<br>\nsource ~/.profile<br>\nsudo nvm install 7.10.0<br>\nsudo nvm use 7.10.0<br>\nnode -v  </p>\n<h1>nodemon</h1>\n<p>sudo npm install -g nodemon<br>\nsudo npm install -g loopback-cli<br>\n# Forever to run nodejs scripts forever<br>\nsudo npm install forever -g<br>\n# Git - a version control system<br>\nsudo apt-get update<br>\nsudo apt-get install -y git xclip<br>\n# Grunt - an automated task runner<br>\nsudo npm install -g grunt-cli<br>\n# Bower - a dependency manager<br>\nsudo npm install -g bower<br>\n# Yeoman - for generators<br>\nsudo npm install -g yo<br>\n# maven<br>\nsudo apt-get install maven -y<br>\n# Gulp - an automated task runner<br>\nsudo npm install -g gulp-cli<br>\n# Angular FullStack - My favorite MEAN boilerplate (MEAN = MongoDB, Express, Angularjs, Nodejs)<br>\nsudo npm install -g generator-angular-fullstack<br>\n# Vim, Curl, Python - Some random useful stuff<br>\nsudo apt-get install -y vim curl python-software-properties<br>\nsudo apt-get install -y python-dev, python-pip<br>\nsudo apt-get install -y libkrb5-dev<br>\n# Installing JDK and JRE<br>\nsudo apt-get install -y default-jre<br>\nsudo apt-get install -y default-jdk<br>\n# Archive Extractors<br>\nsudo apt-get install -y unace unrar zip unzip p7zip-full p7zip-rar sharutils rar uudeview mpack arj cabextract file-roller<br>\n# FileZilla - a FTP client<br>\nsudo apt-get install -y filezilla</p>\n<h2>If you found this guide helpful feel free to checkout my github/gists where I host similar content:</h2>\n<p><a href=\"https://gist.github.com/bgoonz\">bgoonz’s gists · GitHub</a></p>\n<p>Or Checkout my personal Resource Site:</p>\n<p><a href=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\">Source</a></p>"
                },
                {
                    "url": "/docs/react/createReactApp/",
                    "relativePath": "docs/react/createReactApp.md",
                    "relativeDir": "docs/react",
                    "base": "createReactApp.md",
                    "name": "createReactApp",
                    "frontmatter": {
                        "title": "npx-create-react-app",
                        "weight": 1,
                        "seo": {
                            "title": "npx-create-react-app",
                            "description": "This is the npx-create-react-app page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "npx-create-react-app", "keyName": "property" },
                                { "name": "og:description", "value": "This is the npx-create-react-app page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "npx-create-react-app" },
                                { "name": "twitter:description", "value": "This is the npx-create-react-app page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<hr>\n<h2>description: takes soooo much time!</h2>\n<h1>Generating React Project</h1>\n<p>takes soooo much time!</p>\n<pre><code class=\"language-text\">npx create-react-app my-app\ncd my-app\nnpm start\n</code></pre>\n<h4>Babel can translate between different versions of javascript so that your code can run on browsers that are limited to ES5 compatibility... included by default with every new react project.</h4>\n<pre><code class=\"language-bash\">|15:25:30|bryan@LAPTOP-9LGJ3JGS:[05-installing-nodejs] 05-installing-nodejs_exitstatus:0__________________________________________________________o>\n\nnpx create-react-app my-app\ny-app\nnpm start\nCreating a new React app in /mnt/c/MY-WEB-DEV/10-React-V3/05-installing-nodejs/my-app.\n\n\nInstalling packages. This might take a couple of minutes.\nInstalling react, react-dom, and react-scripts with cra-template...\n\nyarn add v1.22.5\n[1/4] Resolving packages...\n[2/4] Fetching packages...\ninfo fsevents@1.2.13: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@1.2.13\" is an optional dependency and failed compatibility check. Excluding it from installation.\ninfo fsevents@2.3.2: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@2.3.2\" is an optional dependency and failed compatibility check. Excluding it from installation.\n[3/4] Linking dependencies...\nwarning \"react-scripts > @typescript-eslint/eslint-plugin > tsutils@3.20.0\" has unmet peer dependency \"typescript@>=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta\".\n[----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------[4/4] Building fresh packages...\nsuccess Saved lockfile.\nsuccess Saved 7 new dependencies.\ninfo Direct dependencies\n├─ cra-template@1.1.2\n├─ react-dom@17.0.2\n├─ react-scripts@4.0.3\n└─ react@17.0.2\ninfo All dependencies\n├─ cra-template@1.1.2\n├─ immer@8.0.1\n├─ react-dev-utils@11.0.4\n├─ react-dom@17.0.2\n├─ react-scripts@4.0.3\n├─ react@17.0.2\n└─ scheduler@0.20.2\nDone in 768.43s.\n\nInstalling template dependencies using yarnpkg...\nyarn add v1.22.5\n[1/4] Resolving packages...\n[2/4] Fetching packages...\ninfo fsevents@2.3.2: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@2.3.2\" is an optional dependency and failed compatibility check. Excluding it from installation.\ninfo fsevents@1.2.13: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@1.2.13\" is an optional dependency and failed compatibility check. Excluding it from installation.\n[3/4] Linking dependencies...\nwarning \"react-scripts > @typescript-eslint/eslint-plugin > tsutils@3.20.0\" has unmet peer dependency \"typescript@>=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta\".\nwarning \" > @testing-library/user-event@12.8.3\" has unmet peer dependency \"@testing-library/dom@>=7.21.4\".\n[4/4] Building fresh packages...\nsuccess Saved lockfile.\nsuccess Saved 17 new dependencies.\ninfo Direct dependencies\n├─ @testing-library/jest-dom@5.11.10\n├─ @testing-library/react@11.2.5\n├─ @testing-library/user-event@12.8.3\n├─ react-dom@17.0.2\n├─ react@17.0.2\n└─ web-vitals@1.1.1\ninfo All dependencies\n├─ @testing-library/dom@7.30.1\n├─ @testing-library/jest-dom@5.11.10\n├─ @testing-library/react@11.2.5\n├─ @testing-library/user-event@12.8.3\n├─ @types/aria-query@4.2.1\n├─ @types/jest@26.0.22\n├─ @types/testing-library__jest-dom@5.9.5\n├─ css.escape@1.5.1\n├─ css@3.0.0\n├─ dom-accessibility-api@0.5.4\n├─ lz-string@1.4.4\n├─ min-indent@1.0.1\n├─ react-dom@17.0.2\n├─ react@17.0.2\n├─ redent@3.0.0\n├─ strip-indent@3.0.0\n└─ web-vitals@1.1.1\nDone in 706.12s.\nRemoving template package using yarnpkg...\n\nyarn remove v1.22.5\n[1/2] Removing module cra-template...\n[2/2] Regenerating lockfile and installing missing dependencies...\ninfo fsevents@2.3.2: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@2.3.2\" is an optional dependency and failed compatibility check. Excluding it from installation.\ninfo fsevents@1.2.13: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@1.2.13\" is an optional dependency and failed compatibility check. Excluding it from installation.\nwarning \" > @testing-library/user-event@12.8.3\" has unmet peer dependency \"@testing-library/dom@>=7.21.4\".\nwarning \"react-scripts > @typescript-eslint/eslint-plugin > tsutils@3.20.0\" has unmet peer dependency \"typescript@>=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta\".\nsuccess Uninstalled packages.\nDone in 619.62s.\n\nSuccess! Created my-app at /mnt/c/MY-WEB-DEV/10-React-V3/05-installing-nodejs/my-app\nInside that directory, you can run several commands:\n\n  yarn start\n    Starts the development server.\n\n  yarn build\n    Bundles the app into static files for production.\n\n  yarn test\n    Starts the test runner.\n\n  yarn eject\n    Removes this tool and copies build dependencies, configuration files\n    and scripts into the app directory. If you do this, you can’t go back!\n\nWe suggest that you begin by typing:\n\n  cd my-app\n  yarn start\n\nCompiled successfully!\n\nYou can now view my-app in the browser.\n\n  Local:            http://localhost:3000\n  On Your Network:  http://172.25.168.12:3000\n\nNote that the development build is not optimized.\nTo create a production build, use yarn build.\n</code></pre>"
                },
                {
                    "url": "/docs/quick-reference/new-repo-instructions/",
                    "relativePath": "docs/quick-reference/new-repo-instructions.md",
                    "relativeDir": "docs/quick-reference",
                    "base": "new-repo-instructions.md",
                    "name": "new-repo-instructions",
                    "frontmatter": {
                        "title": "new-repo-git",
                        "weight": 2,
                        "seo": {
                            "title": "new-repo-git",
                            "description": "This is the new-repo-git page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "new-repo-git", "keyName": "property" },
                                { "name": "og:description", "value": "This is the new-repo-git page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "new-repo-git" },
                                { "name": "twitter:description", "value": "This is the new-repo-git page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<h3>...or create a new repository on the command line</h3>\n<pre><code>echo \"# React-Self-Study\" >> README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M master\ngit remote add origin https://github.com/bgoonz/React-Self-Study.git\ngit push -u origin master\n</code></pre>\n<h3>...or push an existing repository from the command line</h3>\n<pre><code>git remote add origin https://github.com/bgoonz/React-Self-Study.git\ngit branch -M master\ngit push -u origin master\n</code></pre>\n<h3>...or import code from another repository</h3>\n<p>You can initialize this repository with code from a Subversion, Mercurial, or TFS project.</p>"
                },
                {
                    "url": "/docs/react/react2/",
                    "relativePath": "docs/react/react2.md",
                    "relativeDir": "docs/react",
                    "base": "react2.md",
                    "name": "react2",
                    "frontmatter": {
                        "title": "Intro To React",
                        "weight": 0,
                        "excerpt": "lorem-ipsum",
                        "seo": { "title": "", "description": "", "robots": [], "extra": [], "type": "stackbit_page_meta" },
                        "template": "docs"
                    },
                    "html": "<h1>Introduction to React for Complete Beginners</h1>\n<p>All of the code examples below will be included a second time at the bottom of this article as an embedded gist.</p>\n<hr>\n<h3>Introduction to React for Complete Beginners</h3>\n<p>All of the code examples below will be included a second time at the bottom of this article as an embedded gist, so that it is properly syntax highlighted.</p>\n<p>React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/1200/0*Olfj44MF6WSzvlSM.png\" class=\"graf-image\" /></figure>\n<h3>React</h3>\n<blockquote>\n<p><em>React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript</em></p>\n</blockquote>\n<blockquote>\n<p><em>because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX</em></p>\n</blockquote>\n<blockquote>\n<p><em>include the code you want to be treated as JavaScript within curly braces: { ‘this is treated as JavaScript code’ }</em></p>\n</blockquote>\n<blockquote>\n<p><em>JSX code must be compiled into JavaScript</em></p>\n</blockquote>\n<blockquote>\n<p><em>under the hood the challenges are calling ReactDOM.render (JSX, document.getElementById(‘root’))</em></p>\n</blockquote>\n<blockquote>\n<p><em>One important thing to know about nested JSX is that it must return a single element.</em></p>\n</blockquote>\n<blockquote>\n<p><em>For instance, several JSX elements written as siblings with no parent wrapper element will not transpile.</em></p>\n</blockquote>\n<hr>\n<h3>From the React Docs:</h3>\n<h3>What is React?</h3>\n<p>React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called “components”.</p>\n<p>React has a few different kinds of components, but we’ll start with <code>React.Component</code> subclasses:</p>\n<pre><code>class ShoppingList extends React.Component {\n  render() {\n    return (\n      &#x3C;div className=\"shopping-list\">\n        &#x3C;h1>Shopping List for {this.props.name}&#x3C;/h1>\n        &#x3C;ul>\n          &#x3C;li>Instagram&#x3C;/li>\n          &#x3C;li>WhatsApp&#x3C;/li>\n          &#x3C;li>Oculus&#x3C;/li>\n        &#x3C;/ul>\n      &#x3C;/div>\n    );\n  }\n}\n\n// Example usage: &#x3C;ShoppingList name=\"Mark\" />\n</code></pre>\n<p>We’ll get to the funny XML-like tags soon. We use components to tell React what we want to see on the screen. When our data changes, React will efficiently update and re-render our components.</p>\n<p>Here, ShoppingList is a <strong>React component class</strong>, or <strong>React component type</strong>. A component takes in parameters, called <code>props</code> (short for “properties”), and returns a hierarchy of views to display via the <code>render</code> method.</p>\n<p>The <code>render</code> method returns a <em>description</em> of what you want to see on the screen. React takes the description and displays the result. In particular, <code>render</code> returns a <strong>React element</strong>, which is a lightweight description of what to render. Most React developers use a special syntax called “JSX” which makes these structures easier to write. The <code>&#x3C;div /></code> syntax is transformed at build time to <code>React.createElement('div')</code>. The example above is equivalent to:</p>\n<pre><code>return React.createElement('div', {className: 'shopping-list'},\n  React.createElement('h1', /* ... h1 children ... */),\n  React.createElement('ul', /* ... ul children ... */)\n);\n</code></pre>\n<hr>\n<h3>Valid JSX:</h3>\n<pre><code>&#x3C;div>\n  &#x3C;p>Paragraph One&#x3C;/p>\n  &#x3C;p>Paragraph Two&#x3C;/p>\n  &#x3C;p>Paragraph Three&#x3C;/p>\n&#x3C;/div>\n</code></pre>\n<hr>\n<h3>Invalid JSX:</h3>\n<pre><code>&#x3C;p>Paragraph One&#x3C;/p>\n&#x3C;p>Paragraph Two&#x3C;/p>\n&#x3C;p>Paragraph Three&#x3C;/p>\n</code></pre>\n<h4>To put comments inside JSX, you use the syntax {/* */} to wrap around the comment text.</h4>\n<p>To put comments inside JSX, you use the syntax {/* */} to wrap around the comment text.</p>\n<p>The code editor has a JSX element similar to what you created in the last challenge. Add a comment somewhere within the provided div element, without modifying the existing h1 or p elements.</p>\n<pre><code>const JSX = (\n  &#x3C;div>\n  {/* This is a comment */}\n    &#x3C;h1>This is a block of JSX&#x3C;/h1>\n    &#x3C;p>Here's a subtitle&#x3C;/p>\n  &#x3C;/div>\n);\n</code></pre>\n<hr>\n<blockquote>\n<p><em>With React, we can render this JSX directly to the HTML DOM using React’s rendering API known as ReactDOM.</em></p>\n</blockquote>\n<blockquote>\n<p><em>ReactDOM offers a simple method to render React elements to the DOM which looks like this:</em></p>\n</blockquote>\n<p><code>ReactDOM.render(componentToRender, targetNode)</code></p>\n<ul>\n<li><span id=\"f724\">the first argument is the React element or component that you want to render,</span></li>\n<li><span id=\"7093\">and the second argument is the DOM node that you want to render the component to.</span></li>\n</ul>\n<blockquote>\n<p><em>ReactDOM.render() must be called after the JSX element declarations, just like how you must declare variables before using them.</em></p>\n</blockquote>\n<blockquote>\n<p><em>key difference in JSX is that you can no longer use the word class to define HTML classes.</em></p>\n</blockquote>\n<ul>\n<li><span id=\"aafc\">— -> This is because class is a reserved word in JavaScript. Instead, JSX uses className</span></li>\n</ul>\n<blockquote>\n<p><em>the naming convention for all HTML attributes and event references in JSX become camelCase</em></p>\n</blockquote>\n<blockquote>\n<p><em>a click event in JSX is onClick, instead of onclick. Likewise, onchange becomes onChange. While this is a subtle difference, it is an important one to keep in mind moving forward.</em></p>\n</blockquote>\n<h3>Apply a class of myDiv to the div provided in the JSX code.</h3>\n<ul>\n<li><span id=\"9500\">The constant JSX should return a div element.</span></li>\n<li><span id=\"8d42\">The div should have a class of myDiv.</span></li>\n</ul>\n<!-- -->\n<pre><code>const JSX = (\n  &#x3C;div>\n    &#x3C;h1>Add a class to this div&#x3C;/h1>\n  &#x3C;/div>\n);\n</code></pre>\n<h3>Ans:</h3>\n<pre><code>const JSX = (\n  &#x3C;div className=\"myDiv\">\n    &#x3C;h1>Add a class to this div&#x3C;/h1>\n  &#x3C;/div>\n);\n</code></pre>\n<h3>React: Learn About Self-Closing JSX Tags</h3>\n<p>-Another important way in which JSX differs from HTML is in the idea of the self-closing tag.</p>\n<blockquote>\n<p><em>In HTML, almost all tags have both an opening and closing tag:</em> <code>&#x3C;div>&#x3C;/div>;</code> <em>the closing tag always has a forward slash before the tag name that you are closing.</em></p>\n</blockquote>\n<blockquote>\n<p><em>there are special instances in HTML called “self-closing tags”, or tags that don’t require both an opening and closing tag before another tag can start.</em></p>\n</blockquote>\n<blockquote>\n<p><em>For example the line-break tag can be written as</em> <code>&#x3C;br></code> <em>or as</em> <code>&#x3C;br />,</code> <em>but should never be written as</em> <code>&#x3C;br>&#x3C;/br></code><em>, since it doesn't contain any content.</em></p>\n</blockquote>\n<blockquote>\n<p><em>In JSX, the rules are a little different. Any JSX element can be written with a self-closing tag, and every element must be closed.<br>\nThe line-break tag, for example, must always be written as</em> <code>&#x3C;br /></code> <em>in order to be valid JSX that can be transpiled.<br>\nA</em> <code>&#x3C;div></code><em>, on the other hand, can be written as</em> <code>&#x3C;div /></code><em>or</em><code>&#x3C;div>&#x3C;/div></code><em>.<br>\nThe difference is that in the first syntax version there is no way to include anything in the</em> <code>&#x3C;div /></code><em>.</em></p>\n</blockquote>\n<h3>Fix the errors in the code editor so that it is valid JSX and successfully transpiles. Make sure you don’t change any of the content — you only need to close tags where they are needed.</h3>\n<pre><code>const JSX = (\n  &#x3C;div>\n    &#x3C;h2>Welcome to React!&#x3C;/h2> &#x3C;br >\n    &#x3C;p>Be sure to close all tags!&#x3C;/p>\n    &#x3C;hr >\n  &#x3C;/div>\n);\n</code></pre>\n<h3>Ans:</h3>\n<pre><code>const JSX = (\n  &#x3C;div>\n    &#x3C;h2>Welcome to React!&#x3C;/h2> &#x3C;br />\n    &#x3C;p>Be sure to close all tags!&#x3C;/p>\n    &#x3C;hr />\n  &#x3C;/div>\n);\n</code></pre>\n<hr>\n<h3>React: Create a Stateless Functional Component</h3>\n<blockquote>\n<p><em>There are two ways to create a React component. The first way is to use a JavaScript function.</em></p>\n</blockquote>\n<blockquote>\n<p><em>Defining a component in this way creates a stateless functional component.</em></p>\n</blockquote>\n<blockquote>\n<p><em>think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data.</em></p>\n</blockquote>\n<h4>To create a component with a function, you simply write a JavaScript function that returns either JSX or null</h4>\n<ul>\n<li><span id=\"b514\">React requires your function name to begin with a capital letter.</span></li>\n</ul>\n<blockquote>\n<p><em>Here’s an example of a stateless functional component that assigns an HTML class in JSX:</em></p>\n</blockquote>\n<pre><code>// After being transpiled, the &#x3C;div> will have a CSS class of 'customClass'\nconst DemoComponent = function() {\n  return (\n    &#x3C;div className='customClass' />\n  );\n};\n</code></pre>\n<blockquote>\n<p><em>Because a JSX component represents HTML, you could put several components together to create a more complex HTML page.</em></p>\n</blockquote>\n<h3>The code editor has a function called MyComponent. Complete this function so it returns a single div element which contains some string of text.</h3>\n<p>Note: The text is considered a child of the div element, so you will not be able to use a self-closing tag.</p>\n<pre><code>const MyComponent = function() {\n  // Change code below this line\n\n  // Change code above this line\n}\n</code></pre>\n<h3>ANS:</h3>\n<pre><code>const MyComponent = function() {\n  // Change code below this line\n\nreturn (\n   &#x3C;div> Some Text &#x3C;/div >\n  );\n\n  // Change code above this line\n};\n</code></pre>\n<hr>\n<h3>React: Create a React Component</h3>\n<blockquote>\n<p><em>The other way to define a React component is with the ES6 class syntax. In the following example, Kitten extends React.Component:</em></p>\n</blockquote>\n<pre><code>class Kitten extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      &#x3C;h1>Hi&#x3C;/h1>\n    );\n  }\n}\n</code></pre>\n<blockquote>\n<p><em>This creates an ES6 class Kitten which extends the React.Component class.</em></p>\n</blockquote>\n<blockquote>\n<p><em>So the Kitten class now has access to many useful React features, such as local state and lifecycle hooks.</em></p>\n</blockquote>\n<blockquote>\n<p><em>Also notice the Kitten class has a constructor defined within it that calls super()</em></p>\n</blockquote>\n<blockquote>\n<p><em>It uses super() to call the constructor of the parent class, in this case React.Component</em></p>\n</blockquote>\n<blockquote>\n<p><em>The constructor is a special method used during the initialization of objects that are created with the class keyword. It is best practice to call a component’s constructor with super, and pass props to both.</em></p>\n</blockquote>\n<blockquote>\n<p><em>This makes sure the component is initialized properly. For now, know that it is standard for this code to be included.</em></p>\n</blockquote>\n<h3>MyComponent is defined in the code editor using class syntax. Finish writing the render method so it returns a div element that contains an h1 with the text Hello React!.</h3>\n<pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n\n    // Change code above this line\n  }\n};\n</code></pre>\n<h3>ANS:</h3>\n<pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n return (\n   &#x3C;div>\n      &#x3C;h1>Hello React!&#x3C;/h1>\n      &#x3C;/div>\n    );\n\n    // Change code above this line\n  }\n};\n</code></pre>\n<hr>\n<h3>React: Create a Component with Composition</h3>\n<blockquote>\n<p><em>Imagine you are building an App and have created three components, a Navbar, Dashboard, and Footer.</em></p>\n</blockquote>\n<blockquote>\n<p><em>To compose these components together, you could create an App parent component which renders each of these three components as children. To render a component as a child in a React component, you include the component name written as a custom HTML tag in the JSX.</em></p>\n</blockquote>\n<ul>\n<li><span id=\"000b\">For example, in the render method you could write:</span></li>\n</ul>\n<!-- -->\n<pre><code>return (\n &#x3C;App>\n  &#x3C;Navbar />\n  &#x3C;Dashboard />\n  &#x3C;Footer />\n &#x3C;/App>\n)\n</code></pre>\n<blockquote>\n<p><em>When React encounters a custom HTML tag that references another component (a component name wrapped in &#x3C; /> like in this example), it renders the markup for that component in the location of the tag. This should illustrate the parent/child relationship between the App component and the Navbar, Dashboard, and Footer.</em></p>\n</blockquote>\n<h3>Challenge:</h3>\n<blockquote>\n<p><em>In the code editor, there is a simple functional component called ChildComponent and a class component called ParentComponent. Compose the two together by rendering the ChildComponent within the ParentComponent. Make sure to close the ChildComponent tag with a forward slash.</em></p>\n</blockquote>\n<ul>\n<li><span id=\"2ed5\">Note:<strong>ChildComponent is defined with an ES6 arrow function because this is a very common practice when using React</strong>.</span></li>\n<li><span id=\"fddd\">However, know that this is just a function.</span></li>\n</ul>\n<!-- -->\n<pre><code>const ChildComponent = () => {\n  return (\n    &#x3C;div>\n      &#x3C;p>I am the child&#x3C;/p>\n    &#x3C;/div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;h1>I am the parent&#x3C;/h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      &#x3C;/div>\n    );\n  }\n};\n</code></pre>\n<p>⌛The React component should return a single div element.<br>\n⌛The component should return two nested elements.<br>\n⌛The component should return the ChildComponent as its second child.</p>\n<h3>Ans:</h3>\n<pre><code>const ChildComponent = () => {\n  return (\n    &#x3C;div>\n      &#x3C;p>I am the child&#x3C;/p>\n    &#x3C;/div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;h1>I am the parent&#x3C;/h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      &#x3C;/div>\n    );\n  }\n};\n</code></pre>\n<h3>More Examples:</h3>\n<p>For more content follow me on GitHub:</p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz - Overview</strong><br />\n<em>Web Developer, Electrical Engineer https://bryanguner.medium.com/ https://portfolio42.netlify.app/…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><em>More content at</em> <a href=\"http://plainenglish.io/\" class=\"markup--anchor markup--p-anchor\"><em>plainenglish.io</em></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/8021738aa1ad\">May 19, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/introduction-to-react-for-complete-beginners-8021738aa1ad\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on May 23, 2021.</p>"
                },
                {
                    "url": "/docs/react/",
                    "relativePath": "docs/react/index.md",
                    "relativeDir": "docs/react",
                    "base": "index.md",
                    "name": "index",
                    "frontmatter": {
                        "title": "React",
                        "excerpt": "To make it easy to write documentation in plain Markdown, most React are styled using Markdown elements with few additional CSS classes.",
                        "seo": {
                            "title": "React",
                            "description": "This is the React page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "React", "keyName": "property" },
                                { "name": "og:description", "value": "This is the React page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "React" },
                                { "name": "twitter:description", "value": "This is the React page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<h3>For more resources visit: <a id=\"36ee\"></a></h3>\n<p><a href=\"https://github.com/bgoonz/React_Notes_V3\">bgoonz/React<em>Notes</em>V3A JavaScript library for building user interfaces React makes it painless to create interactive UIs. Design simple…github.com</a></p>\n<p><a href=\"https://gist.github.com/bgoonz/e07d9e7917ae9e98807358d1e7cc4a67\">Use this appendix to get any prerequisite concepts and terminology under your belt:</a><img src=\"https://miro.medium.com/freeze/max/60/0*bZjlAJDEmP6yfpKI.gif?q=20\"><img src=\"https://miro.medium.com/max/647/0*bZjlAJDEmP6yfpKI.gif\"></p>\n<p>Here I will walk through a demo…. skip down below for more fundamental examples and resources…</p>\n<h2>React Demo <a id=\"b2b8\"></a></h2>\n<ul>\n<li>ex1 — A Basic React Component</li>\n<li>ex2 — A Basic React Class Component</li>\n<li>ex3 — A Class Component with State</li>\n<li>ex4 — A Class Component that Updates State</li>\n<li>ex5 — A Class Component that Iterates through State</li>\n<li>ex6 — An Example of Parent and Child Components</li>\n</ul>\n<p>With regards to converting an existing HTML, CSS, and JS site into React, first you’ll want to think about how to break up your site into components,</p>\n<ul>\n<li>as well as think about what the general hierarchical component structure of your site will look like.</li>\n<li>From there, it’s a simple matter of copying the relevant HTML for that component and throwing it into the <strong>render method of your component file.</strong></li>\n<li><em>Any methods that are needed for that component to function properly can added onto your new component.</em></li>\n</ul>\n<p>Once you’ve refactored your HTML components into React components, you’ll want to lay them out in the desired hierarchical structure</p>\n<ul>\n<li>with children components being rendered by their parents, as well as ensuring that the parent components are passing down the necessary data as props to their children components.</li>\n</ul>\n<p>ex.)</p>\n<pre><code class=\"language-javascript\">&#x3C;!-- Hello world -->\n&#x3C;div class=\"awesome\" style=\"border: 1px solid red\">\n  &#x3C;label for=\"name\">Enter your name: &#x3C;/label>\n  &#x3C;input type=\"text\" id=\"name\" />\n&#x3C;/div>\n&#x3C;p>Enter your HTML here&#x3C;/p>\n</code></pre>\n<p>Is equivalent to:</p>\n<pre><code class=\"language-jsx\">let NewComponent = React.createClass({\n    render: function () {\n        return (\n            &#x3C;div>\n                {/* Hello world */}\n                &#x3C;div className=\"awesome\" style={{ border: '1px solid red' }}>\n                    &#x3C;label htmlFor=\"name\">Enter your name: &#x3C;/label>\n                    &#x3C;input type=\"text\" id=\"name\" />\n                &#x3C;/div>\n                &#x3C;p>Enter your HTML here&#x3C;/p>\n            &#x3C;/div>\n        );\n    }\n});\n</code></pre>\n<h2>A Basic Component <a id=\"fa4c\"></a></h2>\n<p>Acomponent is some thing that is being rendered in the browser. It could be a button, a form with a bunch of fields in it…etc.…</p>\n<p>React doesn’t place any restrictions on how large or small a component can be.</p>\n<p>You <em>could</em> have an entire static site encapsulated in a single React component, but that would defeat the purpose of using React.</p>\n<p>So the first thing to remember about a component is that a <strong>component must</strong> <em><strong>render</strong></em> <strong>something.</strong></p>\n<p><em>If nothing is being rendered from a component, then React will throw an error.</em></p>\n<p>Inside of <code>BasicComponent.js</code> , first import React at the top of the file. Our most basic of components looks like this:</p>\n<pre><code class=\"language-jsx\">import React from 'react';\n\nconst BasicComponent = () => &#x3C;div>Hello World!&#x3C;/div>;\n\nexport default BasicComponent;\n</code></pre>\n<blockquote>\n<p><em>This is a component that simply returns a div tag with the words Hello World! inside.</em></p>\n<p><em>The last line simply exports our component so that it can be imported<br>\nby another file.</em></p>\n</blockquote>\n<p>Notice that this component looks exactly like an anonymous arrow function that we’ve named <code>BasicComponent</code> .</p>\n<p>In fact, that is literally what this is.</p>\n<p>The arrow function then is simply returning the div tag. When a component is written as a function like this one is, it is called a <em>functional</em> component.</p>\n<h2>A Basic Class Component <a id=\"8d7d\"></a></h2>\n<p>The above component is an example of a functional component, which is appropriate since that component is literally nothing more than a function that returns some HTML.</p>\n<p><em>Functional components are great when all you want a component to do is to render some stuff.</em></p>\n<p><em>Components can also be written as classes (although this paradigm is becoming outdated and you should strive to write your components functionally!</em></p>\n<p>For this exercise, we’re going to write a class component that does exactly the same thing as the functional component we just wrote.</p>\n<p>We’ll again need to import React at the top of the file, but we’ll also need to add a little something. Our import statement will look like this:</p>\n<pre><code class=\"language-text\">import React, { Component } from 'react';\n</code></pre>\n<p><strong>So, in addition to importing React, we’re also importing the base Component class that is included in the React library.</strong></p>\n<h3>React lets you define components as classes or functions. <a id=\"ed09\"></a></h3>\n<p>Components defined as classes currently provide more features . To define a React component class, you need to extend <code>React.Component</code>:</p>\n<pre><code class=\"language-javascript\">class Welcome extends React.Component {\n    render() {\n        return &#x3C;h1>Hello, {this.props.name}&#x3C;/h1>;\n    }\n}\n</code></pre>\n<p><strong>The only method you</strong> <em><strong>must</strong></em> <strong>define in a <code>React.Component</code> subclass is called</strong> <a href=\"https://reactjs.org/docs/react-component.html#render\"><strong><code>render()</code></strong></a><strong>.</strong></p>\n<h2><code>render()</code> <a id=\"2c45\"></a></h2>\n<p>The <code>render()</code> method is the only required method in a class component.</p>\n<p>When called, it should examine <code>this.props</code> and <code>this.state</code> and return one of the following types:</p>\n<ul>\n<li><strong>React elements.</strong> Typically created via <a href=\"https://reactjs.org/docs/introducing-jsx.html\">JSX</a>. For example, <code>&#x3C;div /></code> and <code>&#x3C;MyComponent /></code> are React elements that instruct React to render a DOM node, or another user-defined component, respectively.</li>\n<li><strong>Arrays and fragments.</strong> Let you return multiple elements from render. See the documentation on <a href=\"https://reactjs.org/docs/fragments.html\">fragments</a> for more details.</li>\n<li><strong>Portals</strong>. Let you render children into a different DOM subtree. See the documentation on <a href=\"https://reactjs.org/docs/portals.html\">portals</a> for more details.</li>\n<li><strong>String and numbers.</strong> These are rendered as text nodes in the DOM.</li>\n<li><strong>Booleans or <code>null</code></strong>. Render nothing. (Mostly exists to support <code>return test &#x26;&#x26; &#x3C;Child /></code> pattern, where <code>test</code> is boolean.)</li>\n</ul>\n<p>The <code>render()</code> function should be pure, meaning that it does not modify component state, it returns the same result each time it’s invoked, and it does not directly interact with the browser.</p>\n<p>If you need to interact with the browser, perform your work in <code>componentDidMount()</code> or the other lifecycle methods instead. Keeping <code>render()</code> pure makes components easier to think about.</p>\n<blockquote>\n<p><em>Note</em></p>\n<p><em><code>render()</code> will not be invoked if</em> <a href=\"https://reactjs.org/docs/react-component.html#shouldcomponentupdate\"><em><code>shouldComponentUpdate()</code></em></a> <em>returns false.</em></p>\n</blockquote>\n<p>The export statement at the bottom of the file also stays, completely unchanged. Our class component will thus look like this:</p>\n<pre><code class=\"language-jsx\">import React, { Component } from 'react';\n\nclass BasicClassComponent extends Component {\n    render() {\n        return &#x3C;div>Hello World!&#x3C;/div>;\n    }\n}\n\nexport default BasicClassComponent;\n</code></pre>\n<p><strong>Notice that our <code>BasicClassComponent</code> inherits from the base <code>Component</code> class that we imported from the React library, by virtue of the 'extends' keyword.</strong></p>\n<p><em>That being said, there's nothing in this minimal component that takes advantage of any of those inherited methods.</em></p>\n<p><strong>All we have is a method on our component class called <code>render</code> that returns the same div tag.</strong></p>\n<p>If we really were deciding between whether to use a functional component versus a class component to render a simple div tag, then the functional style is more appropriate to use.</p>\n<p>This is because class components are much better suited for handling component state and triggering events based on the component’s <a href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">lifecycle.</a></p>\n<h3>The important takeaways at this point are that there are two types of components, functional and class components, and that functional components are well-suited if you’re just looking to render some HTML. <a id=\"66ab\"></a></h3>\n<p><em>Class components, on the other hand, are much better suited for handling components that require more complex functionality, need to exhibit more varied behavior, and/or need to keep track of some state that may change throughout said component’s lifecycle.</em></p>\n<h2>A Class Component with Some State <a id=\"da0a\"></a></h2>\n<p><strong>Component state is any dynamic data that we want the component to keep track of.</strong></p>\n<blockquote>\n<p>For example, let’s say we have a form component. This form has some input fields that we’d like users to fill out. When a user types characters into an input field, how is that input persisted from the point of view of our form component?</p>\n</blockquote>\n<p><strong>The answer is by using component state!</strong></p>\n<p>There are a few important concepts regarding component state, such as how to update it, pass it to another component, render it, etc.</p>\n<p><strong>Only class components have the ability to persist state, so if at any time you realize that a component needs to keep track of some state, you know that you’ll automatically need a class component instead of a functional component.</strong></p>\n<blockquote>\n<p>It is possible to handle state with functional components but that requires the use of something called the <a href=\"https://reactjs.org/docs/hooks-state.html\">useState() hook</a>. Hooks were added in React 16.8; prior to this release, there was no mechanism to add state to functional components.</p>\n</blockquote>\n<p>Here’s what the above component looks like as a functional component:</p>\n<p>Our class component with state will look a lot like the basic class component we just wrote, but with some exceptions:</p>\n<pre><code class=\"language-jsx\">import React, { Component } from 'react';\n\nclass ClassComponentWithState extends Component {\n    constructor() {\n        super();\n        this.state = {};\n    }\n\n    render() {\n        return &#x3C;div>Hello World!&#x3C;/div>;\n    }\n}\n\nexport default ClassComponentWithState;\n</code></pre>\n<p><strong>So far, the only new thing going on here is the constructor block. If you recall how classes in JavaScript work, classes need constructors.</strong></p>\n<p><strong>Additionally, if a class is extending off of another class and wants access to its parent class’s methods and properties, then the <code>super</code> function needs to be called inside the class's constructor function.</strong></p>\n<h3>Point being, the constructor function and the call to the <code>super</code> function are <em>not</em> associated with React, they are associated with all JavaScript classes. <a id=\"7791\"></a></h3>\n<ul>\n<li>Then there is the <strong><code>this.state</code> property inside the constructor function that is set as an empty object</strong>.</li>\n<li>We're adding a property called <code>state</code> to our class and setting it to an empty object.</li>\n</ul>\n<h3>State objects in React are always just plain old objects. <a id=\"2e40\"></a></h3>\n<h3><strong>So why is it that the basic class component we wrote in the previous exercise had no constructor function within its body?</strong> <a id=\"a76e\"></a></h3>\n<p>That is because we had no need for them since all our class component was doing was rendering some HTML.</p>\n<p><strong>The constructor is needed here because that is where we need to initialize our state object.</strong></p>\n<p><strong>The call to <code>super</code> is needed because we can't reference <code>this</code> inside of our constructor without a call to <code>super</code> first.</strong></p>\n<p>Ok, now let’s actually use this state object.</p>\n<p><em>One very common application of state objects in React components is to render the data being stored inside them within our component’s render function.</em></p>\n<h3>Refactoring our component class to do that: <a id=\"6929\"></a></h3>\n<pre><code class=\"language-jsx\">class ClassComponentWithState extends Component {\n    constructor() {\n        super();\n        this.state = {\n            someData: 8\n        };\n    }\n\n    render() {\n        return &#x3C;div>{`Here's some data to render: ${this.state.someData}`}&#x3C;/div>;\n    }\n}\n\nexport default ClassComponentWithState;\n</code></pre>\n<p>We added a key-value pair to our state object inside our constructor.</p>\n<ul>\n<li>Then we changed the contents of the render function.</li>\n<li>Now, it’s actually rendering the data that we have inside the state object.</li>\n<li>Notice that inside the div tags we’re using a template string literal so that we can access the value of <code>this.state.someData</code> straight inside of our rendered content.</li>\n</ul>\n<p><strong>With Reacts newest version, we can actually now add state to a component without explicitly defining a constructor on the class. We can refactor our class component to look like this:</strong></p>\n<pre><code class=\"language-jsx\">class ClassComponentWithState extends Component {\n    state = {\n        someData: 8\n    };\n\n    render() {\n        return &#x3C;div>{`Here's some data to render: ${this.state.someData}`}&#x3C;/div>;\n    }\n}\n\nexport default ClassComponentWithState;\n</code></pre>\n<p><img src=\"https://miro.medium.com/max/3064/1*6sYhFUNpUkt6xN9kkn4pJQ.png\"></p>\n<p>This new syntax is what is often referred to as ‘syntactic sugar’: under the hood, the React library translates this back into the old constructor code that we first started with, so that the JavaScript remains valid to the JavaScript interpreter.</p>\n<p>The clue to this is the fact that when we want to access some data from the state object, we still need to call it with <code>this.state.someData</code> ; changing it to just <code>state.someData</code> does not work.</p>\n<h2>Class Component Updating State <a id=\"3e29\"></a></h2>\n<p>Great, so we can render some state that our component persists for us.</p>\n<p>However, we said an important use case of component state is to handle <em>dynamic</em> data.</p>\n<p>A single static number isn’t very dynamic at all.</p>\n<p>So now let’s walk through how to update component state.</p>\n<pre><code class=\"language-jsx\">import React, { Component } from 'react';\n\nclass ClassComponentUpdatingState extends Component {\n    constructor() {\n        super();\n        this.state = {\n            aNumber: 8\n        };\n    }\n\n    increment = () => {\n        this.setState({ aNumber: ++this.state.aNumber });\n    };\n\n    decrement = () => {\n        this.setState({ aNumber: --this.state.aNumber });\n    };\n\n    render() {\n        return (\n            &#x3C;div>\n                &#x3C;div>{`Our number: ${this.state.aNumber}`}&#x3C;/div>\n                &#x3C;button onClick={this.increment}>+&#x3C;/button>\n                &#x3C;button onClick={this.decrement}>-&#x3C;/button>\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default ClassComponentUpdatingState;\n</code></pre>\n<p>Notice that we’ve added two methods to our class: <code>increment</code> and <code>decrement</code> .</p>\n<p><code>increment</code> and <code>decrement</code> are methods that <em>we</em> are adding to our class component.</p>\n<p>Unlike the <code>render</code> method, <code>increment</code> and <code>decrement</code> were not already a part of our class component.</p>\n<p>This is why <code>increment</code> and <code>decrement</code> are written as arrow functions, <em><strong>so that they are automatically bound to our class component.</strong></em></p>\n<p>The alternative is using a declaration syntax function with the bind method to bind the context of our methods to the class component.</p>\n<p>The more interesting thing is what is going on within the bodies of these methods.</p>\n<h3>Each calls the <code>setState</code> function. <a id=\"3d7e\"></a></h3>\n<ul>\n<li><code>setState</code> in fact <em>is</em> provided to us by React.</li>\n</ul>\n<p>It is the standard way to update a component's state.</p>\n<p>It's the <em>only</em> way you should ever update a component's state. It may seem more verbose than necessary, but there are good reasons for why you should be doing it this way.</p>\n<p>Unlike the lifecycle methods above (which React calls for you), the methods below are the methods <em>you</em> can call from your components.</p>\n<p>There are just two of them: <code>setState()</code> and <code>forceUpdate()</code>.</p>\n<h4><code>setState()</code></h4>\n<pre><code class=\"language-text\">setState(updater, [callback])\n</code></pre>\n<p><code>setState()</code> enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses.</p>\n<p>Think of <code>setState()</code> as a <em>request</em> rather than an immediate command to update the component. For better perceived performance, React may delay it, and then update several components in a single pass. React does not guarantee that the state changes are applied immediately.</p>\n<p><code>setState()</code> does not always immediately update the component. It may batch or defer the update until later. This makes reading <code>this.state</code> right after calling <code>setState()</code> a potential pitfall. Instead, use <code>componentDidUpdate</code> or a <code>setState</code> callback (<code>setState(updater, callback)</code>), either of which are guaranteed to fire after the update has been applied. If you need to set the state based on the previous state, read about the <code>updater</code> argument below.</p>\n<p><code>setState()</code> will always lead to a re-render unless <code>shouldComponentUpdate()</code> returns <code>false</code>. If mutable objects are being used and conditional rendering logic cannot be implemented in <code>shouldComponentUpdate()</code>, calling <code>setState()</code> only when the new state differs from the previous state will avoid unnecessary re-renders.</p>\n<p>The first argument is an <code>updater</code> function with the signature:</p>\n<pre><code class=\"language-text\">(state, props) => stateChange\n</code></pre>\n<p><code>state</code> is a reference to the component state at the time the change is being applied. It should not be directly mutated. Instead, changes should be represented by building a new object based on the input from <code>state</code> and <code>props</code>. For instance, suppose we wanted to increment a value in state by <code>props.step</code>:</p>\n<pre><code class=\"language-text\">this.setState((state, props) => {\n  return {counter: state.counter + props.step};\n});\n</code></pre>\n<p>Both <code>state</code> and <code>props</code> received by the updater function are guaranteed to be up-to-date. The output of the updater is shallowly merged with <code>state</code>.</p>\n<p>The second parameter to <code>setState()</code> is an optional callback function that will be executed once <code>setState</code> is completed and the component is re-rendered. Generally we recommend using <code>componentDidUpdate()</code> for such logic instead.</p>\n<p>You may optionally pass an object as the first argument to <code>setState()</code> instead of a function:</p>\n<pre><code class=\"language-text\">setState(stateChange[, callback])\n</code></pre>\n<p>This performs a shallow merge of <code>stateChange</code> into the new state, e.g., to adjust a shopping cart item quantity:</p>\n<pre><code class=\"language-text\">this.setState({quantity: 2})\n</code></pre>\n<p>This form of <code>setState()</code> is also asynchronous, and multiple calls during the same cycle may be batched together. For example, if you attempt to increment an item quantity more than once in the same cycle, that will result in the equivalent of:</p>\n<pre><code class=\"language-text\">Object.assign(\n  previousState,\n  {quantity: state.quantity + 1},\n  {quantity: state.quantity + 1},\n  ...\n)\n</code></pre>\n<p>Subsequent calls will override values from previous calls in the same cycle, so the quantity will only be incremented once. If the next state depends on the current state, we recommend using the updater function form, instead:</p>\n<pre><code class=\"language-text\">this.setState((state) => {\n  return {quantity: state.quantity + 1};\n});\n</code></pre>\n<h3>So the way to use <code>setState</code> to update a component's state is to pass it an object with each of the state keys you wish to update, along with the updated value. <a id=\"bd27\"></a></h3>\n<p>In our <code>increment</code> method we said \"I would like to update the <code>aNumber</code> property on my component state by adding one to it and then setting the new value as my new <code>aNumber</code> \".</p>\n<p>The same thing happens in our <code>decrement</code> method, only we're subtracting instead of adding.</p>\n<p>Then the other new concept we’re running into here is how to actually call these methods we’ve added to our class.<img src=\"https://miro.medium.com/max/60/1*k8t5QBcMvHDX521sd4pC4g.png?q=20\"><img src=\"https://miro.medium.com/max/856/1*k8t5QBcMvHDX521sd4pC4g.png\"></p>\n<p>We added two HTML button tags within our <code>render</code> function, then in their respective <code>onClick</code> handlers, we specify the method that should be called whenever this button gets clicked. So whenever we click either of the buttons, our state gets updated appropriately and our component will re-render to show the correct value we're expecting.</p>\n<h2>Class Component Iterating State <a id=\"e859\"></a></h2>\n<p>Another common state pattern you’ll see being used in React components is iterating over an array in our state object and rendering each array element in its own tag.</p>\n<blockquote>\n<p>This is often used in order to render lists.</p>\n</blockquote>\n<p>Additionally, we want to be able to easily update lists and have React re-render our updated list.</p>\n<p>We’ll see how both of these are done and how they work together within a single component in order to create the behavior of a dynamic list.</p>\n<pre><code class=\"language-jsx\">import React, { Component } from 'react';\n\nclass ClassComponentIteratingState extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            ingredients: ['flour', 'eggs', 'milk', 'sugar', 'vanilla extract'],\n            newIngredient: ''\n        };\n    }\n\n    handleIngredientInput = (event) => {\n        this.setState({ newIngredient: event.target.value });\n    };\n\n    addIngredient = (event) => {\n        event.preventDefault();\n        const ingredientsList = this.state.ingredients;\n        ingredientsList.push(this.state.newIngredient);\n        this.setState({\n            newIngredient: '',\n            ingredients: ingredientsList\n        });\n    };\n\n    render() {\n        return (\n            &#x3C;div>\n                {this.state.ingredients.map((ingredient) => (\n                    &#x3C;div>{ingredient}&#x3C;/div>\n                ))}\n                &#x3C;form onSubmit={this.addIngredient}>\n                    &#x3C;input type=\"text\" onChange={this.handleIngredientInput} placeholder=\"Add a new ingredient\" value={this.state.newIngredient} />\n                &#x3C;/form>\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default ClassComponentIteratingState;\n</code></pre>\n<p>The first change to note is that our state object now has an ‘ingredients’ array, and a ‘newIngredient’ field that has been initialized to an empty string.</p>\n<p>The ingredients array contains the elements that we’ll want to render in our list.</p>\n<p>The <code>addIngredient</code> and <code>handleIngredientInput</code> methods we've added to our class receives a parameter called 'event'.</p>\n<p>This event object is part of the browser's API.</p>\n<p>When we interact with some DOM element, <strong>such as clicking on an HTML button, the</strong> <em><strong>function that is invoked upon that button being clicked</strong></em> <strong>actually receives the event object.</strong></p>\n<ul>\n<li>So when we type some input into an input tag, we're able grab each character that was typed into the input field through the event object parameter.</li>\n<li>The <code>handleIngredientInput</code> method is what gets invoked every time the user presses a key to enter text in the input box for adding a new ingredient.</li>\n<li>Every character the user types gets persisted in the <code>newIngredient</code> field on the state object.</li>\n</ul>\n<p>We're able to grab the text in the input box using <code>event.target.value</code></p>\n<p><strong>Which holds the value of the string text that is currently in the input box</strong>.</p>\n<blockquote>\n<p>We use that to update our <code>newIngredient</code> string field.</p>\n</blockquote>\n<p>Breaking down the <code>addIngredient</code> method, we see this <code>event.preventDefault()</code> invocation.</p>\n<p>This is because this method will be used upon submitting a form, and it turns out that submitting a form triggers some default form behavior that we don't want to trigger when we submit the form (<strong>namely refreshing the entire page</strong>).</p>\n<blockquote>\n<p><code>event.preventDefault()</code> will prevent this default form behavior, meaning our form will only do what we want it to do when it is submitted.</p>\n</blockquote>\n<p><img src=\"https://miro.medium.com/max/894/1*RN_y7Bk4tb-LLG8vNqGHHA.png\"></p>\n<p>Next, we store a reference to <code>this.state.ingredients</code> in a variable called <code>ingredientsList</code> .</p>\n<p>So we now have a copy of the array that is stored in our state object.</p>\n<p><strong>We want to update the copy of the ingredients array first instead of directly updating the actual array itself in state.</strong></p>\n<p>Now we push whatever value is being stored at our <code>newIngredient</code> field onto the <code>ingredientsList</code> array so that our <code>ingredientsList</code> array is now more up-to-date than our <code>this.state.ingredients</code> array.</p>\n<p>So all we have to do now is call <code>setState</code> appropriately in order to update the value in our state object.</p>\n<p>Additionally, we also set the <code>newIngredient</code> field back to an empty string in order to clear out the input field once we submit a new ingredient.</p>\n<p>Now it's ready to accept more user input!</p>\n<p><img src=\"https://miro.medium.com/max/60/1*LXx7WeP_5wFRfYa45snSEA.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/478/1*LXx7WeP_5wFRfYa45snSEA.png\"></p>\n<p>Looking at our render function, first note the <code>this.state.ingredients.map</code> call.</p>\n<p>This is looping through each ingredient in our <code>ingredients</code> array and returning each one within its own div tag.</p>\n<p>This is a very common pattern for rendering everything inside an array.</p>\n<p>Then we have an HTML form which contains an input field.</p>\n<p>The purpose of this form is to allow a user to add new ingredients to the list. Note that we’re passing our <code>addIngredient</code> method to the form's <code>onSubmit</code> handler.</p>\n<p>This means that our <code>addIngredient</code> method gets invoked whenever our form is submitted.</p>\n<p>Lastly, the input field has an <code>onChange</code> handler that invokes our <code>handleIngredientInput</code> method whenever there is some sort of change in the input field, namely when a user types into it.<img src=\"https://miro.medium.com/max/60/1*S7s9FfaPVlKGyaSwFeId_w.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/816/1*S7s9FfaPVlKGyaSwFeId_w.png\"></p>\n<p>Notice that the <code>value</code> field in our input tag reads off of <code>this.state.newIngredient</code> in order to know what value to display.</p>\n<p>So when a user enters text into the input field, the <code>onChange</code> handler is invoked every time, which updates our <code>this.state.newIngredient</code> field, which the input field and then renders.</p>\n<h2>Parent and Child Components <a id=\"413c\"></a></h2>\n<p>A single isolated component isn’t going to do us much good.</p>\n<blockquote>\n<p>The beauty of React lies in the fact that it allows us to compose modular components together.</p>\n<p>Let’s start off with the component we just saw, but let’s change its name to <em><code>ParentComponent</code></em> .</p>\n</blockquote>\n<pre><code class=\"language-jsx\">import React, { Component } from 'react';\nimport ChildComponent from './ChildComponent';\n\nclass ParentComponent extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            ingredients: ['flour', 'eggs', 'milk', 'sugar', 'vanilla'],\n            newIngredient: ''\n        };\n    }\n\n    handleIngredientInput = (event) => {\n        this.setState({ newIngredient: event.target.value });\n    };\n\n    addIngredient = (event) => {\n        event.preventDefault();\n        const ingredientsList = this.state.ingredients;\n        ingredientsList.push(this.state.newIngredient);\n        this.setState({\n            newIngredient: '',\n            ingredients: ingredientsList\n        });\n    };\n\n    render() {\n        return (\n            &#x3C;div>\n                {this.state.ingredients.map((ingredient) => (\n                    &#x3C;ChildComponent thing={ingredient} />\n                ))}\n                &#x3C;form onSubmit={this.addIngredient}>\n                    &#x3C;input type=\"text\" onChange={this.handleIngredientInput} placeholder=\"Add a new ingredient\" value={this.state.newIngredient} />\n                &#x3C;/form>\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default ParentComponent;\n</code></pre>\n<p>The only two other differences in this component are that we’re importing a <code>ChildComponent</code> and then using it inside our <code>this.state.ingredients.map</code> call.</p>\n<p><code>ChildComponent</code> is another React component.</p>\n<p>Notice that we're using it just as if it were any other HTML tag.</p>\n<p><strong>This is how we lay out our component hierarchy: the ChildComponent is rendered within the ParentComponent.</strong></p>\n<p>We can see this to be the case if we open up the developer console and inspect these elements.<strong>child-left: parent-right</strong></p>\n<p><img src=\"https://miro.medium.com/max/2602/1*q_XLnJ2h1L5yZjNnSKzj5w.png\"></p>\n<p>Note also that we’re passing each ingredient as a ‘thing’ to the ChildComponent component.</p>\n<p>This is how a parent component passes data to a child component. It doesn’t need to be called ‘thing’; you can call it whatever you want.</p>\n<p>Conceptually though, <strong>every piece of data that a parent component passes down to a child component is called a ‘prop’ in React lingo.</strong></p>\n<p>Let’s take a look now at the Child Component. It serves two purposes:</p>\n<ol>\n<li>to render the props data that it gets from a parent component,</li>\n<li>to add the ability for a user to click on it and have it toggle a strikethrough, indicating that the item is ‘complete’.</li>\n</ol>\n<pre><code class=\"language-jsx\">import React, { Component } from 'react';\n\nclass ChildComponent extends Component {\n    constructor() {\n        super();\n        this.state = {\n            clicked: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({ clicked: !this.state.clicked });\n    };\n\n    render() {\n        const styles = this.state.clicked ? { textDecoration: 'line-through' } : { textDecoration: 'none' };\n        return (\n            &#x3C;div style={styles} onClick={this.handleClick}>\n                {this.props.thing}\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default ChildComponent;\n</code></pre>\n<p>The overall structure of the child component is nothing we haven’t seen. It’s just another class component with its own s<strong>tate object and a method called <code>handleClick</code> .</strong></p>\n<p><strong>A component accesses its props via the <code>this.props</code> object.</strong></p>\n<p><em>Any prop a parent component passes down to a child component is accessible inside the child component's <code>this.prop</code> object.</em></p>\n<p>So our child component keeps its own state that tracks whether the component has been clicked or not.</p>\n<p>Then at the top of the <code>render</code> function, it uses a ternary condition to determine whether the div tag that is being rendered should have a strikethrough or not.</p>\n<p>The <code>handleClick</code> method is then invoked via an <code>onClick</code> handler on the div tag; it does the work of toggling the <code>this.state.clicked</code> Boolean.</p>\n<p>The overall structure of React applications can be represented as a hierarchical tree structure, just like how the DOM itself is structure. There is an overarching root component at the top of the hierarchy that every other component sits underneath. Specifying that a component should be a child of some parent component is as simple as throwing it in the parent component’s render function, just like how we did it in this example<img src=\"https://miro.medium.com/max/60/0*aqqfHMjBXT8PWYJC?q=20\"><img src=\"https://miro.medium.com/max/490/0*aqqfHMjBXT8PWYJC\"><img src=\"https://miro.medium.com/max/1000/0*j9aPKza7Y4htBeQ-.gif\"></p>\n<h2><strong>Core Concepts:</strong> <a id=\"c45d\"></a></h2>\n<h3>1. What is react? <a id=\"068e\"></a></h3>\n<h3>React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It uses components to update and render as your data changes. <a id=\"a7cb\"></a></h3>\n<blockquote>\n<p>React manages the <strong>creation and continuous updating of DOM nodes in your Web page</strong>.</p>\n</blockquote>\n<ul>\n<li><em>It does not handle</em> <a href=\"https://skillcrush.com/blog/what-is-ajax/\"><em>AJAX</em> </a><em>requests, Local Storage or style your website. IT is just a tool to dynamically render content on a webpage as a result of changes in ‘state’. Because it’s function is so limited in scope you may hear it referred to as a library… (not a framework … like Angular for example) and you may also hear it described as unopinionated.</em></li>\n</ul>\n<h3>2. Why use react? <a id=\"643d\"></a></h3>\n<ul>\n<li>Works for teams and helps UI workflow patterns</li>\n<li>The components can be reusable</li>\n<li>Componentized UI is the future of web dev</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/60/1*pFe_v7Ea--vfdmvR3UcunA.png?q=20\"><img src=\"https://miro.medium.com/max/846/1*pFe_v7Ea--vfdmvR3UcunA.png\"></p>\n<h2>Declarative programming <a id=\"994b\"></a></h2>\n<p>In the same way that you use HTML to <em>declare</em> what the user interface should<br>\nlook like, React provides the same mechanism in its <strong><code>createElement</code></strong> method or the higher-level language known as JSX.<img src=\"https://miro.medium.com/max/60/0*MW-A5Dp_v1T0BB1s.png?q=20\"><img src=\"https://miro.medium.com/max/1338/0*MW-A5Dp_v1T0BB1s.png\">React… like HTML is Declarative</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Declarative_programming\">Declarative programming</a> is often defined as any style of programming that is not <a href=\"https://en.wikipedia.org/wiki/Imperative_programming\">imperative</a>.</p>\n<p>A number of other common definitions attempt to define it by simply contrasting it with imperative programming. For example:</p>\n<ul>\n<li>A high-level program that describes what a computation should perform.</li>\n<li>Any programming language that lacks <a href=\"https://en.wikipedia.org/wiki/Side_effect_%28computer_science%29\">side effects</a></li>\n<li>A language with a clear correspondence to <a href=\"https://en.wikipedia.org/wiki/Mathematical_logic\">mathematical logic</a>.<a href=\"https://en.wikipedia.org/wiki/Declarative_programming#cite_note-5\">[5]</a></li>\n</ul>\n<p>These definitions overlap substantially.</p>\n<p>D<strong>eclarative programming is a non-imperative style of programming in which programs describe their desired results without explicitly listing commands or steps that must be performed.</strong></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Functional_programming\">Functional</a> and <a href=\"https://en.wikipedia.org/wiki/Logical_programming\">logical programming</a> languages are characterized by a declarative programming style.</p>\n<p><em>In a</em> <a href=\"https://en.wikipedia.org/wiki/Pure_functional_language\"><em>pure functional language</em></a><em>, such as</em> <a href=\"https://en.wikipedia.org/wiki/Haskell_%28programming_language%29\"><em>Haskell</em></a><em>, all functions are</em> <a href=\"https://en.wikipedia.org/wiki/Pure_function\"><em>without side effects</em></a><em>, and state changes are only represented as functions that transform the state, which is explicitly represented as a</em> <a href=\"https://en.wikipedia.org/wiki/First-class_citizen\"><em>first-class</em></a> <em>object in the program.</em></p>\n<p>— Wikipedia</p>\n<h2>What is a React pure component? <a id=\"abbb\"></a></h2>\n<p><a href=\"https://blog.logrocket.com/react-pure-components-functional/#whatisareactpurecomponent\">Based on the concept of purity in functional programming paradigms, a function is said to be pure if:</a></p>\n<ul>\n<li>Its return value is only determined by its input values</li>\n<li>Its return value is always the same for the same input values</li>\n</ul>\n<p>A React component is considered pure if it renders the same output for the same state and props. For class components like this, React provides the <code>PureComponent</code> base class. Class components that extend the <code>React.PureComponent</code> class are treated as pure components.</p>\n<p>Pure components have some performance improvements and render optimizations since React implements the <code>shouldComponentUpdate()</code> method for them with a shallow comparison for props and state.</p>\n<h2>Are React functional components pure? <a id=\"e24e\"></a></h2>\n<p>Functional components are very useful in React, especially when you want to isolate state management from the component. That’s why they are often called stateless components.</p>\n<p>However, functional components cannot leverage the performance improvements and render optimizations that come with <code>React.PureComponent</code> since they are not classes by definition.</p>\n<p>If you want React to treat a functional component as a pure component, you’ll have to convert the functional component to a class component that extends <code>React.PureComponent</code>.</p>\n<pre><code class=\"language-jsx\">function PercentageStat({ label, score = 0, total = Math.max(1, score) }) {\n    return (\n        &#x3C;div>\n            &#x3C;h6>{label}&#x3C;/h6>\n            &#x3C;span>{Math.round((score / total) * 100)}%&#x3C;/span>\n        &#x3C;/div>\n    );\n}\n\n// CONVERTED TO PURE COMPONENT\nclass PercentageStat extends React.PureComponent {\n    render() {\n        const { label, score = 0, total = Math.max(1, score) } = this.props;\n\n        return (\n            &#x3C;div>\n                &#x3C;h6>{label}&#x3C;/h6>\n                &#x3C;span>{Math.round((score / total) * 100)}%&#x3C;/span>\n            &#x3C;/div>\n        );\n    }\n}\n</code></pre>\n<h2>Reusability <a id=\"9c36\"></a></h2>\n<p>React encourages you to think in terms of reusability as you construct the user<br>\ninterface from elements and components that you create. When you<br>\nmake a list or a button, you can then reuse those components to show different data ‘state’ in the same UI structure as you have built for different data previously.<img src=\"https://miro.medium.com/max/60/0*cBLQ5aBP2qihrT59.jpeg?q=20\"><img src=\"https://miro.medium.com/max/1885/0*cBLQ5aBP2qihrT59.jpeg\"></p>\n<h3>Component-Based <a id=\"a38d\"></a></h3>\n<p>Build encapsulated components that manage their own state, then compose them to make complex UIs.</p>\n<p>Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.</p>\n<h3>Learn Once, Write Anywhere <a id=\"fc7f\"></a></h3>\n<p>We don’t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code.</p>\n<p>React can also render on the server using Node and power mobile apps using <a href=\"https://reactnative.dev/\">React Native</a>.</p>\n<h2>Speed <a id=\"345f\"></a></h2>\n<p>Due to the use of a virtual DOM, React handles changes to a Web page more<br>\nintelligently than just string manipulation. It is constantly monitors the<br>\nvirtual DOM for changes. It very efficiently reconciles changes in the virtual<br>\nDOM with what it has already produced in the real DOM. This is what<br>\nmakes React one of the speediest front-end libraries available.<img src=\"https://miro.medium.com/max/60/0*OdOq6pmpXBJhjj7k.png?q=20\"><img src=\"https://miro.medium.com/max/810/0*OdOq6pmpXBJhjj7k.png\"></p>\n<h3>3. Who uses react? <a id=\"c395\"></a></h3>\n<ul>\n<li>Companies such as Facebook app for android and Instagram</li>\n<li><a href=\"https://facebook.github.io/react-native/showcase.html\">Here</a> is a link to a list of other companies who use react.</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/60/1*Cn9JvaSmkxdLwgXIO9Y8iQ.png?q=20\"><img src=\"https://miro.medium.com/max/1027/1*Cn9JvaSmkxdLwgXIO9Y8iQ.png\">Who uses react</p>\n<h3>4. Setting up react <a id=\"ba44\"></a></h3>\n<ul>\n<li>React can be set up in CodePen for quick practice development by adding react.js, react-dom and babel.</li>\n<li>It can also be set up by downloading a react starter project from GitHub installing node and following these <a href=\"https://github.com/hjb23/ReduxSimpleStarter\">instructions</a>.</li>\n<li>Alternatively it can be set up through NPM like <a href=\"https://www.codementor.io/tamizhvendan/beginner-guide-setup-reactjs-environment-npm-babel-6-webpack-du107r9zr\">this</a>.</li>\n</ul>\n<h3>5. Intro to eco system <a id=\"6ef8\"></a></h3>\n<ul>\n<li>Composition, being able to wrap up sections of code into there own containers so they can be re used.</li>\n<li>How to make a large application? by combining small components to create a larger complex application.</li>\n</ul>\n<h3>6. Imperative vs Declarative <a href=\"https://medium.com/trabe/why-is-react-declarative-a-story-about-function-components-aaae83198f79\">(React is Declarative)</a> <a id=\"ea7a\"></a></h3>\n<ul>\n<li><strong>Imperative, ‘telling to computer HOW to do something’ e.g looping over an array of numbers using a for loop.</strong></li>\n<li><strong>Declarative, is concerned about WHAT we want to happen. e.g using a reduce method on an array.</strong></li>\n<li>Benefits of using declarative code:</li>\n<li>Reduce side effects</li>\n<li>Minimize mutability</li>\n<li>Less Bugs</li>\n</ul>\n<h3>7. Unidirectional Data Flow <a id=\"e6f2\"></a></h3>\n<ul>\n<li>As the state collects from user interaction, the UI gets updated.</li>\n<li>Explicit Mutations</li>\n<li>Whenever the state needs to be updated in our application setState has to be called.</li>\n</ul>\n<pre><code class=\"language-text\">this.setState({\n  highlight: !this.state.highlight,\n})\n</code></pre>\n<h3>7.1. First component <a id=\"d1c5\"></a></h3>\n<ul>\n<li>Components are the building blocks of React.</li>\n<li>They are similar to a collection of HTML,CSS, JS and data specific to that component.</li>\n<li>They can be defined in pure JavaScript or JSX.</li>\n<li>Data is either received from a component’s parent component, or it’s contained in the component itself.</li>\n<li>Applications can be separated into smaller components like this…</li>\n<li>React components can be created using ES6 class like this.</li>\n</ul>\n<pre><code class=\"language-text\">import React from 'react';class Hello extends React.Component {\n  render () {\n    return &#x3C;h1>Hello, {this.props.name}!&#x3C;/h1>;\n  }\n}export default Hello;\n</code></pre>\n<ul>\n<li>At the top with have the code to bring react and react dom libraries in.</li>\n<li>React library is used for the react syntax.</li>\n<li>React DOM is used to update the DOM.</li>\n<li>We then have the Class section which creates the component.</li>\n<li>Render() describes the specific UI for the component.</li>\n<li>Return is used to return the JSX</li>\n<li>And Finally ReactDOM.render is used to update the DOM.</li>\n</ul>\n<h3>8. Data flow with props <a id=\"91ff\"></a></h3>\n<p>Small examples of data flow, see if you can get the code to work.</p>\n<p><a href=\"https://codepen.io/bgoonz/embed/WNpoLbg?default-tab=&#x26;theme-id=\">https://codepen.io/bgoonz/embed/WNpoLbg?default-tab=&#x26;theme-id=</a></p>\n<p>{% embed url=\"<a href=\"https://codepen.io/bgoonz/embed/BaWQGQp?default-tab=&#x26;theme-id=\">https://codepen.io/bgoonz/embed/BaWQGQp?default-tab=&#x26;theme-id=</a>\" %}</p>\n<h3>9. Creating lists with map <a id=\"6790\"></a></h3>\n<p>{% embed url=\"<a href=\"https://codepen.io/bgoonz/embed/XWMNoJr?default-tab=&#x26;theme-id=\">https://codepen.io/bgoonz/embed/XWMNoJr?default-tab=&#x26;theme-id=</a>\" %}</p>\n<p>The parent component passes down to the child component as props.</p>\n<p>Using props to access names and map to loop through each list item. Then passing this by using props.</p>\n<p>{% embed url=\"<a href=\"https://codepen.io/bgoonz/embed/gOmLZbX?default-tab=&#x26;theme-id=\">https://codepen.io/bgoonz/embed/gOmLZbX?default-tab=&#x26;theme-id=</a>\" %}</p>\n<p>Checking data to see if Boolean is true then adding detail to the list.</p>\n<p>{% embed url=\"<a href=\"https://codepen.io/bgoonz/embed/WNpoLbg?default-tab=&#x26;theme-id=\">https://codepen.io/bgoonz/embed/WNpoLbg?default-tab=&#x26;theme-id=</a>\" %}</p>\n<h3>10. Prop types <a id=\"18ed\"></a></h3>\n<p>PropTypes allow you to declare the type (string, number, function, etc) of each prop being passed to a component. Then if a prop passed in isn’t of the declared type you’ll get a warning in the console.</p>\n<h2>Excerpt from the React website: <a id=\"7094\"></a></h2>\n<h2>React — A JavaScript library for building user interfaces <a id=\"5047\"></a></h2>\n<blockquote>\n<p><em>A JavaScript library for building user interfaces</em></p>\n</blockquote>\n<h3>Declarative <a id=\"cae4\"></a></h3>\n<p>React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.</p>\n<p>Declarative views make your code more predictable and easier to debug.</p>\n<h3>A Simple Component <a id=\"b36a\"></a></h3>\n<p>React components implement a <code>render()</code> method that takes input data and returns what to display. This example uses an XML-like syntax called JSX. Input data that is passed into the component can be accessed by <code>render()</code> via <code>this.props</code>.</p>\n<p>JSX is optional and not required to use React. Try the <a href=\"https://babeljs.io/repl/#?presets=react&#x26;code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUAcjogQUcwEpeAJTjDgUACIB5ALLK6aRklTRBQ0KCohMQk6Bx4gA\">Babel REPL</a> to see the raw JavaScript code produced by the JSX compilation step.</p>\n<p>In addition to taking input data (accessed via <code>this.props</code>), a component can maintain internal state data (accessed via <code>this.state</code>). When a component’s state data changes, the rendered markup will be updated by re-invoking <code>render()</code>.</p>\n<h3>An Application <a id=\"2936\"></a></h3>\n<p>Using <code>props</code> and <code>state</code>, we can put together a small Todo application. This example uses <code>state</code> to track the current list of items as well as the text that the user has entered. Although event handlers appear to be rendered inline, they will be collected and implemented using event delegation.</p>\n<h3>A Component Using External Plugins <a id=\"2276\"></a></h3>\n<p>React allows you to interface with other libraries and frameworks. This example uses remarkable, an external Markdown library, to convert the <code>&#x3C;textarea></code>’s value in real time.</p>\n<h2>ALL CODE:</h2>\n<pre><code class=\"language-jsx\"></code></pre>\n<h2>React Cheat Sheet: <a id=\"8738\"></a></h2>\n<p>React-Tutorial-1:<a href=\"https://replit.com/@bgoonz/react-tutorial-1\">react-tutorial-1A React repl by bgoonzreplit.com</a></p>\n<p>React Boilerplate:<a href=\"https://replit.com/@bgoonz/Reactjs-Babel-Webpack-Boilerplate#index.js\">React.js + Babel + Webpack BoilerplateCreated by @eankeen | The ultimate trifecta - React, Babel, and Webpack - complete with hot module reloading and a…replit.com<br>\n</a></p>"
                },
                {
                    "url": "/docs/tools/default-readme/",
                    "relativePath": "docs/tools/default-readme.md",
                    "relativeDir": "docs/tools",
                    "base": "default-readme.md",
                    "name": "default-readme",
                    "frontmatter": {
                        "title": "Default Readme",
                        "weight": 1,
                        "seo": {
                            "title": "Default Readme",
                            "description": "This is the Default Readme page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Default Readme", "keyName": "property" },
                                { "name": "og:description", "value": "This is the Default Readme page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "Default Readme" },
                                { "name": "twitter:description", "value": "This is the Default Readme page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<!-- HEADER -->\n<div align=\"center\">\n  <!-- SHIELDS -->\n  <!-- For how-to notes on shield badges, see docs: https://shields.io/ -->\n<p><img src=\"https://avatars.githubusercontent.com/u/66654881?s=460&#x26;u=fa9d2cc45bc228dd9b7d3dee6d4653f940fab35a&#x26;v=4\" alt=\"logo\"></p>\n<h1>Title</h1>\n<h2>Subtitle</h2>\n  <!-- TOC -->\n<p><strong>TOC</strong><br>\n<a href=\"#about\">About</a> ● <a href=\"#features\">Features</a> ● <a href=\"#how-it-works\">How It Works</a> ● <a href=\"#installation\">Installation</a> ● <a href=\"#development\">Development</a> ● <a href=\"#contact\">Contact</a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n  <!-- SUMMARY -->\n<p>A 1-5 sentence summary of what the app is.<br>\n1-3 sentences ideal.<br>\nMarkdown tip: Add two spaces at the end of a line to create a line break.</p>\n  <!-- SPLASHY IMAGE -->\n<p><img \n    src=\"docs/images/splash.png\" \n    alt=\"Splashy 100%-width image\" \n    title=\"\" \n    width=\"100%\"></p>\n  <!-- WEBSITE LINK -->\n<h2>Try the Demo!</h2>\n<p><a href=\"\">[Live Website]</a></p>\n  <!-- OPTIONAL Use an image button for extra fancy points. -->\n  <!-- <a href=\"\"><img src=\"\" alt=\"Button image to go to app site\" title=\"Click to see the live site!\"></a> -->\n</div>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<!-- ABOUT -->\n<div align=\"center\">\n<h2>About</h2>\n<p><a href=\"\">● See Website ●</a><br>\n<em>(Inspired by <a href=\"\">app name</a>)</em></p>\n</div>\n<p><img src=\"\" \n  alt=\"Animated gif example of app in action, or interesting detail, etc.\" \n  title=\"\"\n  width=\"50%\"\n  align=\"left\"></p>\n<p>Describe overview of app, themes and philosophy, inspiration, audience, or whatever... 1-2 paragraphs</p>\n<br clear=\"both\">\n<!-- OPTIONAL EXTRA IMAGE(S) -->\n<!-- Option 1: A single, centered 100%-width image. Can narrow, like to 80%, too if desired. A screenshot with many details or a narrow row image may be good. -->\n<p><img src=\"\" alt=\"  \"></p>\n<p><img src=\"\" alt=\"  \"></p>\n<p><img src=\"\" alt=\"  \"></p>\n<p><img src=\"\" alt=\"  \"></p>\n<p><img src=\"\" alt=\"  \"></p>\n<!-- Option 2: Multiple images in a row, 'width' attribute set to evenly split the x-axis space. Ensure matching canvas ratios for the best appearance. Two rows combined can make a nice 'square' collage. May be food for a 'full-screen screenshots' gallery. -->\n<div align=\"center\">\n  <img \n    src=\"\" \n    alt=\"Image 1\" \n    title=\"\" \n    width=\"48%\">\n  <img \n    src=\"\" \n    alt=\"Image 2\" \n    title=\"\" \n    width=\"48%\">\n</div>\n<!-- Option 3: Multiple images in a row, 'height' attribute set to hard values to ensure matching heights. Good for images with different aspect ratios. -->\n<div align=\"center\">\n  <img \n    src=\"\" \n    alt=\"Image 1\" \n    title=\"\" \n    height=\"500px\">\n  <img \n    src=\"\" \n    alt=\"Image 2\" \n    title=\"\" \n    height=\"500px\">\n</div>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<!-- FEATURES -->\n<div align=\"center\">\n<h2>Features</h2>\n</div>\n<ul>\n<li><strong>Key action word</strong> a feature here.</li>\n<li><strong>Emphasize action</strong> for this feature.</li>\n<li>Feature 3 <strong>highlights this benefit</strong>.</li>\n</ul>\n<h2>For the Future</h2>\n<p>An optional <em>brief</em> note describing scheduling or other planning details.</p>\n<ul>\n<li><strong>Major</strong> <em>(high priority)</em> A major feature</li>\n<li><strong>Major</strong> A major feature</li>\n<li><strong>Minor</strong> <em>(low priority)</em> A minor feature</li>\n<li><strong>Maybe</strong> Undecided ideas or brainstorming</li>\n</ul>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<!-- INSTRUCTIONS -->\n<div align=\"center\">\n<h2>How It Works</h2>\n<p><a href=\"#1-step-one\">1. Step One</a><br>\n<a href=\"#how-to-use-feature-abc\">How to Use Cool Feature ABC!</a><br>\n<a href=\"#troubleshooting-z\">Troubleshooting Z</a></p>\n</div>\n<h2>1. Step One</h2>\n<p><img \n  src=\"\" \n  alt=\"Screenshot, animated gif, diagram, etc illustrating this step\" \n  title=\"\" \n  width=\"50%\"\n  align=\"right\"></p>\n<ul>\n<li>To <strong>do a thing</strong>, follow this step.</li>\n<li><strong>*TIP</strong> This is a helpful tip.*</li>\n<li><strong>*NOTE</strong> This is note about something.*</li>\n<li><strong>*WARNING!</strong> This is a warning!*</li>\n</ul>\n<br clear=\"both\">\n<blockquote>\n<p><strong>Optional Special Section!</strong><br>\nFor any additional asides. Maybe illustrating a specific example, a table of information, a code snippet, or 'fun facts' or quotes!</p>\n<ol>\n<li>A list</li>\n<li>could be</li>\n<li>nice too</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>Header A</th>\n<th>Header B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>B</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<div align=\"center\">\n  <img \n    src=\"\" \n    alt=\"Optional extra image(s)\" \n    title=\"\" \n    width=\"100%\">\n</div>\n<h2>How to Use Feature ABC</h2>\n<p>Repeat the pattern.</p>\n<h2>Troubleshooting Z</h2>\n<p>Repeat the pattern.</p>\n<div align=\"center\">\n<h2>Installation</h2>\n</div>\n<ol>\n<li>Create a new postgres database and owner.</li>\n<li>Create a <code>.env</code> file matching the <code>.env.example</code> file and your new postgres information.</li>\n<li>Migrate the database with <code>npx sequelize-cli db:migrate</code>.</li>\n<li>Seed the migration with <code>npx sequelize-cli db:seed:all</code>.</li>\n<li>Run locally with <code>npm start</code>.</li>\n</ol>\n<h2>Get started on Heroku - Account, Database, Config Vars</h2>\n<ol>\n<li>Install the <a href=\"https://devcenter.heroku.com/articles/heroku-cli\">Heroku CLI</a>, if you haven't done so already.</li>\n<li>Create a <a href=\"https://signup.heroku.com/dc\">free Heroku account</a>.</li>\n<li>Login and <a href=\"https://dashboard.heroku.com/new-app\">create a new Heroku app</a>.</li>\n<li>Navigate to the <em>Resources</em> tab an set up a 'Heroku Postgres' database for the app.</li>\n<li>Select the 'Hobby Dev - Free' plan.</li>\n<li>Navigate to the <em>Settings</em> tab. Click 'Reveal Config Vars'. Set the environment variables needed to run the app.</li>\n<li><strong>NOTE</strong> NEVER check in <code>.env</code> files or any private keys. Environment variables set in an <code>.env</code> file won't work in Heroku anyway.</li>\n<li><strong>NOTE</strong> See the <code>DATABASE_URL</code> is already set. This is done when the Heroku Postgres database was set up. Therefore, <code>DB_USERNAME</code>, <code>DB_PASSWORD</code>, and <code>DB_DATABASE</code> arent' required.</li>\n</ol>\n<h2>Configure the app to use the Heroku Postgres database</h2>\n<p>There are two ways to configure the <code>production</code> environment:</p>\n<ol>\n<li>With <em>dotenv</em> and a <code>.sequelizerc</code> file that points to a <code>config/database.js</code> file.</li>\n<li>The Sequelize CLI's auto-generated <code>config.json</code> file.</li>\n</ol>\n<p><strong>With .sequelizerc and dotenv</strong>\nUpdate the <code>config/database.js</code> file with a <code>production</code> key like so.</p>\n<pre><code class=\"language-js\">// config/database.js\n// ...\nmodule.exports = {\n    development: {\n        // ...\n    },\n    production: {\n        use_env_variable: 'DATABASE_URL',\n        dialect: 'postgres',\n        dialectOptions: { ssl: true },\n        seederStorage: 'sequelize'\n    }\n};\n</code></pre>\n<p><strong>With Sequelize CLI's config.json</strong>\nChange the <code>production</code> entry to look like this:</p>\n<pre><code class=\"language-json\">\"production\": {\n  \"dialect\": \"postgres\",\n  \"seederStorage\": \"sequelize\",\n  \"use_env_variable\": \"DATABASE_URL\"\n}\n</code></pre>\n<h2>➤ Push to Heroku</h2>\n<ol>\n<li>In the root of the app's repo directory, log into Heroku with <code>heroku login</code>.</li>\n<li>Add a new remote to GitHub configuration with <code>heroku git:remote -a &#x3C;&#x3C;app-name-here>></code>.</li>\n<li>Add all changes with <code>git add .</code>.</li>\n<li>Commit changes with <code>git commit -m \"&#x3C;&#x3C;Add message here>>\"</code>. (Optionally, <code>git commit -am</code> Adds and commits in one command.)</li>\n<li>Push changes to Heroku with <code>git push Heroku</code>.</li>\n<li>You should see a successful build image.</li>\n</ol>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h1></h1>\n<pre><code class=\"language-bash\">remote: -----> Launching...\nremote:        Released v5\nremote:        https://«your-app-name».herokuapp.com/ deployed to Heroku\nremote:\nremote: Verifying deploy... done.\nTo https://git.heroku.com/«app-name-here».git\n</code></pre>\n<h2>➤ Run migrations on Heroku</h2>\n<ol>\n<li>To migrate your Heroku Postgres database, run the migration command prefaced with <code>heroku run</code> inside the repo.</li>\n</ol>\n<pre><code class=\"language-bash\">heroku run npx sequelize-cli db:migrate\n</code></pre>\n<ol start=\"2\">\n<li>To seed, preface the seed command with <code>heroku run</code> as well.</li>\n</ol>\n<pre><code class=\"language-bash\">heroku run npx sequelize-cli db:seed:all\n</code></pre>\n<ol start=\"3\">\n<li>To roll back, instead of dropping the database, first try to migrate down and up (shown below). If this doesn't work, reset the entire database by removing and adding the 'Heroku Postgres' add-on again, then migrating and seeding as the first time.</li>\n</ol>\n<pre><code class=\"language-bash\">heroku run npx sequelize-cli db:seed:undo:all\nheroku run npx sequelize-cli db:migrate:undo:all\nheroku run npx sequelize-cli db:migrate\nheroku run npx sequelize-cli db:seed:all\n</code></pre>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<div align=\"center\">\n<h2>➤ Development</h2>\n<p><strong>DEV TOC</strong><br>\n<a href=\"docs/development.md#technologies\">Technologies</a> ● <a href=\"docs/development.md#concept\">Concept</a> ● <a href=\"docs/development.md#models\">Models</a> ● <a href=\"docs/development.md#routes\">Routes</a> ● <a href=\"docs/development.md#wireframes\">Wireframes</a> ● <a href=\"#code-highlights\">Code Highlights</a> ● <a href=\"docs/development.md#development-snapshots\">Dev Snapshots</a></p>\n<p><a href=\"readme/development.md\">[See full dev notes HERE]</a><br>\nThe full notes on this project's development are kept in a separate document linked above.<br>\nIt details the technical aspects of this project's development.<br>\nA few sample snapshots are below from the development process.</p>\n<p><img \n    src=\"\" \n    alt=\"Snapshot 1\"\n    title=\"\"\n    height=\"250px\">\n<img \n    src=\"\" \n    alt=\"Snapshot 2\"\n    title=\"\"\n    height=\"250px\">\n<img \n    src=\"\" \n    alt=\"Snapshot 3\"\n    title=\"\"\n    height=\"250px\"></p>\n</div>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<!-- CONTACT -->\n<div align=\"center\">\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤Contact</h2>\n<p>Thank you very much for your interest in this project.<br>\nFeel free to reach out to provide feedback, bug reports, or anything else :) .</p>\n<!-- CONTRIBUTOR PROFILE -->\n<!-- Include: Name, title, job/search status, (opt) photo, (opt) summary of contributions, (opt) a few words or a quote, socials badges (github follow, linkedin, angellist, email, resume, portfolio, twitter, etc.), (opt) team/contact page from app's site -->\n<p><img \n    src=\"[docs/images/portrait.png](https://avatars.githubusercontent.com/u/66654881?s=460&u=fa9d2cc45bc228dd9b7d3dee6d4653f940fab35a&v=4)\" \n    alt=\"Bryan Gimer\" \n    height=\"100px\"\n    align=\"left\"></p>\n</div>\n<h2>Bryan Guner</h2>\n<p><em>(Full-stack software developer)</em></p>\n<p><a href=\"https://bgoonz.github.io\"><img src=\"https://img.shields.io/badge/-%E2%9D%A4_Portfolio-f58?style=flat-square&#x26;logo=a&#x26;logoColor=white&#x26;link=https://bgoonz.github.io/\" alt=\"Portfolio\"></a>\n<a href=\"https://github.com/bgoonz/resume-cv-portfolio-samples/blob/master/2021-resume/bryan-guner-resume-2021.pdf\" download><img src=\"https://img.shields.io/badge/-Resume-f00?style=flat-square&#x26;logo=adobe-acrobat-reader&#x26;logoColor=white\" alt=\"Resume PDF\"></a>\n<a href=\"mailto:bryan.guner@gmail.com\"><img src=\"https://img.shields.io/badge/bryan.guner@gmail.com-f4b400?style=flat-square&#x26;logo=gmail&#x26;logoColor=black&#x26;link=mailto:bryan.guner@gmail.com\" alt=\"Bryan&#x27;s email\"></a>\n<a href=\"https://web-dev-hub.com/\"><img src=\"https://img.shields.io/badge/-Blog-21759b?style=flat-square&#x26;logo=WordPress&#x26;logoColor=white&#x26;link=https://web-dev-hub.com/\" alt=\"Blog\"></a>\n<a href=\"https://www.linkedin.com/in/bryan-guner-046199128/\"><img src=\"https://img.shields.io/badge/-LinkedIn-0077b5?style=flat-square&#x26;logo=Linkedin&#x26;logoColor=white&#x26;link=https://www.linkedin.com/in/bryan-guner-046199128/\" alt=\"Linkedin\"></a>\n<a href=\"https://angel.co/u/bryan-guner\"><img src=\"https://img.shields.io/badge/-AngelList-black?style=flat-square&#x26;logo=AngelList&#x26;logoColor=white&#x26;link=https://angel.co/u/bryan-guner\" alt=\"AngelList\"></a>\n<a href=\"https://github.com/bgoonz\"><img src=\"https://img.shields.io/github/followers/bgoonz?label=follow&#x26;style=social\" alt=\"GitHub bgoonz\"></a></p>\n</div>\n<br clear=\"both\">\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<!--end-->"
                },
                {
                    "url": "/docs/tools/",
                    "relativePath": "docs/tools/index.md",
                    "relativeDir": "docs/tools",
                    "base": "index.md",
                    "name": "index",
                    "frontmatter": {
                        "title": "Tools",
                        "excerpt": "See some interesting tools developed by the Web-Dev-Hubcommunity to help automate parts of your workflow.",
                        "seo": {
                            "title": "Tools",
                            "description": "This is the tools page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Tools", "keyName": "property" },
                                { "name": "og:description", "value": "This is the tools page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "Tools" },
                                { "name": "twitter:description", "value": "This is the tools page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<iframe src=\"https://onedrive.live.com/embed?cid=D21009FDD967A241&resid=D21009FDD967A241%21538729&authkey=AHSDSyoYqzg2K2E\" height=\"300px\" width=\"100%\" style=\"zoom:0.75;\">\n</iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<iframe src=\"https://lambda-resources.netlify.app/\" height=\"1600px\" width=\"100%\" style=\"zoom:0.75;\"></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<iframe src=\"https://devtools42.netlify.app/\" height=\"1600px\" width=\"100%\" style=\"zoom:0.75;\"></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<iframe src=\"https://ternary42.netlify.app/\" height=\"400px\" width=\"100%\" style=\"zoom:0.75;\"></iframe>"
                },
                {
                    "url": "/docs/tools/plug-ins/",
                    "relativePath": "docs/tools/plug-ins.md",
                    "relativeDir": "docs/tools",
                    "base": "plug-ins.md",
                    "name": "plug-ins",
                    "frontmatter": {
                        "title": "Plug-ins",
                        "weight": 2,
                        "seo": {
                            "title": "Gatsby Plugins For This Sites Content Model",
                            "description": "This is the Gatsby Plugins For This Sites Content Model page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Gatsby Plugins For This Sites Content Model", "keyName": "property" },
                                { "name": "og:description", "value": "This is the Gatsby Plugins For This Sites Content Model page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "Gatsby Plugins For This Sites Content Model" },
                                { "name": "twitter:description", "value": "This is the Gatsby Plugins For This Sites Content Model page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<div class=\"note\">\n  <strong>Note:</strong> These are the gatsby plugins that power the file system of this website! <strong>See more in the Docs</strong> section.\n</div>\n<h3>Code:</h3>\n<blockquote>\n<p>Gatsby Source File System</p>\n</blockquote>\n<pre><code>js\nconst path = require('path');\nconst fs = require('fs');\nconst { createFilePath } = require('gatsby-source-filesystem');\nconst _ = require('lodash');\n\nfunction findFileNode({ node, getNode }) {\n    let fileNode = node;\n    let ids = [fileNode.id];\n\n    while (fileNode &#x26;&#x26; fileNode.internal.type !== `File` &#x26;&#x26; fileNode.parent) {\n        fileNode = getNode(fileNode.parent);\n\n        if (!fileNode) {\n            break;\n        }\n\n        if (_.includes(ids, fileNode.id)) {\n            console.log(`found cyclic reference between nodes`);\n            break;\n        }\n\n        ids.push(fileNode.id);\n    }\n\n    if (!fileNode || fileNode.internal.type !== `File`) {\n        console.log('did not find ancestor File node');\n        return null;\n    }\n\n    return fileNode;\n}\n\nexports.onCreateNode = ({ node, getNode, actions }, options) => {\n    const { createNodeField } = actions;\n\n    if (node.internal.type === 'MarkdownRemark') {\n        let fileNode = findFileNode({ node, getNode });\n        if (!fileNode) {\n            throw new Error('could not find parent File node for MarkdownRemark node: ' + node);\n        }\n\n        let url;\n        if (node.frontmatter.url) {\n            url = node.frontmatter.url;\n        } else if (_.get(options, 'uglyUrls', false)) {\n            url = path.join(fileNode.relativeDirectory, fileNode.name + '.html');\n        } else {\n            url = createFilePath({ node, getNode });\n        }\n\n        createNodeField({ node, name: 'url', value: url });\n        createNodeField({\n            node,\n            name: 'absolutePath',\n            value: fileNode.absolutePath\n        });\n        createNodeField({\n            node,\n            name: 'relativePath',\n            value: fileNode.relativePath\n        });\n        createNodeField({ node, name: 'absoluteDir', value: fileNode.dir });\n        createNodeField({\n            node,\n            name: 'relativeDir',\n            value: fileNode.relativeDirectory\n        });\n        createNodeField({ node, name: 'base', value: fileNode.base });\n        createNodeField({ node, name: 'ext', value: fileNode.ext });\n        createNodeField({ node, name: 'name', value: fileNode.name });\n    }\n};\n\nexports.createPages = ({ graphql, getNode, actions, getNodesByType }) => {\n    const { createPage, deletePage } = actions;\n\n    // Use GraphQL to bring only the \"id\" and \"html\" (added by gatsby-transformer-remark)\n    // properties of the MarkdownRemark nodes. Don't bring additional fields\n    // such as \"relativePath\". Otherwise, Gatsby's GraphQL resolvers might infer\n    // types these fields as File and change their structure. For example, the\n    // \"html\" attribute exists only on a GraphQL node, but does not exist on the\n    // underlying node.\n    return graphql(`\n        {\n            allMarkdownRemark {\n                edges {\n                    node {\n                        id\n                        html\n                    }\n                }\n            }\n        }\n    `).then((result) => {\n        if (result.errors) {\n            return Promise.reject(result.errors);\n        }\n\n        const nodes = result.data.allMarkdownRemark.edges.map(({ node }) => node);\n        const siteNode = getNode('Site');\n        const siteDataNode = getNode('SiteData');\n        const sitePageNodes = getNodesByType('SitePage');\n        const sitePageNodesByPath = _.keyBy(sitePageNodes, 'path');\n        const siteData = _.get(siteDataNode, 'data', {});\n\n        const pages = nodes.map((graphQLNode) => {\n            // Use the node id to get the underlying node. It is not exactly the\n            // same node returned by GraphQL, because GraphQL resolvers might\n            // transform node fields.\n            const node = getNode(graphQLNode.id);\n            return {\n                url: node.fields.url,\n                relativePath: node.fields.relativePath,\n                relativeDir: node.fields.relativeDir,\n                base: node.fields.base,\n                name: node.fields.name,\n                frontmatter: node.frontmatter,\n                html: graphQLNode.html\n            };\n        });\n\n        nodes.forEach((graphQLNode) => {\n            const node = getNode(graphQLNode.id);\n            const url = node.fields.url;\n\n            const template = node.frontmatter.template;\n            if (!template) {\n                console.error(`Error: undefined template for ${url}`);\n                return;\n            }\n\n            const component = path.resolve(`./src/templates/${template}.js`);\n            if (!fs.existsSync(component)) {\n                console.error(`Error: component \"src/templates/${template}.js\" missing for ${url}`);\n                return;\n            }\n\n            const existingPageNode = _.get(sitePageNodesByPath, url);\n\n            const page = {\n                path: url,\n                component: component,\n                context: {\n                    url: url,\n                    relativePath: node.fields.relativePath,\n                    relativeDir: node.fields.relativeDir,\n                    base: node.fields.base,\n                    name: node.fields.name,\n                    frontmatter: node.frontmatter,\n                    html: graphQLNode.html,\n                    pages: pages,\n                    site: {\n                        siteMetadata: _.get(siteData, 'site-metadata', {}),\n                        pathPrefix: siteNode.pathPrefix,\n                        data: _.omit(siteData, 'site-metadata')\n                    }\n                }\n            };\n\n            if (existingPageNode &#x26;&#x26; !_.get(page, 'context.menus')) {\n                page.context.menus = _.get(existingPageNode, 'context.menus');\n            }\n\n            createPage(page);\n        });\n    });\n};\n\n```\n&#x3C;/pre>\n</code></pre>\n<h5>Gatsby Source Data</h5>\n<pre><code>&#x3C;pre>\n```javascript\n</code></pre>\n<pre><code class=\"language-javascript\">const path = require('path');\nconst yaml = require('js-yaml');\nconst fse = require('fs-extra');\nconst chokidar = require('chokidar');\nconst _ = require('lodash');\n\nconst metadataFileName = 'site-metadata.json';\n\nconst parsers = {\n    yaml: (data) => yaml.safeLoad(data, { schema: yaml.JSON_SCHEMA }),\n    json: (data) => JSON.parse(data)\n};\n\nconst supportedExtensions = {\n    yaml: parsers.yaml,\n    yml: parsers.yaml,\n    json: parsers.json\n};\n\nexports.sourceNodes = (props, pluginOptions = {}) => {\n    const createContentDigest = props.createContentDigest;\n    const { createNode } = props.actions;\n    const reporter = props.reporter;\n\n    if (!_.get(pluginOptions, 'path')) {\n        pluginOptions.path = 'src/data';\n    }\n\n    if (!path.isAbsolute(pluginOptions.path)) {\n        pluginOptions.path = path.resolve(process.cwd(), pluginOptions.path);\n    }\n\n    reporter.info(`[gatsby-source-data] setup file watcher and create site data`);\n\n    const dataPath = pluginOptions.path;\n    const createSiteDataFromFilesPartial = _.partial(createSiteDataFromFiles, {\n        dataPath,\n        createNode,\n        createContentDigest,\n        reporter\n    });\n    const watcher = chokidar.watch([dataPath, metadataFileName], {\n        cwd: '.',\n        ignoreInitial: true\n    });\n    watcher.on('add', createSiteDataFromFilesPartial);\n    watcher.on('change', createSiteDataFromFilesPartial);\n    watcher.on('unlink', createSiteDataFromFilesPartial);\n\n    return createSiteDataFromFiles({ dataPath, createNode, createContentDigest, reporter }, null);\n};\n\nasync function createSiteDataFromFiles({ dataPath, createNode, createContentDigest, reporter }, changedFile) {\n    reporter.info(`[gatsby-source-data] create site data from files, updated path: ${changedFile}`);\n    let dataFiles = [];\n\n    const dataPathExists = await fse.pathExists(dataPath);\n    if (dataPathExists) {\n        dataFiles = await readDirRecursively(dataPath);\n    }\n\n    const metadataPath = path.resolve(metadataFileName);\n    const metadataExists = await fse.pathExists(metadataPath);\n    if (metadataExists) {\n        dataFiles.push(metadataFileName);\n    }\n\n    const sortedDataFiles = dataFiles.slice().sort();\n    const data = await convertDataFilesToJSON(sortedDataFiles, dataPath, reporter);\n\n    createNode({\n        id: 'SiteData',\n        parent: null,\n        children: [],\n        data: data,\n        internal: {\n            type: 'SiteData',\n            contentDigest: createContentDigest(JSON.stringify(data)),\n            description: `Site data from ${path.relative(process.cwd(), dataPath)}`\n        }\n    });\n}\n\nasync function readDirRecursively(dir, options) {\n    const rootDir = _.get(options, 'rootDir', dir);\n    const files = await fse.readdir(dir);\n    const promises = _.map(files, async (file) => {\n        const filePath = path.join(dir, file);\n        const stats = await fse.stat(filePath);\n        if (stats.isDirectory()) {\n            return readDirRecursively(filePath, { rootDir });\n        } else if (stats.isFile()) {\n            return path.relative(rootDir, filePath);\n        } else {\n            return null;\n        }\n    });\n    const recFiles = await Promise.all(promises);\n    return _.chain(recFiles).compact().flatten().value();\n}\n\nfunction convertDataFilesToJSON(dataFiles, dataDirPath, reporter) {\n    let promises = _.map(dataFiles, (filePath) => {\n        const pathObject = path.parse(filePath);\n        const absFilePath = pathObject.base === metadataFileName ? metadataFileName : path.join(dataDirPath, filePath);\n        const relPath = pathObject.base === metadataFileName ? metadataFileName : filePath;\n        const relDir = pathObject.base === metadataFileName ? '' : pathObject.dir;\n        const ext = pathObject.ext.substring(1);\n        if (!_.has(supportedExtensions, ext)) {\n            return null;\n        }\n        return fse.readFile(absFilePath).then((data) => {\n            const propPath = _.compact(relDir.split(path.sep).concat(pathObject.name));\n            const res = {};\n            try {\n                const parsedData = supportedExtensions[ext](data);\n                _.set(res, propPath, parsedData);\n            } catch (err) {\n                reporter.warn(`[gatsby-source-data] could not parse file: ${relPath}`);\n            }\n            return res;\n        });\n    });\n    return Promise.all(promises).then((results) => {\n        return _.reduce(results, (data, res) => _.merge(data, res), {});\n    });\n}\n</code></pre>\n<pre><code class=\"language-javascript\">&#x3C;/pre>\n</code></pre>"
                },
                {
                    "url": "/docs/tools/notes-template/",
                    "relativePath": "docs/tools/notes-template.md",
                    "relativeDir": "docs/tools",
                    "base": "notes-template.md",
                    "name": "notes-template",
                    "frontmatter": {
                        "title": "Notes Template",
                        "subtitle": "The Notes Template provides you with a blueprint of default post and page styles.",
                        "image": "images/5.jpg",
                        "seo": {
                            "title": "Theme Notes Template",
                            "description": "A reference for suggested typographic treatment and styles for your content",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "Theme Notes Template", "keyName": "property" },
                                {
                                    "name": "og:description",
                                    "value": "A reference for suggested typographic treatment and styles for your content",
                                    "keyName": "property"
                                },
                                { "name": "og:image", "value": "images/5.jpg", "keyName": "property", "relativeUrl": true },
                                { "name": "twitter:card", "value": "summary_large_image" },
                                { "name": "twitter:title", "value": "Theme Notes Template" },
                                { "name": "twitter:description", "value": "A reference for suggested typographic treatment and styles for your content" },
                                { "name": "twitter:image", "value": "images/5.jpg", "relativeUrl": true }
                            ]
                        },
                        "template": "page"
                    },
                    "html": "<h1>Title</h1>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<ul>\n<li>\n<p>Description:</p>\n<blockquote>\n<p>/_ Description here _/</p>\n</blockquote>\n</li>\n</ul>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>ToC:</h2>\n<ul>\n<li>\n<p><a href=\"#title\">Title</a></p>\n<ul>\n<li><a href=\"#toc\">ToC:</a></li>\n<li><a href=\"#main-notes\">Main Notes:</a></li>\n<li><a href=\"#resource-links\">Resource Links:</a></li>\n<li><a href=\"#10-x-10-table\">10 X 10 Table</a></li>\n<li><a href=\"#headers\">Headers</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#h1\">H1</a></p>\n<ul>\n<li>\n<p><a href=\"#h2\">H2</a></p>\n<ul>\n<li>\n<p><a href=\"#h3\">H3</a></p>\n<ul>\n<li>\n<p><a href=\"#h4\">H4</a></p>\n<ul>\n<li>\n<p><a href=\"#h5\">H5</a></p>\n<ul>\n<li><a href=\"#h6\">H6</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#alt-h1\">Alt-H1</a></p>\n<ul>\n<li><a href=\"#alt-h2\">Alt-H2</a></li>\n<li><a href=\"#emphasis\">Emphasis</a></li>\n<li><a href=\"#lists\">Lists</a></li>\n<li><a href=\"#links\">Links</a></li>\n<li><a href=\"#images\">Images</a></li>\n<li><a href=\"#code-and-syntax-highlighting\">Code and Syntax Highlighting</a></li>\n<li><a href=\"#tables\">Tables</a></li>\n<li><a href=\"#blockquotes\">Blockquotes</a></li>\n<li><a href=\"#inline-html\">Inline HTML</a></li>\n<li><a href=\"#horizontal-rule\">Horizontal Rule</a></li>\n<li><a href=\"#line-breaks\">Line Breaks</a></li>\n<li><a href=\"#youtube-videos\">YouTube Videos</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#this-is-an-h1\">This is an H1</a></p>\n<ul>\n<li>\n<p><a href=\"#this-is-an-h2\">This is an H2</a></p>\n<ul>\n<li>\n<p><a href=\"#this-is-an-h3\">This is an H3</a></p>\n<ul>\n<li><a href=\"#this-is-an-h4\">This is an H4</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#quoting\">Quoting</a></li>\n<li><a href=\"#unordered-lists\">Unordered Lists</a></li>\n<li><a href=\"#ordered-lists\">Ordered Lists</a></li>\n<li><a href=\"#video-embeds\">Video Embeds</a></li>\n<li><a href=\"#code-blocks\">Code Blocks</a></li>\n<li><a href=\"#tables-1\">Tables</a></li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>Main Notes:</h2>\n<pre><code class=\"language-html\"></code></pre>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<pre><code class=\"language-js\"></code></pre>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>Resource Links:</h2>\n<ol>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n</ol>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>10 X 10 Table</h2>\n<table>\n<tbody>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<a name=\"headers\"/>\n<h2>Headers</h2>\n<pre><code class=\"language-no-highlight\"># H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n</code></pre>\n<h1>H1</h1>\n<h2>H2</h2>\n<h3>H3</h3>\n<h4>H4</h4>\n<h5>H5</h5>\n<h6>H6</h6>\n<p>Alternatively, for H1 and H2, an underline-ish style:</p>\n<h1>Alt-H1</h1>\n<h2>Alt-H2</h2>\n<a name=\"emphasis\"/>\n<h2>Emphasis</h2>\n<pre><code class=\"language-no-highlight\">Emphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n</code></pre>\n<p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p>\n<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>\n<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>\n<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>\n<a name=\"lists\"/>\n<h2>Lists</h2>\n<p>(In this example, leading and trailing spaces are shown with with dots: ⋅)</p>\n<pre><code class=\"language-no-highlight\">1. First ordered list item\n2. Another item\n⋅⋅* Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n⋅⋅1. Ordered sub-list\n4. And another item.\n\n⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅\n⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n</code></pre>\n<ol>\n<li>First ordered list item</li>\n<li>Another item</li>\n<li>Unordered sub-list.</li>\n<li>Actual numbers don't matter, just that it's a number</li>\n<li>Ordered sub-list</li>\n<li>\n<p>And another item.</p>\n<p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).</p>\n<p>To have a line break without a paragraph, you will need to use two trailing spaces.<br>\nNote that this line is separate, but within the same paragraph.<br>\n(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p>\n</li>\n<li>Unordered list can use asterisks</li>\n<li>Or minuses</li>\n<li>Or pluses</li>\n</ol>\n<a name=\"links\"/>\n<h2>Links</h2>\n<p>There are two ways to create links.</p>\n<pre><code class=\"language-no-highlight\">[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or &#x3C;http://www.example.com> and sometimes\nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n</code></pre>\n<p><a href=\"https://www.google.com\">I'm an inline-style link</a></p>\n<p><a href=\"https://www.google.com\" title=\"Google&#x27;s Homepage\">I'm an inline-style link with title</a></p>\n<p><a href=\"https://www.mozilla.org\">I'm a reference-style link</a></p>\n<p><a href=\"../blob/master/LICENSE\">I'm a relative reference to a repository file</a></p>\n<p><a href=\"http://slashdot.org\">You can use numbers for reference-style link definitions</a></p>\n<p>Or leave it empty and use the <a href=\"http://www.reddit.com\">link text itself</a>.</p>\n<p>URLs and URLs in angle brackets will automatically get turned into links.\n<a href=\"http://www.example.com\">http://www.example.com</a> or <a href=\"http://www.example.com\">http://www.example.com</a> and sometimes\nexample.com (but not on Github, for example).</p>\n<p>Some text to show that the reference links can follow later.</p>\n<a name=\"images\"/>\n<h2>Images</h2>\n<pre><code class=\"language-no-highlight\">Here's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\"\n</code></pre>\n<p>Here's our logo (hover to see the title text):</p>\n<p>Inline-style:\n<img src=\"https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png\" alt=\"alt text\" title=\"Logo Title Text 1\"></p>\n<p>Reference-style:\n<img src=\"https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png\" alt=\"alt text\" title=\"Logo Title Text 2\"></p>\n<a name=\"code\"/>\n<h2>Code and Syntax Highlighting</h2>\n<p>Code blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and <em>Markdown Here</em> -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. <em>Markdown Here</em> supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the <a href=\"http://softwaremaniacs.org/media/soft/highlight/test.html\">highlight.js demo page</a>.</p>\n<pre><code class=\"language-no-highlight\">Inline `code` has `back-ticks around` it.\n</code></pre>\n<p>Inline <code>code</code> has <code>back-ticks around</code> it.</p>\n<p>Blocks of code are either fenced by lines with three back-ticks <code>`<code></code></code>, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.</p>\n<pre lang=\"no-highlight\"><code>```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n```\n \n```python\ns = \"Python syntax highlighting\"\nprint s\n```\n \n```\nNo language indicated, so no syntax highlighting. \nBut let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n```\n</code></pre>\n<pre><code class=\"language-javascript\">var s = 'JavaScript syntax highlighting';\nalert(s);\n</code></pre>\n<pre><code class=\"language-python\">s = \"Python syntax highlighting\"\nprint s\n</code></pre>\n<pre><code>No language indicated, so no syntax highlighting in Markdown Here (varies on Github).\nBut let's throw in a &#x3C;b>tag&#x3C;/b>.\n</code></pre>\n<a name=\"tables\"/>\n<h2>Tables</h2>\n<p>Tables aren't part of the core Markdown spec, but they are part of GFM and <em>Markdown Here</em> supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application.</p>\n<pre><code class=\"language-no-highlight\">Colons can be used to align columns.\n\n| Tables        |      Are      |  Cool |\n| ------------- | :-----------: | ----: |\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      |   centered    |   $12 |\n| zebra stripes |   are neat    |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\n\n| Markdown | Less      | Pretty     |\n| -------- | --------- | ---------- |\n| *Still*  | `renders` | **nicely** |\n| 1        | 2         | 3          |\n</code></pre>\n<p>Colons can be used to align columns.</p>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th align=\"center\">Are</th>\n<th align=\"right\">Cool</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>col 3 is</td>\n<td align=\"center\">right-aligned</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td>col 2 is</td>\n<td align=\"center\">centered</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td>zebra stripes</td>\n<td align=\"center\">are neat</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody>\n</table>\n<p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.</p>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>Less</th>\n<th>Pretty</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>Still</em></td>\n<td><code>renders</code></td>\n<td><strong>nicely</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<a name=\"blockquotes\"/>\n<h2>Blockquotes</h2>\n<pre><code class=\"language-no-highlight\">> Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n</code></pre>\n<blockquote>\n<p>Blockquotes are very handy in email to emulate reply text.\nThis line is part of the same quote.</p>\n</blockquote>\n<p>Quote break.</p>\n<blockquote>\n<p>This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p>\n</blockquote>\n<a name=\"html\"/>\n<h2>Inline HTML</h2>\n<p>You can also use raw HTML in your Markdown, and it'll mostly work pretty well.</p>\n<pre><code class=\"language-no-highlight\">&#x3C;dl>\n  &#x3C;dt>Definition list&#x3C;/dt>\n  &#x3C;dd>Is something people use sometimes.&#x3C;/dd>\n\n  &#x3C;dt>Markdown in HTML&#x3C;/dt>\n  &#x3C;dd>Does *not* work **very** well. Use HTML &#x3C;em>tags&#x3C;/em>.&#x3C;/dd>\n&#x3C;/dl>\n</code></pre>\n<dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n<a name=\"hr\"/>\n<h2>Horizontal Rule</h2>\n<pre><code>Three or more...\n\n[![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png)](#-)\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n</code></pre>\n<p>Three or more...</p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p>Hyphens</p>\n<hr>\n<p>Asterisks</p>\n<hr>\n<p>Underscores</p>\n<a name=\"lines\"/>\n<h2>Line Breaks</h2>\n<p>My basic recommendation for learning how line breaks work is to experiment and discover -- hit &#x3C;Enter> once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \"Markdown Toggle\" is your friend.</p>\n<p>Here are some things to try out:</p>\n<pre><code>Here's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n</code></pre>\n<p>Here's a line for us to start with.</p>\n<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>\n<p>This line is also begins a separate paragraph, but...<br>\nThis line is only separated by a single newline, so it's a separate line in the <em>same paragraph</em>.</p>\n<p>(Technical note: <em>Markdown Here</em> uses GFM line breaks, so there's no need to use MD's two-space line breaks.)</p>\n<a name=\"videos\"/>\n<h2>YouTube Videos</h2>\n<p>They can't be added directly but you can add an image with a link to the video like this:</p>\n<pre><code class=\"language-no-highlight\">&#x3C;a href=\"http://www.youtube.com/watch?feature=player_embedded&#x26;v=YOUTUBE_VIDEO_ID_HERE\n\" target=\"_blank\">&#x3C;img src=\"http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\"\nalt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" />&#x3C;/a>\n</code></pre>\n<p>Or, in pure Markdown, but losing the image sizing and border:</p>\n<pre><code class=\"language-no-highlight\">[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\n</code></pre>\n<p><strong>This is a paragraph</strong>. Pellentesque habitant morbi <em>tristique senectus et netus et malesuada</em> fames ac turpis egestas. Vestibulum <a href=\"https://www.google.com\">tortor quam</a>, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit <mark>amet est et sapien ullamcorper</mark> pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi.</p>\n<h1>This is an H1</h1>\n<p>Quisque facilisis erat a dui. Nam malesuada ornare dolor. Cras gravida, this is marked text ornare, erat elit consectetuer erat, id egestas pede nibh eget odio. Proin tincidunt, velit vel porta elementum, magna diam molestie sapien, non aliquet massa pede eu diam. Aliquam iaculis. Fusce et ipsum et nulla tristique facilisis.</p>\n<h2>This is an H2</h2>\n<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Morbi commodo, ipsum sed pharetra gravida, orci magna rhoncus neque, id pulvinar odio lorem non turpis. Nullam sit amet enim. Suspendisse id velit vitae ligula volutpat condimentum. Aliquam erat volutpat. Sed quis velit. Nulla facilisi. Nulla libero.</p>\n<h3>This is an H3</h3>\n<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Morbi commodo, ipsum sed pharetra gravida, orci magna rhoncus neque, id pulvinar odio lorem non turpis. Nullam sit amet enim. Suspendisse id velit vitae ligula volutpat condimentum. Aliquam erat volutpat. Sed quis velit. Nulla facilisi. Nulla libero.</p>\n<h4>This is an H4</h4>\n<p>Quisque facilisis erat a dui. Nam malesuada ornare dolor. Cras gravida, diam sit amet rhoncus ornare, erat elit consectetuer erat, id egestas pede nibh eget odio. Proin tincidunt, velit vel porta elementum, magna diam molestie sapien, non aliquet massa pede eu diam. Aliquam iaculis.</p>\n<h2>Quoting</h2>\n<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</p>\n<blockquote>\n<p>Creativity is allowing yourself to make mistakes. Design is knowing which ones to keep. - Scott Adams</p>\n</blockquote>\n<p>Morbi commodo, ipsum sed pharetra gravida, orci magna rhoncus neque, id pulvinar odio lorem non turpis. Nullam sit amet enim. Suspendisse id velit vitae ligula volutpat condimentum. Aliquam erat volutpat. Sed quis velit. Nulla facilisi. Nulla libero.</p>\n<hr />\n<h2>Unordered Lists</h2>\n<ul>\n<li>Donec non tortor in arcu mollis feugiat</li>\n<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit</li>\n<li>Donec id eros eget quam aliquam gravida</li>\n<li>Vivamus convallis urna id felis</li>\n<li>Nulla porta tempus sapien</li>\n</ul>\n<h2>Ordered Lists</h2>\n<ol>\n<li>Donec non tortor in arcu mollis feugiat</li>\n<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit</li>\n<li>Donec id eros eget quam aliquam gravida</li>\n<li>Vivamus convallis urna id felis</li>\n<li>Nulla porta tempus sapien</li>\n</ol>\n<h2>Video Embeds</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8uuFIi-ghPI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2>Code Blocks</h2>\n<p>Blocks of code are either fenced by <code>lines with three back-ticks</code>, or are indented with four spaces.</p>\n<pre><code>&#x3C;!-- Some example CSS code -->\nbody {\n  color:red;\n}\n</code></pre>\n<pre><code class=\"language-javascript\">window.$docsify = {\n    coverpage: true,\n\n    // Custom file name\n    coverpage: 'cover.md',\n\n    // mutiple covers\n    coverpage: ['/', '/zh-cn/'],\n\n    // mutiple covers and custom file name\n    coverpage: {\n        '/': 'cover.md',\n        '/zh-cn/': 'cover.md'\n    }\n};\n</code></pre>\n<h2>Tables</h2>\n<div class=\"responsive-table\">\n  <table>\n      <caption>Table with thead, tfoot, and tbody</caption>\n    <thead>\n      <tr>\n        <th>Header content 1</th>\n        <th>Header content 2</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Body content 1</td>\n        <td>Body content 2</td>\n      </tr>\n    </tbody>\n    <tfoot>\n      <tr>\n        <td>Footer content 1</td>\n        <td>Footer content 2</td>\n      </tr>\n    </tfoot>\n  </table>\n</div>\n<div class=\"note\"><strong>Note:</strong> Both of the features you used above are parts of the Document Object Model (DOM) API, which allows you to manipulate documents.</div>\n<div class=\"important\"><strong>Important:</strong> In this article, try entering the example code lines into your JavaScript console to see what happens. For more details on JavaScript consoles, see Discover browser developer tools.</div>"
                },
                {
                    "url": "/docs/tools/vscode/",
                    "relativePath": "docs/tools/vscode.md",
                    "relativeDir": "docs/tools",
                    "base": "vscode.md",
                    "name": "vscode",
                    "frontmatter": {
                        "title": "vscode",
                        "weight": 2,
                        "seo": {
                            "title": "vscode",
                            "description": "This is the vscode page",
                            "extra": [
                                { "name": "og:type", "value": "website", "keyName": "property" },
                                { "name": "og:title", "value": "vscode", "keyName": "property" },
                                { "name": "og:description", "value": "This is the vscode page", "keyName": "property" },
                                { "name": "twitter:card", "value": "summary" },
                                { "name": "twitter:title", "value": "vscode" },
                                { "name": "twitter:description", "value": "This is the vscode page" }
                            ]
                        },
                        "template": "docs"
                    },
                    "html": "<h1>Everything You Need to Get Started With VSCode + Extensions &#x26; Resources</h1>\n<p>Commands:</p>\n<hr>\n<h3>Everything You Need to Get Started With VSCode + Extensions &#x26; Resources</h3>\n<h4>Every extension or tool you could possibly need</h4>\n<figure><img src=\"https://cdn-images-1.medium.com/max/1200/1*gcp0kkiWQY6qd1Y4qEcqxw.png\" class=\"graf-image\" /></figure>\n<h3>Here’s a rudimentary static site I made that goes into more detail on the extensions I use…</h3>\n<p><a href=\"https://5fff5b9a2430bb564bfd451d--stoic-mccarthy-2c335f.netlify.app/#h18\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://5fff5b9a2430bb564bfd451d--stoic-mccarthy-2c335f.netlify.app/#h18\"><strong>VSCodeExtensions</strong><br />\n5fff5b9a2430bb564bfd451d--stoic-mccarthy-2c335f.netlify.app</a><a href=\"https://5fff5b9a2430bb564bfd451d--stoic-mccarthy-2c335f.netlify.app/#h18\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<h3>Here’s the repo it was deployed from:</h3>\n<p><a href=\"https://github.com/bgoonz/vscode-Extension-readmes\" class=\"markup--anchor markup--p-anchor\">https://github.com/bgoonz/vscode-Extension-readmes</a></p>\n<hr>\n<h3>Commands:</h3>\n<blockquote>\n<p>Command Palette</p>\n</blockquote>\n<blockquote>\n<p>Access all available commands based on your current context.</p>\n</blockquote>\n<blockquote>\n<p>Keyboard Shortcut: <strong>Ctrl+Shift+P</strong></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*BByhnDoVQdRPdO4F.gif\" class=\"graf-image\" /></figure>### Command palette\n<p><code>⇧⌘P</code> Show all commands <code>⌘P</code> Show files</p>\n<h3>Sidebars</h3>\n<p><code>⌘B</code> Toggle sidebar <code>⇧⌘E</code> Explorer <code>⇧⌘F</code> Search <code>⇧⌘D</code> Debug <code>⇧⌘X</code> Extensions <code>⇧^G</code> Git (SCM)</p>\n<h3>Search</h3>\n<p><code>⌘F</code> Find <code>⌥⌘F</code> Replace <code>⇧⌘F</code> Find in files <code>⇧⌘H</code> Replace in files</p>\n<h3>Panel</h3>\n<p><code>⌘J</code> Toggle panel <code>⇧⌘M</code> Problems <code>⇧⌘U</code> Output <code>⇧⌘Y</code> Debug console<code></code> ^` <code></code>Terminal</p>\n<h3>View</h3>\n<p><code>⌘k</code> <code>z</code> Zen mode <code>⌘k</code> <code>u</code> Close unmodified <code>⌘k</code> <code>w</code> Close all</p>\n<h3>Debug</h3>\n<p><code>F5</code> Start <code>⇧F5</code> Stop <code>⇧⌘F5</code> Restart <code>^F5</code> Start without debugging <code>F9</code> Toggle breakpoint <code>F10</code> Step over <code>F11</code> Step into <code>⇧F11</code> Step out <code>⇧⌘D</code> Debug sidebar <code>⇧⌘Y</code> Debug panel</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/1200/0*llpkl5jsIMhWMucR.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Tips-N-Tricks:</h3>\n<p>Here is a selection of common features for editing code. If the keyboard shortcuts aren’t comfortable for you, consider installing a <a href=\"https://marketplace.visualstudio.com/search?target=VSCode&amp;category=Keymaps&amp;sortBy=Downloads\" class=\"markup--anchor markup--p-anchor\">keymap extension</a> for your old editor.</p>\n<p>Tip: You can see recommended keymap extensions in the Extensions view with Ctrl+K Ctrl+M which filters the search to <code>@recommended:keymaps</code> .</p>\n<h3>Multi cursor selection</h3>\n<p>To add cursors at arbitrary positions, select a position with your mouse and use Alt+Click (Option+click on macOS).</p>\n<p>To set cursors above or below the current position use:</p>\n<p>Keyboard Shortcut: Ctrl+Alt+Up or Ctrl+Alt+Down</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Le_oEOiYnEBmFfig.gif\" class=\"graf-image\" /></figure>You can add additional cursors to all occurrences of the current selection with Ctrl+Shift+L.\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*WcrfwIln6NIG3zNW.gif\" class=\"graf-image\" /></figure>*Note: You can also change the modifier to Ctrl/Cmd for applying multiple cursors with the* `editor.multiCursorModifier` <a href=\"https://code.visualstudio.com/docs/getstarted/settings\" class=\"markup--anchor markup--blockquote-anchor\"><em>setting</em></a>* . See* <a href=\"https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier\" class=\"markup--anchor markup--blockquote-anchor\"><em>Multi-cursor Modifier</em></a> *for details.*\n<p>If you do not want to add all occurrences of the current selection, you can use Ctrl+D instead. This only selects the next occurrence after the one you selected so you can add selections one by one.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*09EveaKtpZEKFEpO.gif\" class=\"graf-image\" /></figure>### Column (box) selection\n<p>You can select blocks of text by holding Shift+Alt (Shift+Option on macOS) while you drag your mouse. A separate cursor will be added to the end of each selected line.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*LrsOBXP4MVqr7aes.gif\" class=\"graf-image\" /></figure>You can also use <a href=\"https://code.visualstudio.com/docs/editor/codebasics#_column-box-selection\" class=\"markup--anchor markup--p-anchor\">keyboard shortcuts</a> to trigger column selection.\n<hr>\n<h3>Extensions:</h3>\n<h4><a href=\"https://marketplace.visualstudio.com/items?itemName=cweijan.vscode-autohotkey-plus\" class=\"markup--anchor markup--h4-anchor\">AutoHotkey Plus</a></h4>\n<blockquote>\n<p><em>Syntax Highlighting, Snippets, Go to Definition, Signature helper and Code formatter</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=rogalmic.bash-debug\" class=\"markup--anchor markup--h3-anchor\">Bash Debug</a></h3>\n<blockquote>\n<p><em>A debugger extension for Bash scripts based on</em> <code>bashdb</code></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*8j2gGGs0WHcuFIwY.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=Remisa.shellman\" class=\"markup--anchor markup--h3-anchor\">Shellman</a>\n<blockquote>\n<p><em>Bash script snippets extension</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*wyimtX27gWygAeOb.gif\" class=\"graf-image\" /></figure>### C++\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools\" class=\"markup--anchor markup--blockquote-anchor\">C/C++</a> — Preview C/C++ extension by <a href=\"https://www.microsoft.com/\" class=\"markup--anchor markup--blockquote-anchor\">Microsoft</a>, read <a href=\"https://blogs.msdn.microsoft.com/vcblog/2016/03/31/cc-extension-for-visual-studio-code/\" class=\"markup--anchor markup--blockquote-anchor\">official blog post</a> for the details</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd\" class=\"markup--anchor markup--blockquote-anchor\">Clangd</a> — Provides C/C++ language IDE features for VS Code using clangd: code completion, compile errors and warnings, go-to-definition and cross references, include management, code formatting, simple refactorings.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=austin.code-gnu-global\" class=\"markup--anchor markup--blockquote-anchor\">gnu-global-tags</a> — Provide Intellisense for C/C++ with the help of the GNU Global tool.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=RichardHe.you-complete-me\" class=\"markup--anchor markup--blockquote-anchor\">YouCompleteMe</a> — Provides semantic completions for C/C++ (and TypeScript, JavaScript, Objective-C, Golang, Rust) using <a href=\"http://ycm-core.github.io/YouCompleteMe/\" class=\"markup--anchor markup--blockquote-anchor\">YouCompleteMe</a>.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/mitaki28/vscode-clang\" class=\"markup--anchor markup--blockquote-anchor\">C/C++ Clang Command Adapter</a> — Completion and Diagnostic for C/C++/Objective-C using Clang command.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/cquery-project/vscode-cquery\" class=\"markup--anchor markup--blockquote-anchor\">CQuery</a> — <a href=\"https://github.com/jacobdufault/cquery\" class=\"markup--anchor markup--blockquote-anchor\">C/C++ language server</a> supporting multi-million line code base, powered by libclang. Cross references, completion, diagnostics, semantic highlighting and more.</p>\n</blockquote>\n<h4>More</h4>\n<ul>\n<li><span id=\"4dd9\"><a href=\"https://devblogs.microsoft.com/cppblog/vscode-cpp-may-2019-update/\" class=\"markup--anchor markup--li-anchor\">Microsoft’s tutorial on using VSCode for remote C/C++ development</a></span></li>\n</ul>\n<h3>C#, ASP . NET and . NET Core</h3>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp\" class=\"markup--anchor markup--blockquote-anchor\">C#</a> — C# extension by <a href=\"https://www.microsoft.com/\" class=\"markup--anchor markup--blockquote-anchor\">Microsoft</a>, read <a href=\"https://code.visualstudio.com/docs/languages/csharp\" class=\"markup--anchor markup--blockquote-anchor\">official documentation</a> for the details</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=Leopotam.csharpfixformat\" class=\"markup--anchor markup--blockquote-anchor\">C# FixFormat</a> — Fix format of usings / indents / braces / empty lines</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=jchannon.csharpextensions\" class=\"markup--anchor markup--blockquote-anchor\">C# Extensions</a> — Provides extensions to the IDE that will speed up your development workflow.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=tintoy.msbuild-project-tools\" class=\"markup--anchor markup--blockquote-anchor\">MSBuild Project Tools</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=fernandoescolar.vscode-solution-explorer\" class=\"markup--anchor markup--blockquote-anchor\">VSCode Solution Explorer</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.dotnet-test-explorer\" class=\"markup--anchor markup--blockquote-anchor\">. NET Core Test Explorer</a></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*ZG5W4_VVBv89zO_g.gif\" class=\"graf-image\" /></figure>\n<hr>\n<h3>CSS</h3>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek\" class=\"markup--anchor markup--h3-anchor\">CSS Peek</a></h3>\n<blockquote>\n<p><em>Peek or Jump to a CSS definition directly from HTML, just like in Brackets!</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*MN4pNqxDw4FyRk8g.gif\" class=\"graf-image\" /></figure>-   <span id=\"7261\"><a href=\"https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint\" class=\"markup--anchor markup--li-anchor\">stylelint</a> — Lint CSS/SCSS.</span>\n<ul>\n<li><span id=\"e8d5\"><a href=\"https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-autoprefixer\" class=\"markup--anchor markup--li-anchor\">Autoprefixer</a> Parse CSS, SCSS, LESS and add vendor prefixes automatically.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*edXaUlo7z9TRDQnC.gif\" class=\"graf-image\" /></figure>-   <span id=\"b1b1\"><a href=\"https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion\" class=\"markup--anchor markup--li-anchor\">Intellisense for CSS class names</a> — Provides CSS class name completion for the HTML class attribute based on the CSS files in your workspace. Also supports React’s className attribute.</span>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*AHJJrCMfkLWLHLH4.gif\" class=\"graf-image\" /></figure>### Groovy\n<ul>\n<li><span id=\"e453\"><a href=\"https://marketplace.visualstudio.com/items?itemName=NicolasVuillamy.vscode-groovy-lint\" class=\"markup--anchor markup--li-anchor\">VsCode Groovy Lint</a> — Groovy lint, format, prettify and auto-fix</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*jmi5_-erJj7WOMq7.gif\" class=\"graf-image\" /></figure>### Haskell\n<ul>\n<li><span id=\"66eb\"><a href=\"https://marketplace.visualstudio.com/items?itemName=hoovercj.haskell-linter\" class=\"markup--anchor markup--li-anchor\">haskell-linter</a></span></li>\n<li><span id=\"fd71\"><a href=\"https://marketplace.visualstudio.com/items?itemName=alanz.vscode-hie-server\" class=\"markup--anchor markup--li-anchor\">Haskell IDE engine</a> — provides <a href=\"https://github.com/haskell/haskell-ide-engine\" class=\"markup--anchor markup--li-anchor\">language server</a> for stack and cabal projects.</span></li>\n<li><span id=\"cbfe\"><a href=\"https://marketplace.visualstudio.com/items?itemName=truman.autocomplate-shell\" class=\"markup--anchor markup--li-anchor\">autocomplate-shell</a></span></li>\n</ul>\n<hr>\n<h3>Java</h3>\n<ul>\n<li><span id=\"cf71\"><a href=\"https://marketplace.visualstudio.com/items?itemName=redhat.java\" class=\"markup--anchor markup--li-anchor\">Language Support for Java(TM) by Red Hat</a></span></li>\n<li><span id=\"d93f\"><a href=\"https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug\" class=\"markup--anchor markup--li-anchor\">Debugger for Java</a></span></li>\n<li><span id=\"3c8c\"><a href=\"https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven\" class=\"markup--anchor markup--li-anchor\">Maven for Java</a></span></li>\n<li><span id=\"2d5c\"><a href=\"https://marketplace.visualstudio.com/items?itemName=GabrielBB.vscode-lombok\" class=\"markup--anchor markup--li-anchor\">Lombok</a></span></li>\n</ul>\n<hr>\n<h3>JavaScript</h3>\n<ul>\n<li><span id=\"8516\"><a href=\"https://marketplace.visualstudio.com/items?itemName=mgmcdermott.vscode-language-babel\" class=\"markup--anchor markup--li-anchor\">Babel JavaScript</a></span></li>\n<li><span id=\"aa22\"><a href=\"https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode\" class=\"markup--anchor markup--li-anchor\">Visual Studio IntelliCode</a> — This extension provides AI-assisted development features including autocomplete and other insights based on understanding your code context.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*i7CZbSbHqsWqEM4w.gif\" class=\"graf-image\" /></figure>See the difference between these two <a href=\"https://github.com/michaelgmcd/vscode-language-babel/issues/1\" class=\"markup--anchor markup--p-anchor\">here</a>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-tslint-plugin\" class=\"markup--anchor markup--blockquote-anchor\">tslint</a> — TSLint for Visual Studio Code (with <code>\"tslint.jsEnable\": true</code> ).</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" class=\"markup--anchor markup--blockquote-anchor\">eslint</a> — Linter for <a href=\"https://eslint.org/\" class=\"markup--anchor markup--blockquote-anchor\">eslint</a>.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=samverschueren.linter-xo\" class=\"markup--anchor markup--blockquote-anchor\">XO</a> — Linter for <a href=\"https://github.com/xojs/xo\" class=\"markup--anchor markup--blockquote-anchor\">XO</a>.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=samverschueren.ava\" class=\"markup--anchor markup--blockquote-anchor\">AVA</a> — Snippets for <a href=\"https://github.com/avajs/ava\" class=\"markup--anchor markup--blockquote-anchor\">AVA</a>.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" class=\"markup--anchor markup--blockquote-anchor\">Prettier</a> — Linter, Formatter and Pretty printer for <a href=\"https://github.com/prettier/prettier-vscode\" class=\"markup--anchor markup--blockquote-anchor\">Prettier</a>.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=austinleegordon.vscode-schema-dot-org\" class=\"markup--anchor markup--blockquote-anchor\">Schema.org Snippets</a> — Snippets for <a href=\"https://schema.org/\" class=\"markup--anchor markup--blockquote-anchor\">Schema.org</a>.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker\" class=\"markup--anchor markup--blockquote-anchor\">Code Spell Checker</a> — Spelling Checker for Visual Studio Code.</p>\n</blockquote>\n<p>Framework-specific:</p>\n<h4><a href=\"https://marketplace.visualstudio.com/items?itemName=octref.vetur\" class=\"markup--anchor markup--h4-anchor\">Vetur</a> — Toolkit for Vue.js</h4>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*F7J_vW0ISbVMTXIZ.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome\" class=\"markup--anchor markup--h3-anchor\">Debugger for Chrome</a></h3>\n<blockquote>\n<p><em>A VS Code extension to debug your JavaScript code in the Chrome browser, or other targets that support the Chrome Debugging Protocol.</em></p>\n</blockquote>\n<h3>Facebook Flow</h3>\n<ul>\n<li><span id=\"155f\"><a href=\"https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode\" class=\"markup--anchor markup--li-anchor\">Flow Language Support</a> — provides all the functionality you would expect — linting, intellisense, type tooltips and click-to-definition</span></li>\n<li><span id=\"ac2f\"><a href=\"https://marketplace.visualstudio.com/items?itemName=gcazaciuc.vscode-flow-ide\" class=\"markup--anchor markup--li-anchor\">vscode-flow-ide</a> — an alternative Flowtype extension for Visual Studio Code</span></li>\n</ul>\n<h3>TypeScript</h3>\n<ul>\n<li><span id=\"8883\"><a href=\"https://marketplace.visualstudio.com/items?itemName=eg2.tslint\" class=\"markup--anchor markup--li-anchor\">tslint</a> — TSLint for Visual Studio Code</span></li>\n<li><span id=\"9665\"><a href=\"https://marketplace.visualstudio.com/items?itemName=rbbit.typescript-hero\" class=\"markup--anchor markup--li-anchor\">TypeScript Hero</a> — Code outline view of your open TS, sort and organize your imports.</span></li>\n</ul>\n<hr>\n<h3>Markdown</h3>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint\" class=\"markup--anchor markup--h3-anchor\">markdownlint</a></h3>\n<blockquote>\n<p><em>Linter for</em> <a href=\"https://github.com/DavidAnson/markdownlint\" class=\"markup--anchor markup--blockquote-anchor\"><em>markdownlint</em></a><em>.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one\" class=\"markup--anchor markup--h3-anchor\">Markdown All in One</a></h3>\n<blockquote>\n<p><em>All-in-one markdown plugin (keyboard shortcuts, table of contents, auto preview, list editing and more)</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*8oVrYuZ9kLRNSuBs.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=bierner.markdown-emoji\" class=\"markup--anchor markup--h3-anchor\">Markdown Emoji</a>\n<blockquote>\n<p><em>Adds emoji syntax support to VS Code’s built-in Markdown preview</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*rckUMIIZ9Jh7UE5q.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>PHP</h3>\n<h3>IntelliSense</h3>\n<p>These extensions provide slightly different sets of features. While the first one offers better autocompletion support, the second one seems to have more features overall.</p>\n<ul>\n<li><span id=\"94df\"><a href=\"https://marketplace.visualstudio.com/items?itemName=bmewburn.vscode-intelephense-client\" class=\"markup--anchor markup--li-anchor\">PHP Intelephense</a></span></li>\n<li><span id=\"b2b4\"><a href=\"https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-intellisense\" class=\"markup--anchor markup--li-anchor\">PHP IntelliSense</a></span></li>\n</ul>\n<h3>Laravel</h3>\n<ul>\n<li><span id=\"687e\"><a href=\"https://marketplace.visualstudio.com/items?itemName=onecentlin.laravel5-snippets\" class=\"markup--anchor markup--li-anchor\">Laravel 5 Snippets</a> — Laravel 5 snippets for Visual Studio Code</span></li>\n<li><span id=\"42ab\"><a href=\"https://marketplace.visualstudio.com/items?itemName=onecentlin.laravel-blade\" class=\"markup--anchor markup--li-anchor\">Laravel Blade Snippets</a> — Laravel blade snippets and syntax highlight support</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*f4hMFe1l7NpJTG8v.gif\" class=\"graf-image\" /></figure>-   <span id=\"bf66\"><a href=\"https://marketplace.visualstudio.com/items?itemName=ahinkle.laravel-model-snippets\" class=\"markup--anchor markup--li-anchor\">Laravel Model Snippets</a> — Quickly get models up and running with Laravel Model Snippets.</span>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*1xydH2CgYGDSMZtB.gif\" class=\"graf-image\" /></figure>-   <span id=\"fa58\"><a href=\"https://marketplace.visualstudio.com/items?itemName=ryannaddy.laravel-artisan\" class=\"markup--anchor markup--li-anchor\">Laravel Artisan</a> — Laravel Artisan commands within Visual Studio Code</span>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*rzK952c4UgikNNPR.gif\" class=\"graf-image\" /></figure>-   <span id=\"1e4d\"><a href=\"https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv\" class=\"markup--anchor markup--li-anchor\">DotENV</a> — Support for dotenv file syntax</span>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*fSAaqpXfBx1Sgztf.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Other extensions</h3>\n<ul>\n<li><span id=\"8443\"><a href=\"https://marketplace.visualstudio.com/items?itemName=rifi2k.format-html-in-php\" class=\"markup--anchor markup--li-anchor\">Format HTML in PHP</a> — Formatting for the HTML in PHP files. Runs before the save action so you can still have a PHP formatter.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*6gF0K20iKes7I9ZF.gif\" class=\"graf-image\" /></figure>-   <span id=\"f3f0\"><a href=\"https://marketplace.visualstudio.com/items?itemName=ikappas.composer\" class=\"markup--anchor markup--li-anchor\">Composer</a></span>\n<ul>\n<li><span id=\"e5ba\"><a href=\"https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug\" class=\"markup--anchor markup--li-anchor\">PHP Debug</a> — XDebug extension for Visual Studio Code</span></li>\n<li><span id=\"6a3c\"><a href=\"https://marketplace.visualstudio.com/items?itemName=neilbrayfield.php-docblocker\" class=\"markup--anchor markup--li-anchor\">PHP DocBlocker</a></span></li>\n<li><span id=\"a4ca\"><a href=\"https://marketplace.visualstudio.com/items?itemName=junstyle.php-cs-fixer\" class=\"markup--anchor markup--li-anchor\">php cs fixer</a> — PHP CS Fixer extension for VS Code, php formatter, php code beautify tool</span></li>\n<li><span id=\"30f1\"><a href=\"https://marketplace.visualstudio.com/items?itemName=ikappas.phpcs\" class=\"markup--anchor markup--li-anchor\">phpcs</a> — PHP CodeSniffer for Visual Studio Code</span></li>\n<li><span id=\"d82e\"><a href=\"https://marketplace.visualstudio.com/items?itemName=kokororin.vscode-phpfmt\" class=\"markup--anchor markup--li-anchor\">phpfmt</a> — phpfmt for Visual Studio Code</span></li>\n</ul>\n<hr>\n<h3>Python</h3>\n<ul>\n<li><span id=\"0136\"><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-python.python\" class=\"markup--anchor markup--li-anchor\">Python</a> — Linting, Debugging (multi threaded, web apps), Intellisense, auto-completion, code formatting, snippets, unit testing, and more.</span></li>\n</ul>\n<h3>TensorFlow</h3>\n<ul>\n<li><span id=\"402b\"><a href=\"https://marketplace.visualstudio.com/items?itemName=vahidk.tensorflow-snippets\" class=\"markup--anchor markup--li-anchor\">TensorFlow Snippets</a> — This extension includes a set of useful code snippets for developing TensorFlow models in Visual Studio Code.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*stmhgQ3sGvJBTvf2.gif\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Rust</h3>\n<ul>\n<li><span id=\"cec4\"><a href=\"https://marketplace.visualstudio.com/items?itemName=rust-lang.rust\" class=\"markup--anchor markup--li-anchor\">Rust</a> — Linting, auto-completion, code formatting, snippets and more</span></li>\n</ul>\n<hr>\n<h3>Productivity</h3>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=bencoleman.armview\" class=\"markup--anchor markup--h3-anchor\">ARM Template Viewer</a></h3>\n<blockquote>\n<p><em>Displays a graphical preview of Azure Resource Manager (ARM) templates. The view will show all resources with the official Azure icons and also linkage between the resources.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*p8bvCI9DXF44m4z3.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-cosmosdb\" class=\"markup--anchor markup--h3-anchor\">Azure Cosmos DB</a>\n<blockquote>\n<p><em>Browse your database inside the vs code editor</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*VWvSU6Hbf20Kfc_P.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.azure-iot-toolkit\" class=\"markup--anchor markup--h3-anchor\">Azure IoT Toolkit</a>\n<blockquote>\n<p><em>Everything you need for the Azure IoT development: Interact with Azure IoT Hub, manage devices connected to Azure IoT Hub, and develop with code snippets for Azure IoT Hub</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*AobtCd80fICrbQPI.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks\" class=\"markup--anchor markup--h3-anchor\">Bookmarks</a>\n<blockquote>\n<p><em>Mark lines and jump to them</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=orepor.color-tabs-vscode-ext\" class=\"markup--anchor markup--h3-anchor\">Color Tabs</a></h3>\n<blockquote>\n<p><em>An extension for big projects or monorepos that colors your tab/titlebar based on the current package</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*SEp-hgfDLlubNRyc.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=hardikmodha.create-tests\" class=\"markup--anchor markup--h3-anchor\">Create tests</a>\n<blockquote>\n<p><em>An extension to quickly generate test files.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*DLZLYmrBiui0YOBt.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=mkloubert.vs-deploy\" class=\"markup--anchor markup--h3-anchor\">Deploy</a>\n<blockquote>\n<p><em>Commands for upload or copy files of a workspace to a destination.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*lLasjzlmWnBwdbAT.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-duplicate\" class=\"markup--anchor markup--h3-anchor\">Duplicate Action</a>\n<blockquote>\n<p><em>Ability to duplicate files and directories.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens\" class=\"markup--anchor markup--h3-anchor\">Error Lens</a></h3>\n<blockquote>\n<p><em>Show language diagnostics inline (errors/warnings/…).</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*1tJJkV0p2Ka_W06r.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets\" class=\"markup--anchor markup--h3-anchor\">ES7 React/Redux/GraphQL/React-Native snippets</a>\n<blockquote>\n<p><em>Provides Javascript and React/Redux snippets in ES7</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*W3N0kbgEumWYa-m4.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=rubbersheep.gi\" class=\"markup--anchor markup--h3-anchor\">Gi</a>\n<blockquote>\n<p><em>Generating .gitignore files made easy</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*sfddghz8B1D362UB.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=vsls-contrib.gistfs\" class=\"markup--anchor markup--h3-anchor\">GistPad</a>\n<blockquote>\n<p><em>Allows you to manage GitHub Gists entirely within the editor. You can open, create, delete, fork, star and clone gists, and then seamlessly begin editing files as if they were local. It’s like your very own developer library for building and referencing code snippets, commonly used config/scripts, programming-related notes/documentation, and interactive samples.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*1MiBQ0u4Z8TPNaG9.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory\" class=\"markup--anchor markup--h3-anchor\">Git History</a>\n<blockquote>\n<p><em>View git log, file or line History</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=felipecaputo.git-project-manager\" class=\"markup--anchor markup--h3-anchor\">Git Project Manager</a></h3>\n<blockquote>\n<p><em>Automatically indexes your git projects and lets you easily toggle between them</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=qezhu.gitlink\" class=\"markup--anchor markup--h3-anchor\">GitLink</a></h3>\n<blockquote>\n<p><em>GoTo current file’s online link in browser and Copy the link in clipboard.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Acgfn2rmhinuIPjk.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\" class=\"markup--anchor markup--h3-anchor\">GitLens</a>\n<blockquote>\n<p><em>Provides Git CodeLens information (most recent commit, # of authors), on-demand inline blame annotations, status bar blame information, file and blame history explorers, and commands to compare changes with the working tree or previous versions.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*MZu4GV7SOCW88UQQ.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=lamartire.git-indicators\" class=\"markup--anchor markup--h3-anchor\">Git Indicators</a>\n<blockquote>\n<p><em>Atom-like git indicators on active panel</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*vitZrD9ZU0_eWckU.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*0BHxQOLMx09FFuWZ.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*x8F97F4AdSvvtehT.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=KnisterPeter.vscode-github\" class=\"markup--anchor markup--h3-anchor\">GitHub</a>\n<blockquote>\n<p><em>Provides GitHub workflow support. For example browse project, issues, file (the current line), create and manage pull request. Support for other providers (e.g. gitlab or bitbucket) is planned. Have a look at the</em> <a href=\"https://github.com/KnisterPeter/vscode-github/blob/master/README.md\" class=\"markup--anchor markup--blockquote-anchor\"><em>README.md</em></a> <em>on how to get started with the setup for this extension.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=erichbehrens.pull-request-monitor\" class=\"markup--anchor markup--h3-anchor\">GitHub Pull Request Monitor</a></h3>\n<blockquote>\n<p><em>This extension uses the GitHub api to monitor the state of your pull requests and let you know when it’s time to merge or if someone requested changes.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*TOq5OERkgQNETGPK.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=gitlab.gitlab-workflow\" class=\"markup--anchor markup--h3-anchor\">GitLab Workflow</a>\n<blockquote>\n<p><em>Adds a GitLab sidebar icon to view issues, merge requests and other GitLab resources. You can also view the results of your GitLab CI/CD pipeline and check the syntax of your _<code>.gitlab-ci.yml</code></em>._</p>\n</blockquote>\n<h4><a href=\"https://marketplace.visualstudio.com/items?itemName=richardwillis.vscode-gradle\" class=\"markup--anchor markup--h4-anchor\">Gradle Tasks</a></h4>\n<blockquote>\n<p><em>Run gradle tasks in VS Code.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Vx-3DIT22BJpEnJr.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=idleberg.icon-fonts\" class=\"markup--anchor markup--h3-anchor\">Icon Fonts</a>\n<blockquote>\n<p><em>Snippets for popular icon fonts such as Font Awesome, Ionicons, Glyphicons, Octicons, Material Design Icons and many more!</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost\" class=\"markup--anchor markup--h3-anchor\">Import Cost</a></h3>\n<blockquote>\n<p><em>This extension will display inline in the editor the size of the imported package. The extension utilizes webpack with babili-webpack-plugin in order to detect the imported size.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=Atlassian.atlascode\" class=\"markup--anchor markup--h3-anchor\">Jira and Bitbucket</a></h3>\n<blockquote>\n<p><em>Bringing the power of Jira and Bitbucket to VS Code — With Atlassian for VS Code you can create and view issues, start work on issues, create pull requests, do code reviews, start builds, get build statuses and more!</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*T6iuH2VnPYj93YqW.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=lannonbr.vscode-js-annotations\" class=\"markup--anchor markup--h3-anchor\">JS Parameter Annotations</a>\n<blockquote>\n<p><em>Provides annotations on function calls in JS/TS files to provide parameter names to arguments.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*zHffPsYWln4dxhus.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=wmaurer.vscode-jumpy\" class=\"markup--anchor markup--h3-anchor\">Jumpy</a>\n<blockquote>\n<p><em>Provides fast cursor movement, inspired by Atom’s package of the same name.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*uPOceUJ4eMjCP_Qt.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=mkloubert.vscode-kanban\" class=\"markup--anchor markup--h3-anchor\">Kanban</a>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*SzUG3UU1fl5ub7bA.gif\" class=\"graf-image\" /></figure>*Simple Kanban board for use in Visual Studio Code, with time tracking and Markdown support.*\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\" class=\"markup--anchor markup--h3-anchor\">Live Server</a></h3>\n<blockquote>\n<p><em>Launch a development local Server with live reload feature for static &#x26; dynamic pages.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Oj5zPrWwMbCBViBi.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=slevesque.vscode-multiclip\" class=\"markup--anchor markup--h3-anchor\">Multiple clipboards</a>\n<blockquote>\n<p><em>Override the regular Copy and Cut commands to keep selections in a clipboard ring</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=philnash.ngrok-for-vscode\" class=\"markup--anchor markup--h3-anchor\">ngrok for VSCode</a></h3>\n<blockquote>\n<p><em>ngrok allows you to expose a web server running on your local machine to the internet. Just tell ngrok what port your web server is listening on. This extension allows you to control</em> <a href=\"https://ngrok.com/\" class=\"markup--anchor markup--blockquote-anchor\"><em>ngrok</em></a> <em>from the VSCode command palette</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*IX15MuJrEVBcTd0F.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=dbankier.vscode-instant-markdown\" class=\"markup--anchor markup--h3-anchor\">Instant Markdown</a>\n<blockquote>\n<p><em>Simply, edit markdown documents in vscode and instantly preview it in your browser as you type.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*jBw9vP9cAtvv2IcV.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense\" class=\"markup--anchor markup--h3-anchor\">npm Intellisense</a>\n<blockquote>\n<p><em>Visual Studio Code plugin that autocompletes npm modules in import statements.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*iVJamJugt_b7-VsV.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=DominicVonk.parameter-hints\" class=\"markup--anchor markup--h3-anchor\">Parameter Hints</a>\n<blockquote>\n<p><em>Provides parameter hints on function calls in JS/TS/PHP files.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*BSj8-Qt7xtVTsl1Z.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=ryu1kn.partial-diff\" class=\"markup--anchor markup--h3-anchor\">Partial Diff</a>\n<blockquote>\n<p><em>Compare (diff) text selections within a file, across different files, or to the clipboard</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*KHki85jdv1hZeY3V.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=quicktype.quicktype\" class=\"markup--anchor markup--h3-anchor\">Paste JSON as Code</a>\n<blockquote>\n<p><em>Infer the structure of JSON and paste is as types in many programming languages</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*K2GCRMGsYjpsK8OX.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense\" class=\"markup--anchor markup--h3-anchor\">Path IntelliSense</a>\n<blockquote>\n<p><em>Visual Studio Code plugin that autocompletes filenames</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*xwxU_1ffZvZ6DeoO.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=ego-digital.vscode-powertools\" class=\"markup--anchor markup--h3-anchor\">Power Tools</a>\n<blockquote>\n<p><em>Extends Visual Studio Code via things like Node.js based scripts or shell commands, without writing separate extensions</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Cb7J6-PYsXsnjqSN.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=nobuhito.printcode\" class=\"markup--anchor markup--h3-anchor\">PrintCode</a>\n<blockquote>\n<p><em>PrintCode converts the code being edited into an HTML file, displays it by browser and prints it.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*2spvNSEEHM-ETd_F.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager\" class=\"markup--anchor markup--h3-anchor\">Project Manager</a>\n<blockquote>\n<p><em>Easily switch between projects.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=kruemelkatze.vscode-dashboard\" class=\"markup--anchor markup--h3-anchor\">Project Dashboard</a></h3>\n<blockquote>\n<p><em>VSCode Project Dashboard is a Visual Studio Code extension that lets you organize your projects in a speed-dial like manner. Pin your frequently visited folders, files, and SSH remotes onto a dashboard to access them quickly.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*PxOoARROhi1rf63R.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=mechatroner.rainbow-csv\" class=\"markup--anchor markup--h3-anchor\">Rainbow CSV</a>\n<blockquote>\n<p><em>Highlight columns in comma, tab, semicolon and pipe separated files, consistency check and linting with CSVLint, multi-cursor column editing, column trimming and realignment, and SQL-style querying with RBQL.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*XAb9jlOfGWlEaCEM.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack\" class=\"markup--anchor markup--h3-anchor\">Remote Development</a>\n<blockquote>\n<p><em>Allows users to open any folder in a container, on a remote machine, container or in Windows Subsystem for Linux(WSL) and take advantage of VS Code’s full feature set.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*b6XEPh9PJzeWDB_z.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=rafaelmaiolla.remote-vscode\" class=\"markup--anchor markup--h3-anchor\">Remote VSCode</a>\n<blockquote>\n<p><em>Allow user to edit files from Remote server in Visual Studio Code directly.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\" class=\"markup--anchor markup--h3-anchor\">REST Client</a></h3>\n<blockquote>\n<p><em>Allows you to send HTTP request and view the response in Visual Studio Code directly.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*zGne78bniDbTXzyf.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\" class=\"markup--anchor markup--h3-anchor\">Settings Sync</a>\n<blockquote>\n<p><em>Synchronize settings, snippets, themes, file icons, launch, key bindings, workspaces and extensions across multiple machines using GitHub Gist</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*ilH91MRgGnMF6C8c.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=qcz.text-power-tools\" class=\"markup--anchor markup--h3-anchor\">Text Power Tools</a>\n<blockquote>\n<p><em>All-in-one extension for text manipulation: filtering (grep), remove lines, insert number sequences and GUIDs, format content as table, change case, converting numbers and more. Great for finding information in logs and manipulating text.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Pfp4noD5OeQRbmsZ.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree\" class=\"markup--anchor markup--h3-anchor\">Todo Tree</a>\n<blockquote>\n<p><em>Custom keywords, highlighting, and colors for TODO comments. As well as a sidebar to view all your current tags.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*6utz502-rPCa0Xcg.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=BriteSnow.vscode-toggle-quotes\" class=\"markup--anchor markup--h3-anchor\">Toggle Quotes</a>\n<blockquote>\n<p><em>Cycle between single, double and backtick quotes</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*7kZFpggvGAVkvoYa\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=tusaeff.vscode-typescript-destructure-plugin\" class=\"markup--anchor markup--h3-anchor\">Typescript Destructure</a>\n<blockquote>\n<p><em>TypeScript Language Service Plugin providing a set of source actions for easy objects destructuring</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*sEi0imXK2Yx69m7H.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime\" class=\"markup--anchor markup--h3-anchor\">WakaTime</a>\n<blockquote>\n<p><em>Automatic time tracker and productivity dashboard showing how long you coded in each project, file, branch, and language.</em></p>\n</blockquote>\n<hr>\n<h3>Formatting &#x26; Beautification</h3>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=wwm.better-align\" class=\"markup--anchor markup--h3-anchor\">Better Align</a></h3>\n<blockquote>\n<p><em>Align your code by colon(:), assignment(=, +=, -=, *=, /=) and arrow(=> ). It has additional support for comma-first coding style and trailing comment.</em></p>\n</blockquote>\n<blockquote>\n<p><em>And it doesn’t require you to select what to be aligned, the extension will figure it out by itself.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*5maDjvvH57MAks1l.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag\" class=\"markup--anchor markup--h3-anchor\">Auto Close Tag</a>\n<blockquote>\n<p><em>Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*h6Q6HLQ8jfHLnPlJ.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag\" class=\"markup--anchor markup--h3-anchor\">Auto Rename Tag</a>\n<blockquote>\n<p><em>Auto rename paired HTML/XML tags</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*uRKX2-umhSQzlESv.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify\" class=\"markup--anchor markup--h3-anchor\">beautify</a>\n<blockquote>\n<p><em>Beautify code in place for VS Code</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=dbalas.vscode-html2pug\" class=\"markup--anchor markup--h3-anchor\">html2pug</a></h3>\n<blockquote>\n<p><em>Transform html to pug inside your Visual Studio Code, forget about using an external page anymore.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=vilicvane.es-quotes\" class=\"markup--anchor markup--h3-anchor\">ECMAScript Quotes Transformer</a></h3>\n<blockquote>\n<p><em>Transform quotes of ECMAScript string literals</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*W1Z1fIvOGgPclFMJ.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=Rubymaniac.vscode-paste-and-indent\" class=\"markup--anchor markup--h3-anchor\">Paste and Indent</a>\n<blockquote>\n<p><em>Paste code with “correct” indentation</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=Tyriar.sort-lines\" class=\"markup--anchor markup--h3-anchor\">Sort Lines</a></h3>\n<blockquote>\n<p><em>Sorts lines of text in specific order</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*a4wPhA7VjJqkp3lu.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=yatki.vscode-surround\" class=\"markup--anchor markup--h3-anchor\">Surround</a>\n<blockquote>\n<p><em>A simple yet powerful extension to add wrapper templates around your code blocks.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*lyjRgfSrvdmhGFXd.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=konstantin.wrapSelection\" class=\"markup--anchor markup--h3-anchor\">Wrap Selection</a>\n<blockquote>\n<p><em>Wraps selection or multiple selections with symbol or multiple symbols</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=tombonnike.vscode-status-bar-format-toggle\" class=\"markup--anchor markup--h3-anchor\">Formatting Toggle</a></h3>\n<blockquote>\n<p><em>Allows you to toggle your formatter on and off with a simple click</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer\" class=\"markup--anchor markup--h3-anchor\">Bracket Pair Colorizer</a></h3>\n<blockquote>\n<p><em>This extension allows matching brackets to be identified with colours. The user can define which characters to match, and which colours to use.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*m3nU-5UxgUxX4-eJ.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=steoates.autoimport\" class=\"markup--anchor markup--h3-anchor\">Auto Import</a>\n<blockquote>\n<p><em>Automatically finds, parses and provides code actions and code completion for all available imports. Works with Typescript and TSX.</em></p>\n</blockquote>\n<h3><a href=\"https://github.com/foxundermoon/vs-shell-format\" class=\"markup--anchor markup--h3-anchor\">shell-format</a></h3>\n<blockquote>\n<p><em>shell script &#x26; Dockerfile &#x26; dotenv format</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*TThlkfK1KgQm5AKU.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=funkyremi.vscode-google-translate\" class=\"markup--anchor markup--h3-anchor\">Vscode Google Translate</a>\n<blockquote>\n<p><em>Quickly translate selected text right in your code</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*JF8NuxAFDxXiTn_u.gif\" class=\"graf-image\" /></figure>### Explorer Icons\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\" class=\"markup--anchor markup--h3-anchor\">Material Icon Theme</a></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*67ZZ9mhoISPk_lM4.png\" class=\"graf-image\" /></figure>### Uncategorized\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=auchenberg.vscode-browser-preview\" class=\"markup--anchor markup--h3-anchor\">Browser Preview</a></h3>\n<blockquote>\n<p><em>Browser Preview for VS Code enables you to open a real browser preview inside your editor that you can debug. Browser Preview is powered by Chrome Headless, and works by starting a headless Chrome instance in a new process. This enables a secure way to render web content inside VS Code, and enables interesting features such as in-editor debugging and more!</em></p>\n</blockquote>\n<blockquote>\n<p><strong><em>FYI:… I HAVE TRIED ENDLESSLEY TO GET THE DEBUGGER TO WORK IN VSCODE BUT IT DOES NOT… I SUSPECT THAT’S WHY IT HAS A 3 STAR RATING FOR AN OTHERWISE PHENOMINAL EXTENSION.</em></strong></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Oilwsi7EKGpCZb46.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=CodeRoad.coderoad\" class=\"markup--anchor markup--h3-anchor\">CodeRoad</a>\n<blockquote>\n<p><em>Play interactive tutorials in your favorite editor.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*iV8P93QMmWdYfnrQ.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner\" class=\"markup--anchor markup--h3-anchor\">Code Runner</a>\n<blockquote>\n<p><em>Run code snippet or code file for multiple languages: C, C++, Java, JavaScript, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, BAT/CMD, BASH/SH, F# Script, C# Script, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml Script</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*hMsM_IEyBklQXchd.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=softwaredotcom.swdc-vscode\" class=\"markup--anchor markup--h3-anchor\">Code Time</a>\n<blockquote>\n<p><em>Automatic time reports by project and other programming metrics right in VS Code.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Uo1BYexJenprpgLa\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight\" class=\"markup--anchor markup--h3-anchor\">Color Highlight</a>\n<blockquote>\n<p><em>Highlight web colors in your editor</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*ZwE7OHKR5opvDCJJOw9KeQ.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=IBM.output-colorizer\" class=\"markup--anchor markup--h3-anchor\">Output Colorizer</a>\n<blockquote>\n<p><em>Syntax highlighting for the VS Code Output Panel and log files</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*9DpzVZ9cUNp2TMyD.jpg\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=deerawan.vscode-dash\" class=\"markup--anchor markup--h3-anchor\">Dash</a>\n<blockquote>\n<p><em>Dash integration in Visual Studio Code</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*sqGllC-pgXNaEBfB-cxG9Q.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=ryu1kn.edit-with-shell\" class=\"markup--anchor markup--h3-anchor\">Edit with Shell Command</a>\n<blockquote>\n<p><em>Leverage your favourite shell commands to edit text</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*2wW31HJ1nUCjORZe.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig\" class=\"markup--anchor markup--h3-anchor\">Editor Config for VS Code</a>\n<blockquote>\n<p><em>Editor Config for VS Code</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=lukasz-wronski.ftp-sync\" class=\"markup--anchor markup--h3-anchor\">ftp-sync</a></h3>\n<blockquote>\n<p><em>Auto-sync your work to remote FTP server</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*-viKhwxpeYQdWHRE.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag\" class=\"markup--anchor markup--h3-anchor\">Highlight JSX/HTML tags</a>\n<blockquote>\n<p><em>Highlights matching tags in the file.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow\" class=\"markup--anchor markup--h3-anchor\">Indent Rainbow</a></h3>\n<blockquote>\n<p><em>A simple extension to make indentation more readable.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*GK_yEd-50SU3yc_y.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=ftonato.password-generator\" class=\"markup--anchor markup--h3-anchor\">Password Generator</a>\n<blockquote>\n<p><em>Create a secure password using our generator tool. Help prevent a security threat by getting a strong password today.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*qPJAZk9-NcYgsx7H.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.platformio\" class=\"markup--anchor markup--h3-anchor\">PlatformIO</a>\n<blockquote>\n<p><em>An open source ecosystem for IoT development: supports 350+ embedded boards, 20+ development platforms, 10+ frameworks. Arduino and ARM mbed compatible.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*RywVt_vikqB-5urO.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=pnp.polacode\" class=\"markup--anchor markup--h3-anchor\">Polacode</a>\n<blockquote>\n<p><em>Polaroid for your code 📸.</em></p>\n</blockquote>\n<blockquote>\n<p><strong><em>Note: Polacode no longer works as of the most recent update… go for Polacode2020 or CodeSnap…</em></strong></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Io4fPojDRrDf5CmW.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode\" class=\"markup--anchor markup--h3-anchor\">Quokka</a>\n<h4>This one is super cool!</h4>\n<blockquote>\n<p><em>Rapid prototyping playground for JavaScript and TypeScript in VS Code, with access to your project’s files, inline reporting, code coverage and rich output formatting.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Q9kp8EWZHTD0Hfru.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=sozercan.slack\" class=\"markup--anchor markup--h3-anchor\">Slack</a>\n<blockquote>\n<p><em>Send messages and code snippets, upload files to Slack</em></p>\n</blockquote>\n<p>Personally I found this extension to slow down my editor in addition to confliction with other extensions: (I have over 200 as of this writing)….. <strong>yes I have been made fully aware that I have a problem and need to get help</strong></p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*9-xxjXzdPCh_46kZ.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=shyykoserhiy.vscode-spotify\" class=\"markup--anchor markup--h3-anchor\">Spotify</a>\n<p><em>No real advantage over just using Spotify normally… it’s problematic enough in implementation that you won’t save any time using it. Further, it’s a bit tricky to configure … or at least it was the last time I tried syncing it with my spotify account.</em></p>\n<blockquote>\n<p><em>Provides integration with Spotify Desktop client. Shows the currently playing song in status bar, search lyrics and provides commands for controlling Spotify with buttons and hotkeys.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*IqsxXiGpZQWbQbfD.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=jock.svg\" class=\"markup--anchor markup--h3-anchor\">SVG</a>\n<blockquote>\n<p><em>A Powerful SVG Language Support Extension(beta). Almost all the features you need to handle SVG.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*SC6zCXGaBnM_LkgC.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=cssho.vscode-svgviewer\" class=\"markup--anchor markup--h3-anchor\">SVG Viewer</a>\n<blockquote>\n<p><em>View an SVG in the editor and export it as data URI scheme or PNG.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=ryu1kn.text-marker\" class=\"markup--anchor markup--h3-anchor\">Text Marker (Highlighter)</a></h3>\n<blockquote>\n<p><em>Highlight multiple text patterns with different colors at the same time. Highlighting a single text pattern can be done with the editor’s search functionality, but it cannot highlight multiple patterns at the same time, and this is where this extension comes handy.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*YDreVyGNjZmqj_KC.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=samundrak.esdoc-mdn\" class=\"markup--anchor markup--h3-anchor\">ESDOC MDN</a>\n<h3>THIS IS A MUST HAVE</h3>\n<blockquote>\n<p><em>Quickly bring up helpful MDN documentation in the editor</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*xiUfWBsz8x8beY70.gif\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*mMBU6d1iCkt5VHq2.gif\" class=\"graf-image\" /></figure>### Themes:\n<p>In the interest of not making the reader scroll endlessly as I often do… I’ve made a separate post for that here. If you’ve made it this far, I thank you!</p>\n<p><a href=\"https://bryanguner.medium.com/my-favorite-vscode-themes-9bab65af3f0f\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/my-favorite-vscode-themes-9bab65af3f0f\"><strong>My Favorite VSCode <em>Themes</em></strong><br />\nThemesbryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/my-favorite-vscode-themes-9bab65af3f0f\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<hr>\n<h3>If you found this guide helpful feel free to checkout my GitHub/gists where I host similar content:</h3>\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://gist.github.com/bgoonz\"><strong>bgoonz’s gists</strong><br />\n<em>Instantly share code, notes, and snippets. Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python |…</em>gist.github.com</a><a href=\"https://gist.github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<h3>Or Checkout my personal Resource Site:</h3>\n<p><a href=\"https://web-dev-resource-hub.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://web-dev-resource-hub.netlify.app/\"><strong>Web-Dev-Resource-Hub</strong><br />\n<em>Edit description</em>web-dev-resource-hub.netlify.app</a><a href=\"https://web-dev-resource-hub.netlify.app/\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/b9f4c8d91931\">March 18, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on May 23, 2021.</p>"
                }
            ],
            "site": {
                "siteMetadata": {
                    "palette": "navy",
                    "header": {
                        "logo_img": "images/logo-circle.png",
                        "logo_img_alt": "webdevhub logo",
                        "has_nav": true,
                        "nav_links": [
                            { "label": "Home", "url": "/", "style": "link", "has_subnav": false },
                            {
                                "label": "Blog",
                                "url": "https://blog-w-comments.vercel.app/",
                                "style": "link",
                                "has_subnav": true,
                                "subnav_links": [
                                    {
                                        "label": "Blog-Post-Archive",
                                        "url": "https://bgoonz.blogspot.com/",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Top Blog Posts",
                                        "url": "/blog/",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    }
                                ]
                            },
                            {
                                "url": "/docs/navigation",
                                "label": "Navigation",
                                "style": "link",
                                "icon_class": "dev",
                                "new_window": false,
                                "no_follow": false,
                                "has_subnav": true,
                                "subnav_links": [
                                    {
                                        "label": "Docs",
                                        "url": "/docs",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Showcase",
                                        "url": "/showcase",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "ds-algo",
                                        "url": "docs/articles/ds-algo-overview/",
                                        "style": "secondary",
                                        "icon_class": "dev",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "alt-blogs",
                                        "url": "https://bgoonz-blog-v3-0.netlify.app/",
                                        "style": "secondary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Games",
                                        "url": "https://bgoonz-games.netlify.app/",
                                        "style": "secondary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Pages",
                                        "url": "/docs",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "python-notes",
                                        "url": "blog/community/",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Contact!",
                                        "url": "/docs/faq/contact",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Nav",
                                        "url": "docs/docs",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    }
                                ],
                                "type": "action_menu"
                            },
                            {
                                "label": "Archive",
                                "style": "link",
                                "icon_class": "github",
                                "new_window": true,
                                "no_follow": false,
                                "has_subnav": true,
                                "subnav_links": [
                                    {
                                        "label": "Project Portfolio",
                                        "url": "https://curious-zebra-a1329.netlify.app/",
                                        "style": "link",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Medium Articles",
                                        "url": "https://bryanguner.medium.com/",
                                        "style": "link",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Resource-Archive-Server",
                                        "url": "https://github.com/bgoonz/Lambda-Resource-Static-Assets/tree/bryan-guner",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Lambda Student Resource Site",
                                        "url": "#",
                                        "style": "secondary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "OG-Blog",
                                        "url": "https://web-dev-resource-hub.netlify.app/",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Gallery",
                                        "url": "/gallery",
                                        "style": "secondary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Top Repos",
                                        "url": "/docs",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    }
                                ],
                                "type": "action_menu",
                                "url": "https://github.com/bgoonz/Learning-Assets"
                            },
                            {
                                "label": "Projects",
                                "url": "#",
                                "style": "link",
                                "icon_class": "dev",
                                "new_window": false,
                                "no_follow": false,
                                "has_subnav": true,
                                "subnav_links": [
                                    {
                                        "label": "Goal Setter",
                                        "url": "https://splendid-onion-b0ec3.netlify.app/",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Potluck Planner",
                                        "url": "https://potluck-landing.netlify.app/",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Meditation App",
                                        "url": "https://meditate42app.netlify.app/",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    }
                                ],
                                "type": "action_menu"
                            },
                            {
                                "label": "Tools",
                                "url": "/notes-template",
                                "style": "link",
                                "has_subnav": true,
                                "subnav_links": [
                                    {
                                        "label": "Github HTML Previewer",
                                        "url": "https://githtmlpreview.netlify.app/",
                                        "style": "link",
                                        "icon_class": "dev",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Text Tools",
                                        "url": "https://devtools42.netlify.app/",
                                        "style": "link",
                                        "icon_class": "dev",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Ternary 2 If Else",
                                        "url": "https://ternary42.netlify.app/",
                                        "style": "link",
                                        "icon_class": "dev",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Job Search Resources",
                                        "url": "https://determined-dijkstra-ee7390.netlify.app/",
                                        "style": "link",
                                        "icon_class": "dev",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Setup Checker",
                                        "url": "https://github.com/bgoonz/web-dev-setup-checker",
                                        "style": "link",
                                        "icon_class": "dev",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Github-Advanced-Search",
                                        "url": "https://github.com/search/advanced",
                                        "style": "icon",
                                        "icon_class": "github",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "PotluckPlanner",
                                        "url": "https://potluck-landing.netlify.app/",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "WebDev Quizzes",
                                        "url": "https://web-dev-interview-prep-quiz-website.netlify.app/",
                                        "style": "link",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    }
                                ]
                            },
                            { "label": "GitHub", "url": "https://github.com/bgoonz/BGOONZ_BLOG_2.0", "style": "primary", "has_subnav": false },
                            {
                                "label": "External Nav",
                                "url": "https://bgoonz-blog-v3-0.netlify.app/",
                                "style": "secondary",
                                "icon_class": "dev",
                                "new_window": false,
                                "no_follow": false,
                                "has_subnav": true,
                                "subnav_links": [
                                    {
                                        "label": "Embeds Blog",
                                        "url": "https://friendly-panda-b61ab.netlify.app/",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Blog Backup",
                                        "url": "https://bgoonz-blog-v3-0.netlify.app/",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": true,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Cover Letter",
                                        "url": "https://bgoonz-cv.netlify.app/",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "Project Centric",
                                        "url": "https://curious-zebra-a1329.netlify.app/",
                                        "style": "primary",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    },
                                    {
                                        "label": "lorem-ipsum",
                                        "url": "#",
                                        "style": "link",
                                        "icon_class": "dev",
                                        "new_window": false,
                                        "no_follow": false,
                                        "type": "action"
                                    }
                                ],
                                "type": "action_menu"
                            }
                        ],
                        "title": "WebDevHub"
                    },
                    "footer": {
                        "has_social": true,
                        "social_links": [
                            { "label": "Twitter", "url": "https://twitter.com/bgooonz", "style": "icon", "icon_class": "twitter", "new_window": true },
                            {
                                "label": "LinkedIn",
                                "url": "https://www.linkedin.com/in/bryan-guner-046199128/",
                                "style": "icon",
                                "icon_class": "linkedin",
                                "new_window": true
                            },
                            { "label": "GitHub", "url": "https://github.com/bgoonz", "style": "icon", "icon_class": "github", "new_window": true },
                            {
                                "label": "Youtube",
                                "url": "https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA",
                                "style": "icon",
                                "icon_class": "youtube",
                                "new_window": true,
                                "no_follow": false,
                                "type": "action"
                            },
                            {
                                "label": "Instagram",
                                "url": "https://www.instagram.com/bgoonz/?hl=en",
                                "style": "icon",
                                "icon_class": "instagram",
                                "new_window": false,
                                "no_follow": false,
                                "type": "action"
                            },
                            {
                                "label": "lorem-ipsum",
                                "url": "https://dev.to/bgoonz",
                                "style": "icon",
                                "icon_class": "dev",
                                "new_window": true,
                                "no_follow": false,
                                "type": "action"
                            }
                        ],
                        "links": [
                            {
                                "label": "Old Blog",
                                "url": "https://lambda-resources.netlify.app/",
                                "style": "primary",
                                "icon_class": "dev",
                                "new_window": false,
                                "no_follow": false,
                                "type": "action"
                            },
                            {
                                "label": "Medium",
                                "url": "https://bryanguner.medium.com/",
                                "style": "primary",
                                "icon_class": "dev",
                                "new_window": true,
                                "no_follow": false,
                                "type": "action"
                            },
                            {
                                "label": "BLM",
                                "url": "https://optimistic-lewin-8586ae.netlify.app/blm.zip",
                                "style": "primary",
                                "icon_class": "dev",
                                "new_window": false,
                                "no_follow": false,
                                "type": "action"
                            },
                            {
                                "label": "Html Previewer",
                                "url": "#",
                                "style": "primary",
                                "icon_class": "dev",
                                "new_window": false,
                                "no_follow": false,
                                "type": "action"
                            },
                            {
                                "label": "Python",
                                "url": "https://github.com/bgoonz/PYTHON_PRAC",
                                "style": "primary",
                                "icon_class": "dev",
                                "new_window": false,
                                "no_follow": false,
                                "type": "action"
                            },
                            {
                                "label": "Github Pages",
                                "url": "https://bgoonz.github.io/BGOONZ_BLOG_2.0/",
                                "style": "primary",
                                "icon_class": "dev",
                                "new_window": false,
                                "no_follow": false,
                                "type": "action"
                            }
                        ],
                        "content": "@bgoonz"
                    },
                    "title": "webdevhub",
                    "domain": "https://bgoonz-blog.netlify.app/",
                    "favicon": "images/favicon.ico"
                },
                "pathPrefix": "",
                "data": {
                    "doc_sections": {
                        "root_docs_path": "/docs",
                        "sections": ["about", "faq", "interact", "links", "quick-reference", "react", "tools", "experimental", "articles"]
                    }
                }
            },
            "menus": {}
        }
    },
    "staticQueryHashes": []
}
