{
    "expireTime": 9007200882028854000,
    "key": "transformer-remark-markdown-html-ast-4971092b8a2330efbfb54c41c1cd047f--",
    "val": {
        "type": "root",
        "children": [
            {
                "type": "element",
                "tagName": "h1",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Fundamental Data Structures In JavaScript",
                        "position": { "start": { "line": 2, "column": 3, "offset": 3 }, "end": { "line": 2, "column": 44, "offset": 44 } }
                    }
                ],
                "position": { "start": { "line": 2, "column": 1, "offset": 1 }, "end": { "line": 2, "column": 44, "offset": 44 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Fundamental Data Structures In JavaScript",
                        "position": { "start": { "line": 4, "column": 1, "offset": 46 }, "end": { "line": 4, "column": 42, "offset": 87 } }
                    }
                ],
                "position": { "start": { "line": 4, "column": 1, "offset": 46 }, "end": { "line": 4, "column": 42, "offset": 87 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Data structures in JavaScript",
                        "position": { "start": { "line": 6, "column": 4, "offset": 92 }, "end": { "line": 6, "column": 33, "offset": 121 } }
                    }
                ],
                "position": { "start": { "line": 6, "column": 1, "offset": 89 }, "end": { "line": 6, "column": 33, "offset": 121 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Here's a website I created to practice data structures!\n",
                        "position": { "start": { "line": 8, "column": 1, "offset": 123 }, "end": { "line": 9, "column": 1, "offset": 179 } }
                    },
                    {
                        "type": "element",
                        "tagName": "a",
                        "properties": { "href": "https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/" },
                        "children": [
                            {
                                "type": "element",
                                "tagName": "strong",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "directory",
                                        "position": { "start": { "line": 9, "column": 4, "offset": 182 }, "end": { "line": 9, "column": 13, "offset": 191 } }
                                    }
                                ],
                                "position": { "start": { "line": 9, "column": 2, "offset": 180 }, "end": { "line": 9, "column": 15, "offset": 193 } }
                            },
                            {
                                "type": "text",
                                "value": "\n",
                                "position": { "start": { "line": 9, "column": 15, "offset": 193 }, "end": { "line": 10, "column": 1, "offset": 194 } }
                            },
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Edit description",
                                        "position": { "start": { "line": 10, "column": 2, "offset": 195 }, "end": { "line": 10, "column": 18, "offset": 211 } }
                                    }
                                ],
                                "position": { "start": { "line": 10, "column": 1, "offset": 194 }, "end": { "line": 10, "column": 19, "offset": 212 } }
                            },
                            {
                                "type": "text",
                                "value": "ds-algo-official-c3dw6uapg-bgoonz.vercel.app",
                                "position": { "start": { "line": 10, "column": 19, "offset": 212 }, "end": { "line": 10, "column": 63, "offset": 256 } }
                            }
                        ],
                        "position": { "start": { "line": 9, "column": 1, "offset": 179 }, "end": { "line": 10, "column": 119, "offset": 312 } }
                    }
                ],
                "position": { "start": { "line": 8, "column": 1, "offset": 123 }, "end": { "line": 10, "column": 119, "offset": 312 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Here's the repo that the website is built on:\n",
                        "position": { "start": { "line": 12, "column": 1, "offset": 314 }, "end": { "line": 13, "column": 1, "offset": 360 } }
                    },
                    {
                        "type": "element",
                        "tagName": "a",
                        "properties": { "href": "https://github.com/bgoonz/DS-ALGO-OFFICIAL" },
                        "children": [
                            {
                                "type": "element",
                                "tagName": "strong",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "bgoonz/DS-ALGO-OFFICIAL",
                                        "position": { "start": { "line": 13, "column": 4, "offset": 363 }, "end": { "line": 13, "column": 27, "offset": 386 } }
                                    }
                                ],
                                "position": { "start": { "line": 13, "column": 2, "offset": 361 }, "end": { "line": 13, "column": 29, "offset": 388 } }
                            },
                            {
                                "type": "text",
                                "value": "\n",
                                "position": { "start": { "line": 13, "column": 29, "offset": 388 }, "end": { "line": 14, "column": 1, "offset": 389 } }
                            },
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Navigation ####Author:Bryan Guner Big O notation is the language we use for talking about how long an algorithm takesâ€¦",
                                        "position": { "start": { "line": 14, "column": 2, "offset": 390 }, "end": { "line": 14, "column": 120, "offset": 508 } }
                                    }
                                ],
                                "position": { "start": { "line": 14, "column": 1, "offset": 389 }, "end": { "line": 14, "column": 121, "offset": 509 } }
                            },
                            {
                                "type": "text",
                                "value": "github.com",
                                "position": { "start": { "line": 14, "column": 121, "offset": 509 }, "end": { "line": 14, "column": 131, "offset": 519 } }
                            }
                        ],
                        "position": { "start": { "line": 13, "column": 1, "offset": 360 }, "end": { "line": 14, "column": 176, "offset": 564 } }
                    }
                ],
                "position": { "start": { "line": 12, "column": 1, "offset": 314 }, "end": { "line": 14, "column": 176, "offset": 564 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Resources (article content below):",
                        "position": { "start": { "line": 16, "column": 4, "offset": 569 }, "end": { "line": 16, "column": 38, "offset": 603 } }
                    }
                ],
                "position": { "start": { "line": 16, "column": 1, "offset": 566 }, "end": { "line": 16, "column": 38, "offset": 603 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h3",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Videos",
                        "position": { "start": { "line": 18, "column": 5, "offset": 609 }, "end": { "line": 18, "column": 11, "offset": 615 } }
                    }
                ],
                "position": { "start": { "line": 18, "column": 1, "offset": 605 }, "end": { "line": 18, "column": 11, "offset": 615 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "ul",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.youtube.com/watch?v=0IAPZzGSbME&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=2&t=0s" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Abdul Bari: YouTubeChannel for Algorithms",
                                        "position": { "start": { "line": 20, "column": 6, "offset": 622 }, "end": { "line": 20, "column": 47, "offset": 663 } }
                                    }
                                ],
                                "position": { "start": { "line": 20, "column": 5, "offset": 621 }, "end": { "line": 20, "column": 146, "offset": 762 } }
                            }
                        ],
                        "position": { "start": { "line": 20, "column": 1, "offset": 617 }, "end": { "line": 21, "column": 1, "offset": 763 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.youtube.com/watch?v=lxja8wBwN0k&list=PLKKfKV1b9e8ps6dD3QA5KFfHdiWj9cB1s" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Data Structures and algorithms",
                                        "position": { "start": { "line": 22, "column": 6, "offset": 769 }, "end": { "line": 22, "column": 36, "offset": 799 } }
                                    }
                                ],
                                "position": { "start": { "line": 22, "column": 5, "offset": 768 }, "end": { "line": 22, "column": 122, "offset": 885 } }
                            }
                        ],
                        "position": { "start": { "line": 22, "column": 1, "offset": 764 }, "end": { "line": 23, "column": 1, "offset": 886 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.youtube.com/playlist?list=PLmGElG-9wxc9Us6IK6Qy-KHlG_F3IS6Q9" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Data Structures and algorithms Course",
                                        "position": { "start": { "line": 24, "column": 6, "offset": 892 }, "end": { "line": 24, "column": 43, "offset": 929 } }
                                    }
                                ],
                                "position": { "start": { "line": 24, "column": 5, "offset": 891 }, "end": { "line": 24, "column": 118, "offset": 1004 } }
                            }
                        ],
                        "position": { "start": { "line": 24, "column": 1, "offset": 887 }, "end": { "line": 25, "column": 1, "offset": 1005 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.khanacademy.org/computing/computer-science/algorithms" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Khan Academy",
                                        "position": {
                                            "start": { "line": 26, "column": 6, "offset": 1011 },
                                            "end": { "line": 26, "column": 18, "offset": 1023 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 26, "column": 5, "offset": 1010 }, "end": { "line": 26, "column": 86, "offset": 1091 } }
                            }
                        ],
                        "position": { "start": { "line": 26, "column": 1, "offset": 1006 }, "end": { "line": 27, "column": 1, "offset": 1092 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Data structures by mycodeschool",
                                        "position": {
                                            "start": { "line": 28, "column": 6, "offset": 1098 },
                                            "end": { "line": 28, "column": 37, "offset": 1129 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 28, "column": 5, "offset": 1097 }, "end": { "line": 28, "column": 112, "offset": 1204 } }
                            },
                            {
                                "type": "text",
                                "value": "Pre-requisite for this lesson is good understanding of pointers in C.",
                                "position": { "start": { "line": 28, "column": 112, "offset": 1204 }, "end": { "line": 28, "column": 181, "offset": 1273 } }
                            }
                        ],
                        "position": { "start": { "line": 28, "column": 1, "offset": 1093 }, "end": { "line": 29, "column": 1, "offset": 1274 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.youtube.com/watch?v=HtSuA80QTyo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "MIT 6.006: Intro to Algorithms(2011)",
                                        "position": {
                                            "start": { "line": 30, "column": 6, "offset": 1280 },
                                            "end": { "line": 30, "column": 42, "offset": 1316 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 30, "column": 5, "offset": 1279 }, "end": { "line": 30, "column": 128, "offset": 1402 } }
                            }
                        ],
                        "position": { "start": { "line": 30, "column": 1, "offset": 1275 }, "end": { "line": 31, "column": 1, "offset": 1403 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.youtube.com/watch?v=5_5oE5lgrhw&list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Data Structures and Algorithms by Codewithharry",
                                        "position": {
                                            "start": { "line": 32, "column": 6, "offset": 1409 },
                                            "end": { "line": 32, "column": 53, "offset": 1456 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 32, "column": 5, "offset": 1408 }, "end": { "line": 32, "column": 139, "offset": 1542 } }
                            }
                        ],
                        "position": { "start": { "line": 32, "column": 1, "offset": 1404 }, "end": { "line": 32, "column": 139, "offset": 1542 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 20, "column": 1, "offset": 617 }, "end": { "line": 32, "column": 139, "offset": 1542 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h3",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Books",
                        "position": { "start": { "line": 34, "column": 5, "offset": 1548 }, "end": { "line": 34, "column": 10, "offset": 1553 } }
                    }
                ],
                "position": { "start": { "line": 34, "column": 1, "offset": 1544 }, "end": { "line": 34, "column": 10, "offset": 1553 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "ul",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://edutechlearners.com/download/Introduction_to_algorithms-3rd%20Edition.pdf" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Introduction to Algorithms",
                                        "position": {
                                            "start": { "line": 36, "column": 6, "offset": 1560 },
                                            "end": { "line": 36, "column": 32, "offset": 1586 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 36, "column": 5, "offset": 1559 }, "end": { "line": 36, "column": 116, "offset": 1670 } }
                            },
                            {
                                "type": "text",
                                "value": " by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein",
                                "position": { "start": { "line": 36, "column": 116, "offset": 1670 }, "end": { "line": 36, "column": 196, "offset": 1750 } }
                            }
                        ],
                        "position": { "start": { "line": 36, "column": 1, "offset": 1555 }, "end": { "line": 37, "column": 1, "offset": 1751 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "http://www.sso.sy/sites/default/files/competitive%20programming%203_1.pdf" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Competitive Programming 3",
                                        "position": {
                                            "start": { "line": 38, "column": 6, "offset": 1757 },
                                            "end": { "line": 38, "column": 31, "offset": 1782 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 38, "column": 5, "offset": 1756 }, "end": { "line": 38, "column": 107, "offset": 1858 } }
                            },
                            {
                                "type": "text",
                                "value": " by Steven Halim and Felix Halim",
                                "position": { "start": { "line": 38, "column": 107, "offset": 1858 }, "end": { "line": 38, "column": 139, "offset": 1890 } }
                            }
                        ],
                        "position": { "start": { "line": 38, "column": 1, "offset": 1752 }, "end": { "line": 39, "column": 1, "offset": 1891 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://cses.fi/book/book.pdf" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Competitive Programmers Hand Book",
                                        "position": {
                                            "start": { "line": 40, "column": 6, "offset": 1897 },
                                            "end": { "line": 40, "column": 39, "offset": 1930 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 40, "column": 5, "offset": 1896 }, "end": { "line": 40, "column": 71, "offset": 1962 } }
                            },
                            {
                                "type": "text",
                                "value": " Beginner friendly hand book for competitive programmers.",
                                "position": { "start": { "line": 40, "column": 71, "offset": 1962 }, "end": { "line": 40, "column": 128, "offset": 2019 } }
                            }
                        ],
                        "position": { "start": { "line": 40, "column": 1, "offset": 1892 }, "end": { "line": 41, "column": 1, "offset": 2020 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": {
                                    "href": "https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Data%20Structures%20and%20Algorithms%20-%20Narasimha%20Karumanchi.pdf"
                                },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Data Structures and Algorithms Made Easy",
                                        "position": {
                                            "start": { "line": 42, "column": 6, "offset": 2026 },
                                            "end": { "line": 42, "column": 46, "offset": 2066 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 42, "column": 5, "offset": 2025 }, "end": { "line": 42, "column": 205, "offset": 2225 } }
                            },
                            {
                                "type": "text",
                                "value": " by Narasimha Karumanchi",
                                "position": { "start": { "line": 42, "column": 205, "offset": 2225 }, "end": { "line": 42, "column": 229, "offset": 2249 } }
                            }
                        ],
                        "position": { "start": { "line": 42, "column": 1, "offset": 2021 }, "end": { "line": 43, "column": 1, "offset": 2250 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": {
                                    "href": "https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Learning%20Algorithms%20Through%20Programming%20and%20Puzzle%20Solving.pdf"
                                },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Learning Algorithms Through Programming and Puzzle Solving",
                                        "position": {
                                            "start": { "line": 44, "column": 6, "offset": 2256 },
                                            "end": { "line": 44, "column": 64, "offset": 2314 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 44, "column": 5, "offset": 2255 }, "end": { "line": 44, "column": 228, "offset": 2478 } }
                            },
                            {
                                "type": "text",
                                "value": " by Alexander Kulikov and Pavel Pevzner",
                                "position": { "start": { "line": 44, "column": 228, "offset": 2478 }, "end": { "line": 44, "column": 267, "offset": 2517 } }
                            }
                        ],
                        "position": { "start": { "line": 44, "column": 1, "offset": 2251 }, "end": { "line": 44, "column": 267, "offset": 2517 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 36, "column": 1, "offset": 1555 }, "end": { "line": 44, "column": 267, "offset": 2517 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h3",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Coding practice",
                        "position": { "start": { "line": 46, "column": 5, "offset": 2523 }, "end": { "line": 46, "column": 20, "offset": 2538 } }
                    }
                ],
                "position": { "start": { "line": 46, "column": 1, "offset": 2519 }, "end": { "line": 46, "column": 20, "offset": 2538 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "ul",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://leetcode.com/" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "LeetCode",
                                        "position": {
                                            "start": { "line": 48, "column": 6, "offset": 2545 },
                                            "end": { "line": 48, "column": 14, "offset": 2553 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 48, "column": 5, "offset": 2544 }, "end": { "line": 48, "column": 38, "offset": 2577 } }
                            }
                        ],
                        "position": { "start": { "line": 48, "column": 1, "offset": 2540 }, "end": { "line": 49, "column": 1, "offset": 2578 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.interviewbit.com/" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "InterviewBit",
                                        "position": {
                                            "start": { "line": 50, "column": 6, "offset": 2584 },
                                            "end": { "line": 50, "column": 18, "offset": 2596 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 50, "column": 5, "offset": 2583 }, "end": { "line": 50, "column": 50, "offset": 2628 } }
                            }
                        ],
                        "position": { "start": { "line": 50, "column": 1, "offset": 2579 }, "end": { "line": 51, "column": 1, "offset": 2629 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://codility.com/" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Codility",
                                        "position": {
                                            "start": { "line": 52, "column": 6, "offset": 2635 },
                                            "end": { "line": 52, "column": 14, "offset": 2643 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 52, "column": 5, "offset": 2634 }, "end": { "line": 52, "column": 38, "offset": 2667 } }
                            }
                        ],
                        "position": { "start": { "line": 52, "column": 1, "offset": 2630 }, "end": { "line": 53, "column": 1, "offset": 2668 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.hackerrank.com/" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "HackerRank",
                                        "position": {
                                            "start": { "line": 54, "column": 6, "offset": 2674 },
                                            "end": { "line": 54, "column": 16, "offset": 2684 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 54, "column": 5, "offset": 2673 }, "end": { "line": 54, "column": 46, "offset": 2714 } }
                            }
                        ],
                        "position": { "start": { "line": 54, "column": 1, "offset": 2669 }, "end": { "line": 55, "column": 1, "offset": 2715 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://projecteuler.net/" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Project Euler",
                                        "position": {
                                            "start": { "line": 56, "column": 6, "offset": 2721 },
                                            "end": { "line": 56, "column": 19, "offset": 2734 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 56, "column": 5, "offset": 2720 }, "end": { "line": 56, "column": 47, "offset": 2762 } }
                            }
                        ],
                        "position": { "start": { "line": 56, "column": 1, "offset": 2716 }, "end": { "line": 57, "column": 1, "offset": 2763 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://spoj.com/" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Spoj",
                                        "position": {
                                            "start": { "line": 58, "column": 6, "offset": 2769 },
                                            "end": { "line": 58, "column": 10, "offset": 2773 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 58, "column": 5, "offset": 2768 }, "end": { "line": 58, "column": 30, "offset": 2793 } }
                            }
                        ],
                        "position": { "start": { "line": 58, "column": 1, "offset": 2764 }, "end": { "line": 59, "column": 1, "offset": 2794 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://code.google.com/codejam/contests.html" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Google Code Jam practice problems",
                                        "position": {
                                            "start": { "line": 60, "column": 6, "offset": 2800 },
                                            "end": { "line": 60, "column": 39, "offset": 2833 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 60, "column": 5, "offset": 2799 }, "end": { "line": 60, "column": 87, "offset": 2881 } }
                            }
                        ],
                        "position": { "start": { "line": 60, "column": 1, "offset": 2795 }, "end": { "line": 61, "column": 1, "offset": 2882 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.hackerearth.com/" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "HackerEarth",
                                        "position": {
                                            "start": { "line": 62, "column": 6, "offset": 2888 },
                                            "end": { "line": 62, "column": 17, "offset": 2899 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 62, "column": 5, "offset": 2887 }, "end": { "line": 62, "column": 48, "offset": 2930 } }
                            }
                        ],
                        "position": { "start": { "line": 62, "column": 1, "offset": 2883 }, "end": { "line": 63, "column": 1, "offset": 2931 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.topcoder.com/" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Top Coder",
                                        "position": {
                                            "start": { "line": 64, "column": 6, "offset": 2937 },
                                            "end": { "line": 64, "column": 15, "offset": 2946 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 64, "column": 5, "offset": 2936 }, "end": { "line": 64, "column": 43, "offset": 2974 } }
                            }
                        ],
                        "position": { "start": { "line": 64, "column": 1, "offset": 2932 }, "end": { "line": 65, "column": 1, "offset": 2975 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.codechef.com/" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "CodeChef",
                                        "position": {
                                            "start": { "line": 66, "column": 6, "offset": 2981 },
                                            "end": { "line": 66, "column": 14, "offset": 2989 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 66, "column": 5, "offset": 2980 }, "end": { "line": 66, "column": 42, "offset": 3017 } }
                            }
                        ],
                        "position": { "start": { "line": 66, "column": 1, "offset": 2976 }, "end": { "line": 67, "column": 1, "offset": 3018 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.codewars.com/" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Codewars",
                                        "position": {
                                            "start": { "line": 68, "column": 6, "offset": 3024 },
                                            "end": { "line": 68, "column": 14, "offset": 3032 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 68, "column": 5, "offset": 3023 }, "end": { "line": 68, "column": 42, "offset": 3060 } }
                            }
                        ],
                        "position": { "start": { "line": 68, "column": 1, "offset": 3019 }, "end": { "line": 69, "column": 1, "offset": 3061 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://codesignal.com/" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "CodeSignal",
                                        "position": {
                                            "start": { "line": 70, "column": 6, "offset": 3067 },
                                            "end": { "line": 70, "column": 16, "offset": 3077 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 70, "column": 5, "offset": 3066 }, "end": { "line": 70, "column": 42, "offset": 3103 } }
                            }
                        ],
                        "position": { "start": { "line": 70, "column": 1, "offset": 3062 }, "end": { "line": 71, "column": 1, "offset": 3104 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "http://codekata.com/" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "CodeKata",
                                        "position": {
                                            "start": { "line": 72, "column": 6, "offset": 3110 },
                                            "end": { "line": 72, "column": 14, "offset": 3118 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 72, "column": 5, "offset": 3109 }, "end": { "line": 72, "column": 37, "offset": 3141 } }
                            }
                        ],
                        "position": { "start": { "line": 72, "column": 1, "offset": 3105 }, "end": { "line": 73, "column": 1, "offset": 3142 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.firecode.io/" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Firecode",
                                        "position": {
                                            "start": { "line": 74, "column": 6, "offset": 3148 },
                                            "end": { "line": 74, "column": 14, "offset": 3156 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 74, "column": 5, "offset": 3147 }, "end": { "line": 74, "column": 41, "offset": 3183 } }
                            }
                        ],
                        "position": { "start": { "line": 74, "column": 1, "offset": 3143 }, "end": { "line": 74, "column": 41, "offset": 3183 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 48, "column": 1, "offset": 2540 }, "end": { "line": 74, "column": 41, "offset": 3183 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h3",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Courses",
                        "position": { "start": { "line": 76, "column": 5, "offset": 3189 }, "end": { "line": 76, "column": 12, "offset": 3196 } }
                    }
                ],
                "position": { "start": { "line": 76, "column": 1, "offset": 3185 }, "end": { "line": 76, "column": 12, "offset": 3196 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "ul",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://academy.zerotomastery.io/p/master-the-coding-interview-faang-interview-prep" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Master the Coding Interview: Big Tech (FAANG) Interviews",
                                        "position": {
                                            "start": { "line": 78, "column": 6, "offset": 3203 },
                                            "end": { "line": 78, "column": 62, "offset": 3259 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 78, "column": 5, "offset": 3202 }, "end": { "line": 78, "column": 148, "offset": 3345 } }
                            },
                            {
                                "type": "text",
                                "value": " Course by Andrei and his team.",
                                "position": { "start": { "line": 78, "column": 148, "offset": 3345 }, "end": { "line": 78, "column": 179, "offset": 3376 } }
                            }
                        ],
                        "position": { "start": { "line": 78, "column": 1, "offset": 3198 }, "end": { "line": 79, "column": 1, "offset": 3377 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://realpython.com/python-data-structures" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Common Python Data Structures",
                                        "position": {
                                            "start": { "line": 80, "column": 6, "offset": 3383 },
                                            "end": { "line": 80, "column": 35, "offset": 3412 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 80, "column": 5, "offset": 3382 }, "end": { "line": 80, "column": 83, "offset": 3460 } }
                            },
                            {
                                "type": "text",
                                "value": " Data structures are the fundamental constructs around which you build your programs. Each data structure provides a particular way of organizing data so it can be accessed efficiently, depending on your use case. Python ships with an extensive set of data structures in its standard library.",
                                "position": { "start": { "line": 80, "column": 83, "offset": 3460 }, "end": { "line": 80, "column": 375, "offset": 3752 } }
                            }
                        ],
                        "position": { "start": { "line": 80, "column": 1, "offset": 3378 }, "end": { "line": 81, "column": 1, "offset": 3753 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.geeksforgeeks.org/fork-cpp-course-structure" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Fork CPP",
                                        "position": {
                                            "start": { "line": 82, "column": 6, "offset": 3759 },
                                            "end": { "line": 82, "column": 14, "offset": 3767 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 82, "column": 5, "offset": 3758 }, "end": { "line": 82, "column": 72, "offset": 3825 } }
                            },
                            {
                                "type": "text",
                                "value": " A good course for beginners.",
                                "position": { "start": { "line": 82, "column": 72, "offset": 3825 }, "end": { "line": 82, "column": 101, "offset": 3854 } }
                            }
                        ],
                        "position": { "start": { "line": 82, "column": 1, "offset": 3754 }, "end": { "line": 83, "column": 1, "offset": 3855 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://codeforces.com/edu/course/2" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "EDU",
                                        "position": { "start": { "line": 84, "column": 6, "offset": 3861 }, "end": { "line": 84, "column": 9, "offset": 3864 } }
                                    }
                                ],
                                "position": { "start": { "line": 84, "column": 5, "offset": 3860 }, "end": { "line": 84, "column": 47, "offset": 3902 } }
                            },
                            {
                                "type": "text",
                                "value": " Advanced course.",
                                "position": { "start": { "line": 84, "column": 47, "offset": 3902 }, "end": { "line": 84, "column": 64, "offset": 3919 } }
                            }
                        ],
                        "position": { "start": { "line": 84, "column": 1, "offset": 3856 }, "end": { "line": 85, "column": 1, "offset": 3920 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.udacity.com/course/c-for-programmers--ud210" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "C++ For Programmers",
                                        "position": {
                                            "start": { "line": 86, "column": 6, "offset": 3926 },
                                            "end": { "line": 86, "column": 25, "offset": 3945 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 86, "column": 5, "offset": 3925 }, "end": { "line": 86, "column": 83, "offset": 4003 } }
                            },
                            {
                                "type": "text",
                                "value": " Learn features and constructs for C++.",
                                "position": { "start": { "line": 86, "column": 83, "offset": 4003 }, "end": { "line": 86, "column": 122, "offset": 4042 } }
                            }
                        ],
                        "position": { "start": { "line": 86, "column": 1, "offset": 3921 }, "end": { "line": 86, "column": 122, "offset": 4042 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 78, "column": 1, "offset": 3198 }, "end": { "line": 86, "column": 122, "offset": 4042 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h3",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Guides",
                        "position": { "start": { "line": 88, "column": 5, "offset": 4048 }, "end": { "line": 88, "column": 11, "offset": 4054 } }
                    }
                ],
                "position": { "start": { "line": 88, "column": 1, "offset": 4044 }, "end": { "line": 88, "column": 11, "offset": 4054 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "ul",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "http://www.geeksforgeeks.org/" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "GeeksForGeeks â€” A CS portal for geeks",
                                        "position": {
                                            "start": { "line": 90, "column": 6, "offset": 4061 },
                                            "end": { "line": 90, "column": 43, "offset": 4098 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 90, "column": 5, "offset": 4060 }, "end": { "line": 90, "column": 75, "offset": 4130 } }
                            }
                        ],
                        "position": { "start": { "line": 90, "column": 1, "offset": 4056 }, "end": { "line": 91, "column": 1, "offset": 4131 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://www.learneroo.com/subjects/8" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Learneroo â€” Algorithms",
                                        "position": {
                                            "start": { "line": 92, "column": 6, "offset": 4137 },
                                            "end": { "line": 92, "column": 28, "offset": 4159 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 92, "column": 5, "offset": 4136 }, "end": { "line": 92, "column": 67, "offset": 4198 } }
                            }
                        ],
                        "position": { "start": { "line": 92, "column": 1, "offset": 4132 }, "end": { "line": 93, "column": 1, "offset": 4199 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "http://www.topcoder.com/tc?d1=tutorials&d2=alg_index&module=Static" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Top Coder tutorials",
                                        "position": {
                                            "start": { "line": 94, "column": 6, "offset": 4205 },
                                            "end": { "line": 94, "column": 25, "offset": 4224 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 94, "column": 5, "offset": 4204 }, "end": { "line": 94, "column": 94, "offset": 4293 } }
                            }
                        ],
                        "position": { "start": { "line": 94, "column": 1, "offset": 4200 }, "end": { "line": 95, "column": 1, "offset": 4294 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "http://www.infoarena.ro/training-path" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Infoarena training path",
                                        "position": {
                                            "start": { "line": 96, "column": 6, "offset": 4300 },
                                            "end": { "line": 96, "column": 29, "offset": 4323 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 96, "column": 5, "offset": 4299 }, "end": { "line": 96, "column": 69, "offset": 4363 } }
                            },
                            {
                                "type": "text",
                                "value": " (RO)",
                                "position": { "start": { "line": 96, "column": 69, "offset": 4363 }, "end": { "line": 96, "column": 74, "offset": 4368 } }
                            }
                        ],
                        "position": { "start": { "line": 96, "column": 1, "offset": 4295 }, "end": { "line": 97, "column": 1, "offset": 4369 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Steven & Felix Halim â€” ",
                                "position": { "start": { "line": 98, "column": 5, "offset": 4374 }, "end": { "line": 98, "column": 28, "offset": 4397 } }
                            },
                            {
                                "type": "element",
                                "tagName": "a",
                                "properties": { "href": "https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=118" },
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Increasing the Lower Bound of Programming Contests",
                                        "position": {
                                            "start": { "line": 98, "column": 29, "offset": 4398 },
                                            "end": { "line": 98, "column": 79, "offset": 4448 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 98, "column": 28, "offset": 4397 }, "end": { "line": 98, "column": 164, "offset": 4533 } }
                            },
                            {
                                "type": "text",
                                "value": " (UVA Online Judge)",
                                "position": { "start": { "line": 98, "column": 164, "offset": 4533 }, "end": { "line": 98, "column": 183, "offset": 4552 } }
                            }
                        ],
                        "position": { "start": { "line": 98, "column": 1, "offset": 4370 }, "end": { "line": 98, "column": 183, "offset": 4552 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 90, "column": 1, "offset": 4056 }, "end": { "line": 98, "column": 183, "offset": 4552 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "strong",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "space",
                                        "position": {
                                            "start": { "line": 100, "column": 7, "offset": 4560 },
                                            "end": { "line": 100, "column": 12, "offset": 4565 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 100, "column": 6, "offset": 4559 }, "end": { "line": 100, "column": 13, "offset": 4566 } }
                            }
                        ],
                        "position": { "start": { "line": 100, "column": 4, "offset": 4557 }, "end": { "line": 100, "column": 15, "offset": 4568 } }
                    }
                ],
                "position": { "start": { "line": 100, "column": 1, "offset": 4554 }, "end": { "line": 100, "column": 15, "offset": 4568 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The space complexity represents the memory consumption of a data structure. As for most of the things in life, you can't have it all, so it is with the data structures. You will generally need to trade some time for space or the other way around.",
                                        "position": {
                                            "start": { "line": 102, "column": 4, "offset": 4573 },
                                            "end": { "line": 102, "column": 250, "offset": 4819 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 102, "column": 3, "offset": 4572 }, "end": { "line": 102, "column": 251, "offset": 4820 } }
                            }
                        ],
                        "position": { "start": { "line": 102, "column": 3, "offset": 4572 }, "end": { "line": 102, "column": 251, "offset": 4820 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 102, "column": 1, "offset": 4570 }, "end": { "line": 102, "column": 251, "offset": 4820 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "time",
                                "position": { "start": { "line": 104, "column": 5, "offset": 4826 }, "end": { "line": 104, "column": 9, "offset": 4830 } }
                            }
                        ],
                        "position": { "start": { "line": 104, "column": 4, "offset": 4825 }, "end": { "line": 104, "column": 10, "offset": 4831 } }
                    }
                ],
                "position": { "start": { "line": 104, "column": 1, "offset": 4822 }, "end": { "line": 104, "column": 10, "offset": 4831 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The time complexity for a data structure is in general more diverse than its space complexity.",
                                        "position": {
                                            "start": { "line": 106, "column": 4, "offset": 4836 },
                                            "end": { "line": 106, "column": 98, "offset": 4930 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 106, "column": 3, "offset": 4835 }, "end": { "line": 106, "column": 99, "offset": 4931 } }
                            }
                        ],
                        "position": { "start": { "line": 106, "column": 3, "offset": 4835 }, "end": { "line": 106, "column": 99, "offset": 4931 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 106, "column": 1, "offset": 4833 }, "end": { "line": 106, "column": 99, "offset": 4931 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Several operations",
                                "position": { "start": { "line": 108, "column": 5, "offset": 4937 }, "end": { "line": 108, "column": 23, "offset": 4955 } }
                            }
                        ],
                        "position": { "start": { "line": 108, "column": 4, "offset": 4936 }, "end": { "line": 108, "column": 24, "offset": 4956 } }
                    }
                ],
                "position": { "start": { "line": 108, "column": 1, "offset": 4933 }, "end": { "line": 108, "column": 24, "offset": 4956 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "In contrary to algorithms, when you look at the time complexity for data structures you need to express it for several operations that you can do with data structures. It can be adding elements, deleting elements, accessing an element or even searching for an element.",
                                        "position": {
                                            "start": { "line": 110, "column": 4, "offset": 4961 },
                                            "end": { "line": 110, "column": 272, "offset": 5229 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 110, "column": 3, "offset": 4960 }, "end": { "line": 110, "column": 273, "offset": 5230 } }
                            }
                        ],
                        "position": { "start": { "line": 110, "column": 3, "offset": 4960 }, "end": { "line": 110, "column": 273, "offset": 5230 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 110, "column": 1, "offset": 4958 }, "end": { "line": 110, "column": 273, "offset": 5230 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Dependent on data",
                                "position": { "start": { "line": 112, "column": 5, "offset": 5236 }, "end": { "line": 112, "column": 22, "offset": 5253 } }
                            }
                        ],
                        "position": { "start": { "line": 112, "column": 4, "offset": 5235 }, "end": { "line": 112, "column": 23, "offset": 5254 } }
                    }
                ],
                "position": { "start": { "line": 112, "column": 1, "offset": 5232 }, "end": { "line": 112, "column": 23, "offset": 5254 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Something that data structure and algorithms have in common when talking about time complexity is that they are both dealing with data. When you deal with data you become dependent on them and as a result the time complexity is also dependent of the data that you received. To solve this problem we talk about 3 different time complexity.",
                                        "position": {
                                            "start": { "line": 114, "column": 4, "offset": 5259 },
                                            "end": { "line": 114, "column": 342, "offset": 5597 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 114, "column": 3, "offset": 5258 }, "end": { "line": 114, "column": 343, "offset": 5598 } }
                            }
                        ],
                        "position": { "start": { "line": 114, "column": 3, "offset": 5258 }, "end": { "line": 114, "column": 343, "offset": 5598 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 114, "column": 1, "offset": 5256 }, "end": { "line": 114, "column": 343, "offset": 5598 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "ul",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "strong",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The best-case complexity: when the data looks the best",
                                        "position": {
                                            "start": { "line": 116, "column": 7, "offset": 5606 },
                                            "end": { "line": 116, "column": 61, "offset": 5660 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 116, "column": 5, "offset": 5604 }, "end": { "line": 116, "column": 63, "offset": 5662 } }
                            }
                        ],
                        "position": { "start": { "line": 116, "column": 1, "offset": 5600 }, "end": { "line": 117, "column": 1, "offset": 5663 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "strong",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The worst-case complexity: when the data looks the worst",
                                        "position": {
                                            "start": { "line": 118, "column": 7, "offset": 5670 },
                                            "end": { "line": 118, "column": 63, "offset": 5726 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 118, "column": 5, "offset": 5668 }, "end": { "line": 118, "column": 65, "offset": 5728 } }
                            }
                        ],
                        "position": { "start": { "line": 118, "column": 1, "offset": 5664 }, "end": { "line": 119, "column": 1, "offset": 5729 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "strong",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The average-case complexity: when the data looks average",
                                        "position": {
                                            "start": { "line": 120, "column": 7, "offset": 5736 },
                                            "end": { "line": 120, "column": 63, "offset": 5792 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 120, "column": 5, "offset": 5734 }, "end": { "line": 120, "column": 65, "offset": 5794 } }
                            }
                        ],
                        "position": { "start": { "line": 120, "column": 1, "offset": 5730 }, "end": { "line": 120, "column": 65, "offset": 5794 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 116, "column": 1, "offset": 5600 }, "end": { "line": 120, "column": 65, "offset": 5794 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Big O notation",
                        "position": { "start": { "line": 122, "column": 4, "offset": 5799 }, "end": { "line": 122, "column": 18, "offset": 5813 } }
                    }
                ],
                "position": { "start": { "line": 122, "column": 1, "offset": 5796 }, "end": { "line": 122, "column": 18, "offset": 5813 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The complexity is usually expressed with the Big O notation. The wikipedia page about this subject is pretty complex but you can find here a good summary of the different complexity for the most famous data structures and sorting algorithms.",
                        "position": { "start": { "line": 124, "column": 1, "offset": 5815 }, "end": { "line": 124, "column": 242, "offset": 6056 } }
                    }
                ],
                "position": { "start": { "line": 124, "column": 1, "offset": 5815 }, "end": { "line": 124, "column": 242, "offset": 6056 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The Array data structure",
                        "position": { "start": { "line": 126, "column": 4, "offset": 6061 }, "end": { "line": 126, "column": 28, "offset": 6085 } }
                    }
                ],
                "position": { "start": { "line": 126, "column": 1, "offset": 6058 }, "end": { "line": 126, "column": 28, "offset": 6085 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://cdn-images-1.medium.com/max/2000/0*Qk3UYgeqXamRrFLR.gif", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 128, "column": 1, "offset": 6087 }, "end": { "line": 128, "column": 69, "offset": 6155 } }
                    }
                ],
                "position": { "start": { "line": 128, "column": 1, "offset": 6087 }, "end": { "line": 128, "column": 69, "offset": 6155 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Definition",
                        "position": { "start": { "line": 130, "column": 4, "offset": 6160 }, "end": { "line": 130, "column": 14, "offset": 6170 } }
                    }
                ],
                "position": { "start": { "line": 130, "column": 1, "offset": 6157 }, "end": { "line": 130, "column": 14, "offset": 6170 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "An Array data structure, or simply an Array, is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. The simplest type of data structure is a linear array, also called one-dimensional array. From Wikipedia",
                        "position": { "start": { "line": 132, "column": 1, "offset": 6172 }, "end": { "line": 132, "column": 284, "offset": 6455 } }
                    }
                ],
                "position": { "start": { "line": 132, "column": 1, "offset": 6172 }, "end": { "line": 132, "column": 284, "offset": 6455 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Arrays are among the oldest and most important data structures and are used by every program. They are also used to implement many other data structures.",
                        "position": { "start": { "line": 134, "column": 1, "offset": 6457 }, "end": { "line": 134, "column": 154, "offset": 6610 } }
                    }
                ],
                "position": { "start": { "line": 134, "column": 1, "offset": 6457 }, "end": { "line": 134, "column": 154, "offset": 6610 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Complexity",
                                "position": { "start": { "line": 136, "column": 2, "offset": 6613 }, "end": { "line": 136, "column": 12, "offset": 6623 } }
                            }
                        ],
                        "position": { "start": { "line": 136, "column": 1, "offset": 6612 }, "end": { "line": 136, "column": 13, "offset": 6624 } }
                    },
                    {
                        "type": "text",
                        "value": "\n",
                        "position": { "start": { "line": 136, "column": 13, "offset": 6624 }, "end": { "line": 137, "column": 1, "offset": 6625 } }
                    },
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Average",
                                "position": { "start": { "line": 137, "column": 2, "offset": 6626 }, "end": { "line": 137, "column": 9, "offset": 6633 } }
                            }
                        ],
                        "position": { "start": { "line": 137, "column": 1, "offset": 6625 }, "end": { "line": 137, "column": 10, "offset": 6634 } }
                    },
                    {
                        "type": "text",
                        "value": "\n",
                        "position": { "start": { "line": 137, "column": 10, "offset": 6634 }, "end": { "line": 138, "column": 1, "offset": 6635 } }
                    },
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Access Search Insertion Deletion",
                                "position": { "start": { "line": 138, "column": 2, "offset": 6636 }, "end": { "line": 138, "column": 34, "offset": 6668 } }
                            }
                        ],
                        "position": { "start": { "line": 138, "column": 1, "offset": 6635 }, "end": { "line": 138, "column": 35, "offset": 6669 } }
                    }
                ],
                "position": { "start": { "line": 136, "column": 1, "offset": 6612 }, "end": { "line": 138, "column": 35, "offset": 6669 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "O(1) O(n) O(1) O(n)",
                        "position": { "start": { "line": 140, "column": 1, "offset": 6671 }, "end": { "line": 140, "column": 20, "offset": 6690 } }
                    }
                ],
                "position": { "start": { "line": 140, "column": 1, "offset": 6671 }, "end": { "line": 140, "column": 20, "offset": 6690 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [
                            {
                                "type": "text",
                                "value": "class ArrayADT {\n    constructor() {\n        this.array = [];\n    }\n\n    add(data) {\n        this.array.push(data);\n    }\n\n    remove(data) {\n        this.array = this.array.filter((current) => current !== data);\n    }\n\n    search(data) {\n        const foundIndex = this.array.indexOf(data);\n        if (foundIndex === -1) {\n            return foundIndex;\n        }\n\n        return null;\n    }\n\n    getAtIndex(index) {\n        return this.array[index];\n    }\n\n    length() {\n        return this.array.length;\n    }\n\n    print() {\n        console.log(this.array.join(' '));\n    }\n}\n\nconst array = new ArrayADT();\nconsole.log('const array = new ArrayADT();: ', array);\nconsole.log('-------------------------------');\n\nconsole.log('array.add(1): ', array.add(1));\narray.add(3);\narray.add(4);\nconsole.log('array.add(2);: ', array.add(2), 'array.add(3);', array.add(3), 'array.add(4); ', array.add(4));\n\nconsole.log('-------------------------------');\narray.print();\nconsole.log('-------------------------------');\n\nconsole.log('search 3 gives index 2:', array.search(3));\nconsole.log('-------------------------------');\n\nconsole.log('getAtIndex 2 gives 3:', array.getAtIndex(2));\nconsole.log('-------------------------------');\n\nconsole.log('length is 4:', array.length());\nconsole.log('-------------------------------');\n\narray.remove(3);\narray.print();\nconsole.log('-------------------------------');\n\narray.add(5);\narray.add(5);\narray.print();\nconsole.log('-------------------------------');\n\narray.remove(5);\narray.print();\nconsole.log('-------------------------------');\n/*\n     ~ final : (master) node 01-array.js \n    const array = new ArrayADT();:  ArrayADT { array: [] }\n    -------------------------------\n    array.add(1):  undefined\n    array.add(2);:  undefined array.add(3); undefined array.add(4);  undefined\n    -------------------------------\n    1 3 4 2 3 4\n    -------------------------------\n    search 3 gives index 2: null\n    -------------------------------\n    getAtIndex 2 gives 3: 4\n    -------------------------------\n    length is 4: 6\n    -------------------------------\n    1 4 2 4\n    -------------------------------\n    1 4 2 4 5 5\n    -------------------------------\n    1 4 2 4\n    -------------------------------\n     ~ final : (master) \n     */\n"
                            }
                        ],
                        "position": { "start": { "line": 142, "column": 1, "offset": 6692 }, "end": { "line": 235, "column": 4, "offset": 8978 } }
                    }
                ],
                "position": { "start": { "line": 142, "column": 1, "offset": 6692 }, "end": { "line": 235, "column": 4, "offset": 8978 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://cdn-images-1.medium.com/max/2000/1*-BJ2hU-CZO2kuzu4x5a53g.png", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 237, "column": 1, "offset": 8980 }, "end": { "line": 237, "column": 75, "offset": 9054 } }
                    }
                ],
                "position": { "start": { "line": 237, "column": 1, "offset": 8980 }, "end": { "line": 237, "column": 75, "offset": 9054 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "indexvalue0 â€¦ this is the first value, stored at zero position",
                        "position": { "start": { "line": 239, "column": 1, "offset": 9056 }, "end": { "line": 239, "column": 63, "offset": 9118 } }
                    }
                ],
                "position": { "start": { "line": 239, "column": 1, "offset": 9056 }, "end": { "line": 239, "column": 63, "offset": 9118 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "ol",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "The index of an array ",
                                "position": { "start": { "line": 241, "column": 4, "offset": 9123 }, "end": { "line": 241, "column": 26, "offset": 9145 } }
                            },
                            {
                                "type": "element",
                                "tagName": "strong",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "runs in sequence",
                                        "position": {
                                            "start": { "line": 241, "column": 28, "offset": 9147 },
                                            "end": { "line": 241, "column": 44, "offset": 9163 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 241, "column": 26, "offset": 9145 }, "end": { "line": 241, "column": 46, "offset": 9165 } }
                            }
                        ],
                        "position": { "start": { "line": 241, "column": 1, "offset": 9120 }, "end": { "line": 242, "column": 1, "offset": 9166 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "This could be useful for storing data that are required to be ordered, such as rankings or queues",
                                "position": { "start": { "line": 243, "column": 4, "offset": 9170 }, "end": { "line": 243, "column": 101, "offset": 9267 } }
                            }
                        ],
                        "position": { "start": { "line": 243, "column": 1, "offset": 9167 }, "end": { "line": 244, "column": 1, "offset": 9268 } }
                    },
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "In JavaScript, array's value could be mixed; meaning value of each index could be of different data, be it String, Number or even Objects",
                                "position": { "start": { "line": 245, "column": 4, "offset": 9272 }, "end": { "line": 245, "column": 141, "offset": 9409 } }
                            }
                        ],
                        "position": { "start": { "line": 245, "column": 1, "offset": 9269 }, "end": { "line": 245, "column": 141, "offset": 9409 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 241, "column": 1, "offset": 9120 }, "end": { "line": 245, "column": 141, "offset": 9409 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [
                            {
                                "type": "text",
                                "value": "    // 1. Creating Arrays\n    let firstArray = [\"a\",\"b\",\"c\"];\n    let secondArray = [\"d\",\"e\",\"f\"];\n\n    // 2. Access an Array Item\n    console.log(firstArray[0]); // Results: \"a\"\n\n    // 3. Loop over an Array\n    firstArray.forEach(function(item, index, array){\n        console.log(item, index);\n    });\n    // Results:\n    // a 0\n    // b 1\n    // c 2\n\n    // 4. Add new item to END of array\n    secondArray.push('g');\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\", \"g\"]\n\n    // 5. Remove item from END of array\n    secondArray.pop();\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\"]\n\n    // 6. Remove item from FRONT of array\n    secondArray.shift();\n    console.log(secondArray);\n    // Results: [\"e\",\"f\"]\n\n    // 7. Add item to FRONT of array\n    secondArray.unshift(\"d\");\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\"]\n\n    // 8. Find INDEX of an item in array\n    let position = secondArray.indexOf('f');\n    // Results: 2\n\n    // 9. Remove Item by Index Position\n    secondArray.splice(position, 1);\n    console.log(secondArray);\n    // Note, the second argument, in this case \"1\",\n    // represent the number of array elements to be removed\n    // Results:  [\"d\",\"e\"]\n\n    // 10. Copy an Array\n    let shallowCopy = secondArray.slice();\n    console.log(secondArray);\n    console.log(shallowCopy);\n    // Results: ShallowCopy === [\"d\",\"e\"]\n\n    // 11. JavaScript properties that BEGIN with a digit MUST be accessed using bracket notation\n    renderer.3d.setTexture(model, 'character.png');     // a syntax error\n    renderer['3d'].setTexture(model, 'character.png');  // works properly\n\n\n    // 12. Combine two Arrays\n    let thirdArray = firstArray.concat(secondArray);\n    console.log(thirdArray);\n    // [\"a\",\"b\",\"c\", \"d\", \"e\"];\n\n    // 13. Combine all Array elements into a string\n    console.log(thirdArray.join()); // Results: a,b,c,d,e\n    console.log(thirdArray.join('')); // Results: abcde\n    console.log(thirdArray.join('-')); // Results: a-b-c-d-e\n\n    // 14. Reversing an Array (in place, i.e. destructive)\n    console.log(thirdArray.reverse()); // [\"e\", \"d\", \"c\", \"b\", \"a\"]\n\n    // 15. sort\n    let unsortedArray = [\"Alphabet\", \"Zoo\", \"Products\", \"Computer Science\", \"Computer\"];\n    console.log(unsortedArray.sort());\n    // Results: [\"Alphabet\", \"Computer\", \"Computer Science\", \"Products\", \"Zoo\" ]\n"
                            }
                        ],
                        "position": { "start": { "line": 247, "column": 1, "offset": 9411 }, "end": { "line": 323, "column": 4, "offset": 11778 } }
                    }
                ],
                "position": { "start": { "line": 247, "column": 1, "offset": 9411 }, "end": { "line": 323, "column": 4, "offset": 11778 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "2. Objects",
                        "position": { "start": { "line": 325, "column": 4, "offset": 11783 }, "end": { "line": 325, "column": 14, "offset": 11793 } }
                    }
                ],
                "position": { "start": { "line": 325, "column": 1, "offset": 11780 }, "end": { "line": 325, "column": 14, "offset": 11793 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Think of objects as a logical grouping of a bunch of properties.",
                        "position": { "start": { "line": 327, "column": 1, "offset": 11795 }, "end": { "line": 327, "column": 65, "offset": 11859 } }
                    }
                ],
                "position": { "start": { "line": 327, "column": 1, "offset": 11795 }, "end": { "line": 327, "column": 65, "offset": 11859 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Properties could be some variable that it's storing or some methods that it's using.",
                        "position": { "start": { "line": 329, "column": 1, "offset": 11861 }, "end": { "line": 329, "column": 85, "offset": 11945 } }
                    }
                ],
                "position": { "start": { "line": 329, "column": 1, "offset": 11861 }, "end": { "line": 329, "column": 85, "offset": 11945 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "I also visualize an object as a table.",
                        "position": { "start": { "line": 331, "column": 1, "offset": 11947 }, "end": { "line": 331, "column": 39, "offset": 11985 } }
                    }
                ],
                "position": { "start": { "line": 331, "column": 1, "offset": 11947 }, "end": { "line": 331, "column": 39, "offset": 11985 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The main difference is that object's \"index\" need not be numbers and is not necessarily sequenced.",
                        "position": { "start": { "line": 333, "column": 1, "offset": 11987 }, "end": { "line": 333, "column": 99, "offset": 12085 } }
                    }
                ],
                "position": { "start": { "line": 333, "column": 1, "offset": 11987 }, "end": { "line": 333, "column": 99, "offset": 12085 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://cdn-images-1.medium.com/max/2572/1*KVZkD2zrgEa_47igW8Hq8g.png", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 335, "column": 1, "offset": 12087 }, "end": { "line": 335, "column": 75, "offset": 12161 } }
                    }
                ],
                "position": { "start": { "line": 335, "column": 1, "offset": 12087 }, "end": { "line": 335, "column": 75, "offset": 12161 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [
                            {
                                "type": "text",
                                "value": "// 16. Creating an Object\n\nlet newObj = {\n    name: \"I'm an object\",\n    values: [1, 10, 11, 20],\n    others: '',\n    '1property': 'example of property name starting with digit'\n};\n\n// 17. Figure out what keys/properties are in an object\nconsole.log(Object.keys(newObj));\n// Results: [ 'name', 'values', 'others', '1property' ]\n\n// 18. Show all values stored in the object\nconsole.log(Object.values(newObj));\n\n// Results:\n// [ 'I\\'m an object',\n//   [ 1, 10, 11, 20 ],\n//   '',\n//   'example of property name starting with digit' ]\n\n// 19. Show all key and values of the object\nfor (let [key, value] of Object.entries(newObj)) {\n    console.log(`${key}: ${value}`);\n}\n// Results:\n// name: I'm an object\n// values: 1,10,11,20\n// others:\n// 1property: example of property name starting with digit\n\n// 20. Accessing Object's Properties\n// Two different ways to access properties, both produce same results\nconsole.log(newObj.name);\nconsole.log(newObj['name']);\n\n// But if the property name starts with a digit,\n// we CANNOT use dot notation\nconsole.log(newObj['1property']);\n\n// 21. Adding a Method to an Object\nnewObj.helloWorld = function () {\n    console.log('Hello World from inside an object!');\n};\n\n// 22. Invoking an Object's Method\nnewObj.helloWorld();\n"
                            }
                        ],
                        "position": { "start": { "line": 337, "column": 1, "offset": 12163 }, "end": { "line": 386, "column": 4, "offset": 13430 } }
                    }
                ],
                "position": { "start": { "line": 337, "column": 1, "offset": 12163 }, "end": { "line": 386, "column": 4, "offset": 13430 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The Hash Table",
                        "position": { "start": { "line": 388, "column": 4, "offset": 13435 }, "end": { "line": 388, "column": 18, "offset": 13449 } }
                    }
                ],
                "position": { "start": { "line": 388, "column": 1, "offset": 13432 }, "end": { "line": 388, "column": 18, "offset": 13449 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://cdn-images-1.medium.com/max/2000/0*avbxLAFocSV6vsl5.gif", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 390, "column": 1, "offset": 13451 }, "end": { "line": 390, "column": 69, "offset": 13519 } }
                    }
                ],
                "position": { "start": { "line": 390, "column": 1, "offset": 13451 }, "end": { "line": 390, "column": 69, "offset": 13519 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://cdn-images-1.medium.com/max/2048/0*3GJiRoLyEoZ_aIlO", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 392, "column": 1, "offset": 13521 }, "end": { "line": 392, "column": 65, "offset": 13585 } }
                    }
                ],
                "position": { "start": { "line": 392, "column": 1, "offset": 13521 }, "end": { "line": 392, "column": 65, "offset": 13585 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": { "start": { "line": 394, "column": 5, "offset": 13591 }, "end": { "line": 394, "column": 15, "offset": 13601 } }
                            }
                        ],
                        "position": { "start": { "line": 394, "column": 4, "offset": 13590 }, "end": { "line": 394, "column": 16, "offset": 13602 } }
                    }
                ],
                "position": { "start": { "line": 394, "column": 1, "offset": 13587 }, "end": { "line": 394, "column": 16, "offset": 13602 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Hash Table (Hash Map) is a data structure used to implement an associative array, a structure that can map keys to values. A Hash Table uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. From Wikipedia",
                                        "position": {
                                            "start": { "line": 396, "column": 4, "offset": 13607 },
                                            "end": { "line": 396, "column": 275, "offset": 13878 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 396, "column": 3, "offset": 13606 }, "end": { "line": 396, "column": 276, "offset": 13879 } }
                            }
                        ],
                        "position": { "start": { "line": 396, "column": 3, "offset": 13606 }, "end": { "line": 396, "column": 276, "offset": 13879 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 396, "column": 1, "offset": 13604 }, "end": { "line": 396, "column": 276, "offset": 13879 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Hash Tables are considered the more efficient data structure for lookup and for this reason, they are widely used.",
                        "position": { "start": { "line": 398, "column": 1, "offset": 13881 }, "end": { "line": 398, "column": 115, "offset": 13995 } }
                    }
                ],
                "position": { "start": { "line": 398, "column": 1, "offset": 13881 }, "end": { "line": 398, "column": 115, "offset": 13995 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Complexity\nAverage\nAccess Search Insertion Deletion",
                        "position": { "start": { "line": 400, "column": 1, "offset": 13997 }, "end": { "line": 402, "column": 33, "offset": 14048 } }
                    }
                ],
                "position": { "start": { "line": 400, "column": 1, "offset": 13997 }, "end": { "line": 402, "column": 33, "offset": 14048 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "ul",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            { "type": "text", "value": "\n" },
                            {
                                "type": "element",
                                "tagName": "p",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "O(1) O(1) O(1)",
                                        "position": {
                                            "start": { "line": 404, "column": 5, "offset": 14054 },
                                            "end": { "line": 404, "column": 19, "offset": 14068 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 404, "column": 5, "offset": 14054 }, "end": { "line": 404, "column": 19, "offset": 14068 } }
                            },
                            { "type": "text", "value": "\n" },
                            {
                                "type": "element",
                                "tagName": "blockquote",
                                "properties": {},
                                "children": [
                                    { "type": "text", "value": "\n" },
                                    {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                            {
                                                "type": "element",
                                                "tagName": "em",
                                                "properties": {},
                                                "children": [
                                                    {
                                                        "type": "text",
                                                        "value": "The code",
                                                        "position": {
                                                            "start": { "line": 405, "column": 8, "offset": 14076 },
                                                            "end": { "line": 405, "column": 16, "offset": 14084 }
                                                        }
                                                    }
                                                ],
                                                "position": {
                                                    "start": { "line": 405, "column": 7, "offset": 14075 },
                                                    "end": { "line": 405, "column": 17, "offset": 14085 }
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 405, "column": 7, "offset": 14075 },
                                            "end": { "line": 405, "column": 17, "offset": 14085 }
                                        }
                                    },
                                    { "type": "text", "value": "\n" }
                                ],
                                "position": { "start": { "line": 405, "column": 5, "offset": 14073 }, "end": { "line": 405, "column": 17, "offset": 14085 } }
                            },
                            { "type": "text", "value": "\n" }
                        ],
                        "position": { "start": { "line": 404, "column": 1, "offset": 14050 }, "end": { "line": 405, "column": 17, "offset": 14085 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 404, "column": 1, "offset": 14050 }, "end": { "line": 405, "column": 17, "offset": 14085 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Note, here I am storing another object for every hash in my Hash Table.",
                        "position": { "start": { "line": 407, "column": 1, "offset": 14087 }, "end": { "line": 407, "column": 72, "offset": 14158 } }
                    }
                ],
                "position": { "start": { "line": 407, "column": 1, "offset": 14087 }, "end": { "line": 407, "column": 72, "offset": 14158 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [
                            {
                                "type": "text",
                                "value": "class HashTable {\n    constructor(size) {\n        this.values = {};\n        this.numberOfValues = 0;\n        this.size = size;\n    }\n    add(key, value) {\n        let hash = this.calculateHash(key);\n        if (!this.values.hasOwnProperty(hash)) {\n            this.values[hash] = {};\n        }\n        if (!this.values[hash].hasOwnProperty(key)) {\n            this.numberOfValues++;\n        }\n        this.values[hash][key] = value;\n    }\n    remove(key) {\n        let hash = this.calculateHash(key);\n        if (this.values.hasOwnProperty(hash) && this.values[hash].hasOwnProperty(key)) {\n            delete this.values[hash][key];\n            this.numberOfValues--;\n        }\n    }\n    calculateHash(key) {\n        return key.toString().length % this.size;\n    }\n    search(key) {\n        let hash = this.calculateHash(key);\n        if (this.values.hasOwnProperty(hash) && this.values[hash].hasOwnProperty(key)) {\n            return this.values[hash][key];\n        } else {\n            return null;\n        }\n    }\n    length() {\n        return this.numberOfValues;\n    }\n    print() {\n        let string = '';\n        for (let value in this.values) {\n            for (let key in this.values[value]) {\n                string += this.values[value][key] + ' ';\n            }\n        }\n        console.log(string.trim());\n    }\n}\nlet hashTable = new HashTable(3);\nhashTable.add('first', 1);\nhashTable.add('second', 2);\nhashTable.add('third', 3);\nhashTable.add('fourth', 4);\nhashTable.add('fifth', 5);\nhashTable.print(); // => 2 4 1 3 5\nconsole.log('length gives 5:', hashTable.length()); // => 5\nconsole.log('search second gives 2:', hashTable.search('second')); // => 2\nhashTable.remove('fourth');\nhashTable.remove('first');\nhashTable.print(); // => 2 3 5\nconsole.log('length gives 3:', hashTable.length()); // => 3\n/*\n       ~ js-files : (master) node hash.js \n    2 4 1 3 5\n    length gives 5: 5\n    search second gives 2: 2\n    2 3 5\n    length gives 3: 3\n    */\n"
                            }
                        ],
                        "position": { "start": { "line": 409, "column": 1, "offset": 14160 }, "end": { "line": 478, "column": 4, "offset": 16135 } }
                    }
                ],
                "position": { "start": { "line": 409, "column": 1, "offset": 14160 }, "end": { "line": 478, "column": 4, "offset": 16135 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The Set",
                        "position": { "start": { "line": 480, "column": 4, "offset": 16140 }, "end": { "line": 480, "column": 11, "offset": 16147 } }
                    }
                ],
                "position": { "start": { "line": 480, "column": 1, "offset": 16137 }, "end": { "line": 480, "column": 11, "offset": 16147 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Sets",
                        "position": { "start": { "line": 482, "column": 4, "offset": 16152 }, "end": { "line": 482, "column": 8, "offset": 16156 } }
                    }
                ],
                "position": { "start": { "line": 482, "column": 1, "offset": 16149 }, "end": { "line": 482, "column": 8, "offset": 16156 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Sets are pretty much what it sounds like. It's the same intuition as Set in Mathematics. I visualize Sets as Venn Diagrams.",
                        "position": { "start": { "line": 484, "column": 1, "offset": 16158 }, "end": { "line": 484, "column": 124, "offset": 16281 } }
                    }
                ],
                "position": { "start": { "line": 484, "column": 1, "offset": 16158 }, "end": { "line": 484, "column": 124, "offset": 16281 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [
                            {
                                "type": "text",
                                "value": "// 23. Creating a new Set\nlet newSet = new Set();\n\n// 24. Adding new elements to a set\nnewSet.add(1); // Set[1]\nnewSet.add('text'); // Set[1, \"text\"]\n\n// 25. Check if element is in set\nnewSet.has(1); // true\n\n// 24. Check size of set\nconsole.log(newSet.size); // Results: 2\n\n// 26. Delete element from set\nnewSet.delete(1); // Set[\"text\"]\n\n// 27. Set Operations: isSuperSet\nfunction isSuperset(set, subset) {\n    for (let elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n// 28. Set Operations: union\nfunction union(setA, setB) {\n    let _union = new Set(setA);\n    for (let elem of setB) {\n        _union.add(elem);\n    }\n    return _union;\n}\n\n// 29. Set Operations: intersection\nfunction intersection(setA, setB) {\n    let _intersection = new Set();\n    for (let elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n// 30. Set Operations: symmetricDifference\nfunction symmetricDifference(setA, setB) {\n    let _difference = new Set(setA);\n    for (let elem of setB) {\n        if (_difference.has(elem)) {\n            _difference.delete(elem);\n        } else {\n            _difference.add(elem);\n        }\n    }\n    return _difference;\n}\n// 31. Set Operations: difference\nfunction difference(setA, setB) {\n    let _difference = new Set(setA);\n    for (let elem of setB) {\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n\n// Examples\nlet setA = new Set([1, 2, 3, 4]);\nlet setB = new Set([2, 3]);\nlet setC = new Set([3, 4, 5, 6]);\n\nconsole.log(isSuperset(setA, setB)); // => true\nconsole.log(union(setA, setC)); // => Set [1, 2, 3, 4, 5, 6]\nconsole.log(intersection(setA, setC)); // => Set [3, 4]\nconsole.log(symmetricDifference(setA, setC)); // => Set [1, 2, 5, 6]\nconsole.log(difference(setA, setC)); // => Set [1, 2]\n"
                            }
                        ],
                        "position": { "start": { "line": 486, "column": 1, "offset": 16283 }, "end": { "line": 562, "column": 4, "offset": 18162 } }
                    }
                ],
                "position": { "start": { "line": 486, "column": 1, "offset": 16283 }, "end": { "line": 562, "column": 4, "offset": 18162 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://cdn-images-1.medium.com/max/2000/0*gOE33ANZP2ujbjIG", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 564, "column": 1, "offset": 18164 }, "end": { "line": 564, "column": 65, "offset": 18228 } }
                    }
                ],
                "position": { "start": { "line": 564, "column": 1, "offset": 18164 }, "end": { "line": 564, "column": 65, "offset": 18228 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": { "start": { "line": 566, "column": 5, "offset": 18234 }, "end": { "line": 566, "column": 15, "offset": 18244 } }
                            }
                        ],
                        "position": { "start": { "line": 566, "column": 4, "offset": 18233 }, "end": { "line": 566, "column": 16, "offset": 18245 } }
                    }
                ],
                "position": { "start": { "line": 566, "column": 1, "offset": 18230 }, "end": { "line": 566, "column": 16, "offset": 18245 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Set is an abstract data type that can store certain values, without any particular order, and no repeated values. It is a computer implementation of the mathematical concept of a finite Set. From Wikipedia",
                                        "position": {
                                            "start": { "line": 568, "column": 4, "offset": 18250 },
                                            "end": { "line": 568, "column": 211, "offset": 18457 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 568, "column": 3, "offset": 18249 }, "end": { "line": 568, "column": 212, "offset": 18458 } }
                            }
                        ],
                        "position": { "start": { "line": 568, "column": 3, "offset": 18249 }, "end": { "line": 568, "column": 212, "offset": 18458 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 568, "column": 1, "offset": 18247 }, "end": { "line": 568, "column": 212, "offset": 18458 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The Set data structure is usually used to test whether elements belong to set of values. Rather then only containing elements, Sets are more used to perform operations on multiple values at once with methods such as union, intersect, etcâ€¦",
                        "position": { "start": { "line": 570, "column": 1, "offset": 18460 }, "end": { "line": 570, "column": 239, "offset": 18698 } }
                    }
                ],
                "position": { "start": { "line": 570, "column": 1, "offset": 18460 }, "end": { "line": 570, "column": 239, "offset": 18698 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Complexity\nAverage\nAccess Search Insertion Deletion",
                        "position": { "start": { "line": 572, "column": 1, "offset": 18700 }, "end": { "line": 574, "column": 33, "offset": 18751 } }
                    }
                ],
                "position": { "start": { "line": 572, "column": 1, "offset": 18700 }, "end": { "line": 574, "column": 33, "offset": 18751 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "ul",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "li",
                        "properties": {},
                        "children": [
                            { "type": "text", "value": "\n" },
                            {
                                "type": "element",
                                "tagName": "p",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "O(n) O(n) O(n)",
                                        "position": {
                                            "start": { "line": 576, "column": 5, "offset": 18757 },
                                            "end": { "line": 576, "column": 19, "offset": 18771 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 576, "column": 5, "offset": 18757 }, "end": { "line": 576, "column": 19, "offset": 18771 } }
                            },
                            { "type": "text", "value": "\n" },
                            {
                                "type": "element",
                                "tagName": "blockquote",
                                "properties": {},
                                "children": [
                                    { "type": "text", "value": "\n" },
                                    {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                            {
                                                "type": "element",
                                                "tagName": "em",
                                                "properties": {},
                                                "children": [
                                                    {
                                                        "type": "text",
                                                        "value": "The code",
                                                        "position": {
                                                            "start": { "line": 577, "column": 8, "offset": 18779 },
                                                            "end": { "line": 577, "column": 16, "offset": 18787 }
                                                        }
                                                    }
                                                ],
                                                "position": {
                                                    "start": { "line": 577, "column": 7, "offset": 18778 },
                                                    "end": { "line": 577, "column": 17, "offset": 18788 }
                                                }
                                            }
                                        ],
                                        "position": {
                                            "start": { "line": 577, "column": 7, "offset": 18778 },
                                            "end": { "line": 577, "column": 17, "offset": 18788 }
                                        }
                                    },
                                    { "type": "text", "value": "\n" }
                                ],
                                "position": { "start": { "line": 577, "column": 5, "offset": 18776 }, "end": { "line": 577, "column": 17, "offset": 18788 } }
                            },
                            { "type": "text", "value": "\n" }
                        ],
                        "position": { "start": { "line": 576, "column": 1, "offset": 18753 }, "end": { "line": 577, "column": 17, "offset": 18788 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 576, "column": 1, "offset": 18753 }, "end": { "line": 577, "column": 17, "offset": 18788 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [
                            {
                                "type": "text",
                                "value": "function Set() {\n    this.values = [];\n    this.numberOfValues = 0;\n}\n\nSet.prototype.add = function (value) {\n    if (!~this.values.indexOf(value)) {\n        this.values.push(value);\n        this.numberOfValues++;\n    }\n};\nSet.prototype.remove = function (value) {\n    let index = this.values.indexOf(value);\n    if (~index) {\n        this.values.splice(index, 1);\n        this.numberOfValues--;\n    }\n};\nSet.prototype.contains = function (value) {\n    return this.values.indexOf(value) !== -1;\n};\nSet.prototype.union = function (set) {\n    let newSet = new Set();\n    set.values.forEach(function (value) {\n        newSet.add(value);\n    });\n    this.values.forEach(function (value) {\n        newSet.add(value);\n    });\n    return newSet;\n};\nSet.prototype.intersect = function (set) {\n    let newSet = new Set();\n    this.values.forEach(function (value) {\n        if (set.contains(value)) {\n            newSet.add(value);\n        }\n    });\n    return newSet;\n};\nSet.prototype.difference = function (set) {\n    let newSet = new Set();\n    this.values.forEach(function (value) {\n        if (!set.contains(value)) {\n            newSet.add(value);\n        }\n    });\n    return newSet;\n};\nSet.prototype.isSubset = function (set) {\n    return set.values.every(function (value) {\n        return this.contains(value);\n    }, this);\n};\nSet.prototype.length = function () {\n    return this.numberOfValues;\n};\nSet.prototype.print = function () {\n    console.log(this.values.join(' '));\n};\n\nlet set = new Set();\nset.add(1);\nset.add(2);\nset.add(3);\nset.add(4);\nset.print(); // => 1 2 3 4\nset.remove(3);\nset.print(); // => 1 2 4\nconsole.log('contains 4 is true:', set.contains(4)); // => true\nconsole.log('contains 3 is false:', set.contains(3)); // => false\nconsole.log('---');\nlet set1 = new Set();\nset1.add(1);\nset1.add(2);\nlet set2 = new Set();\nset2.add(2);\nset2.add(3);\nlet set3 = set2.union(set1);\nset3.print(); // => 1 2 3\nlet set4 = set2.intersect(set1);\nset4.print(); // => 2\nlet set5 = set.difference(set3); // 1 2 4 diff 1 2 3\nset5.print(); // => 4\nlet set6 = set3.difference(set); // 1 2 3 diff 1 2 4\nset6.print(); // => 3\nconsole.log('set1 subset of set is true:', set.isSubset(set1)); // => true\nconsole.log('set2 subset of set is false:', set.isSubset(set2)); // => false\nconsole.log('set1 length gives 2:', set1.length()); // => 2\nconsole.log('set3 length gives 3:', set3.length()); // => 3\n"
                            }
                        ],
                        "position": { "start": { "line": 579, "column": 1, "offset": 18790 }, "end": { "line": 670, "column": 4, "offset": 21192 } }
                    }
                ],
                "position": { "start": { "line": 579, "column": 1, "offset": 18790 }, "end": { "line": 670, "column": 4, "offset": 21192 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The Singly Linked List",
                        "position": { "start": { "line": 672, "column": 4, "offset": 21197 }, "end": { "line": 672, "column": 26, "offset": 21219 } }
                    }
                ],
                "position": { "start": { "line": 672, "column": 1, "offset": 21194 }, "end": { "line": 672, "column": 26, "offset": 21219 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://cdn-images-1.medium.com/max/2048/0*fLs64rV-Xq19aVCA.gif", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 674, "column": 1, "offset": 21221 }, "end": { "line": 674, "column": 69, "offset": 21289 } }
                    }
                ],
                "position": { "start": { "line": 674, "column": 1, "offset": 21221 }, "end": { "line": 674, "column": 69, "offset": 21289 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": { "start": { "line": 676, "column": 5, "offset": 21295 }, "end": { "line": 676, "column": 15, "offset": 21305 } }
                            }
                        ],
                        "position": { "start": { "line": 676, "column": 4, "offset": 21294 }, "end": { "line": 676, "column": 16, "offset": 21306 } }
                    }
                ],
                "position": { "start": { "line": 676, "column": 1, "offset": 21291 }, "end": { "line": 676, "column": 16, "offset": 21306 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Singly Linked List is a linear collection of data elements, called nodes pointing to the next node by means of pointer. It is a data structure consisting of a group of nodes which together represent a sequence. Under the simplest form, each node is composed of data and a reference (in other words, a link) to the next node in the sequence.",
                                        "position": {
                                            "start": { "line": 678, "column": 4, "offset": 21311 },
                                            "end": { "line": 678, "column": 346, "offset": 21653 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 678, "column": 3, "offset": 21310 }, "end": { "line": 678, "column": 347, "offset": 21654 } }
                            }
                        ],
                        "position": { "start": { "line": 678, "column": 3, "offset": 21310 }, "end": { "line": 678, "column": 347, "offset": 21654 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 678, "column": 1, "offset": 21308 }, "end": { "line": 678, "column": 347, "offset": 21654 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Linked Lists are among the simplest and most common data structures because it allows for efficient insertion or removal of elements from any position in the sequence.",
                        "position": { "start": { "line": 680, "column": 1, "offset": 21656 }, "end": { "line": 680, "column": 168, "offset": 21823 } }
                    }
                ],
                "position": { "start": { "line": 680, "column": 1, "offset": 21656 }, "end": { "line": 680, "column": 168, "offset": 21823 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)",
                        "position": { "start": { "line": 682, "column": 1, "offset": 21825 }, "end": { "line": 685, "column": 20, "offset": 21896 } }
                    }
                ],
                "position": { "start": { "line": 682, "column": 1, "offset": 21825 }, "end": { "line": 685, "column": 20, "offset": 21896 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The code",
                                        "position": {
                                            "start": { "line": 687, "column": 4, "offset": 21901 },
                                            "end": { "line": 687, "column": 12, "offset": 21909 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 687, "column": 3, "offset": 21900 }, "end": { "line": 687, "column": 13, "offset": 21910 } }
                            }
                        ],
                        "position": { "start": { "line": 687, "column": 3, "offset": 21900 }, "end": { "line": 687, "column": 13, "offset": 21910 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 687, "column": 1, "offset": 21898 }, "end": { "line": 687, "column": 13, "offset": 21910 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [
                            {
                                "type": "text",
                                "value": "function Node(data) {\n    this.data = data;\n    this.next = null;\n}\n\nfunction SinglyLinkedList() {\n    this.head = null;\n    this.tail = null;\n    this.numberOfValues = 0;\n}\n\nSinglyLinkedList.prototype.add = function (data) {\n    let node = new Node(data);\n    if (!this.head) {\n        this.head = node;\n        this.tail = node;\n    } else {\n        this.tail.next = node;\n        this.tail = node;\n    }\n    this.numberOfValues++;\n};\nSinglyLinkedList.prototype.remove = function (data) {\n    let previous = this.head;\n    let current = this.head;\n    while (current) {\n        if (current.data === data) {\n            if (current === this.head) {\n                this.head = this.head.next;\n            }\n            if (current === this.tail) {\n                this.tail = previous;\n            }\n            previous.next = current.next;\n            this.numberOfValues--;\n        } else {\n            previous = current;\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.insertAfter = function (data, toNodeData) {\n    let current = this.head;\n    while (current) {\n        if (current.data === toNodeData) {\n            let node = new Node(data);\n            if (current === this.tail) {\n                this.tail.next = node;\n                this.tail = node;\n            } else {\n                node.next = current.next;\n                current.next = node;\n            }\n            this.numberOfValues++;\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.traverse = function (fn) {\n    let current = this.head;\n    while (current) {\n        if (fn) {\n            fn(current);\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.length = function () {\n    return this.numberOfValues;\n};\nSinglyLinkedList.prototype.print = function () {\n    let string = '';\n    let current = this.head;\n    while (current) {\n        string += current.data + ' ';\n        current = current.next;\n    }\n    console.log(string.trim());\n};\n\nlet singlyLinkedList = new SinglyLinkedList();\nsinglyLinkedList.print(); // => ''\nsinglyLinkedList.add(1);\nsinglyLinkedList.add(2);\nsinglyLinkedList.add(3);\nsinglyLinkedList.add(4);\nsinglyLinkedList.print(); // => 1 2 3 4\nconsole.log('length is 4:', singlyLinkedList.length()); // => 4\nsinglyLinkedList.remove(3); // remove value\nsinglyLinkedList.print(); // => 1 2 4\nsinglyLinkedList.remove(9); // remove non existing value\nsinglyLinkedList.print(); // => 1 2 4\nsinglyLinkedList.remove(1); // remove head\nsinglyLinkedList.print(); // => 2 4\nsinglyLinkedList.remove(4); // remove tail\nsinglyLinkedList.print(); // => 2\nconsole.log('length is 1:', singlyLinkedList.length()); // => 1\nsinglyLinkedList.add(6);\nsinglyLinkedList.print(); // => 2 6\nsinglyLinkedList.insertAfter(3, 2);\nsinglyLinkedList.print(); // => 2 3 6\nsinglyLinkedList.insertAfter(4, 3);\nsinglyLinkedList.print(); // => 2 3 4 6\nsinglyLinkedList.insertAfter(5, 9); // insertAfter a non existing node\nsinglyLinkedList.print(); // => 2 3 4 6\nsinglyLinkedList.insertAfter(5, 4);\nsinglyLinkedList.insertAfter(7, 6); // insertAfter the tail\nsinglyLinkedList.print(); // => 2 3 4 5 6 7\nsinglyLinkedList.add(8); // add node with normal method\nsinglyLinkedList.print(); // => 2 3 4 5 6 7 8\nconsole.log('length is 7:', singlyLinkedList.length()); // => 7\nsinglyLinkedList.traverse(function (node) {\n    node.data = node.data + 10;\n});\nsinglyLinkedList.print(); // => 12 13 14 15 16 17 18\nsinglyLinkedList.traverse(function (node) {\n    console.log(node.data);\n}); // => 12 13 14 15 16 17 18\nconsole.log('length is 7:', singlyLinkedList.length()); // => 7\n"
                            }
                        ],
                        "position": { "start": { "line": 689, "column": 1, "offset": 21912 }, "end": { "line": 809, "column": 4, "offset": 25545 } }
                    }
                ],
                "position": { "start": { "line": 689, "column": 1, "offset": 21912 }, "end": { "line": 809, "column": 4, "offset": 25545 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The Doubly Linked List",
                        "position": { "start": { "line": 811, "column": 4, "offset": 25550 }, "end": { "line": 811, "column": 26, "offset": 25572 } }
                    }
                ],
                "position": { "start": { "line": 811, "column": 1, "offset": 25547 }, "end": { "line": 811, "column": 26, "offset": 25572 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://cdn-images-1.medium.com/max/2000/0*TQXiR-L_itiG3WP-.gif", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 813, "column": 1, "offset": 25574 }, "end": { "line": 813, "column": 69, "offset": 25642 } }
                    }
                ],
                "position": { "start": { "line": 813, "column": 1, "offset": 25574 }, "end": { "line": 813, "column": 69, "offset": 25642 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": { "start": { "line": 815, "column": 5, "offset": 25648 }, "end": { "line": 815, "column": 15, "offset": 25658 } }
                            }
                        ],
                        "position": { "start": { "line": 815, "column": 4, "offset": 25647 }, "end": { "line": 815, "column": 16, "offset": 25659 } }
                    }
                ],
                "position": { "start": { "line": 815, "column": 1, "offset": 25644 }, "end": { "line": 815, "column": 16, "offset": 25659 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Doubly Linked List is a linked data structure that consists of a set of sequentially linked records called nodes. Each node contains two fields, called links, that are references to the previous and to the next node in the sequence of nodes. From Wikipedia",
                                        "position": {
                                            "start": { "line": 817, "column": 4, "offset": 25664 },
                                            "end": { "line": 817, "column": 262, "offset": 25922 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 817, "column": 3, "offset": 25663 }, "end": { "line": 817, "column": 263, "offset": 25923 } }
                            }
                        ],
                        "position": { "start": { "line": 817, "column": 3, "offset": 25663 }, "end": { "line": 817, "column": 263, "offset": 25923 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 817, "column": 1, "offset": 25661 }, "end": { "line": 817, "column": 263, "offset": 25923 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Having two node links allow traversal in either direction but adding or removing a node in a doubly linked list requires changing more links than the same operations on a Singly Linked List.",
                        "position": { "start": { "line": 819, "column": 1, "offset": 25925 }, "end": { "line": 819, "column": 191, "offset": 26115 } }
                    }
                ],
                "position": { "start": { "line": 819, "column": 1, "offset": 25925 }, "end": { "line": 819, "column": 191, "offset": 26115 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)",
                        "position": { "start": { "line": 821, "column": 1, "offset": 26117 }, "end": { "line": 824, "column": 20, "offset": 26188 } }
                    }
                ],
                "position": { "start": { "line": 821, "column": 1, "offset": 26117 }, "end": { "line": 824, "column": 20, "offset": 26188 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The code",
                                        "position": {
                                            "start": { "line": 826, "column": 4, "offset": 26193 },
                                            "end": { "line": 826, "column": 12, "offset": 26201 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 826, "column": 3, "offset": 26192 }, "end": { "line": 826, "column": 13, "offset": 26202 } }
                            }
                        ],
                        "position": { "start": { "line": 826, "column": 3, "offset": 26192 }, "end": { "line": 826, "column": 13, "offset": 26202 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 826, "column": 1, "offset": 26190 }, "end": { "line": 826, "column": 13, "offset": 26202 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "class Node {\n    constructor(data) {\n        this.data = data;\n        this.previous = null;\n        this.next = null;\n    }\n}\nclass DoublyLinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.numberOfValues = 0;\n    }\n\n    add(data) {\n        let node = new Node(data);\n        if (!this.head) {\n            this.head = node;\n            this.tail = node;\n        } else {\n            node.previous = this.tail;\n            this.tail.next = node;\n            this.tail = node;\n        }\n        this.numberOfValues++;\n    }\n    remove(data) {\n        let current = this.head;\n        while (current) {\n            if (current.data === data) {\n                if (current === this.head && current === this.tail) {\n                    this.head = null;\n                    this.tail = null;\n                } else if (current === this.head) {\n                    this.head = this.head.next;\n                    this.head.previous = null;\n                } else if (current === this.tail) {\n                    this.tail = this.tail.previous;\n                    this.tail.next = null;\n                } else {\n                    current.previous.next = current.next;\n                    current.next.previous = current.previous;\n                }\n                this.numberOfValues--;\n            }\n            current = current.next;\n        }\n    }\n    insertAfter(data, toNodeData) {\n        let current = this.head;\n        while (current) {\n            if (current.data === toNodeData) {\n                let node = new Node(data);\n                if (current === this.tail) {\n                    this.add(data);\n                } else {\n                    current.next.previous = node;\n                    node.previous = current;\n                    node.next = current.next;\n                    current.next = node;\n                    this.numberOfValues++;\n                }\n            }\n            current = current.next;\n        }\n    }\n    traverse(fn) {\n        let current = this.head;\n        while (current) {\n            if (fn) {\n                fn(current);\n            }\n            current = current.next;\n        }\n    }\n    traverseReverse(fn) {\n        let current = this.tail;\n        while (current) {\n            if (fn) {\n                fn(current);\n            }\n            current = current.previous;\n        }\n    }\n    length() {\n        return this.numberOfValues;\n    }\n    print() {\n        let string = \"\";\n        let current = this.head;\n        while (current) {\n            string += current.data + \" \";\n            current = current.next;\n        }\n        console.log(string.trim());\n    }\n}\n\nlet doublyLinkedList = new DoublyLinkedList();\ndoublyLinkedList.print(); // => ''\ndoublyLinkedList.add(1);\ndoublyLinkedList.add(2);\ndoublyLinkedList.add(3);\ndoublyLinkedList.add(4);\ndoublyLinkedList.print(); // => 1 2 3 4\nconsole.log(\"length is 4:\", doublyLinkedList.length()); // => 4\ndoublyLinkedList.remove(3); // remove value\ndoublyLinkedList.print(); // => 1 2 4\ndoublyLinkedList.remove(9); // remove non existing value\ndoublyLinkedList.print(); // => 1 2 4\ndoublyLinkedList.remove(1); // remove head\ndoublyLinkedList.print(); // => 2 4\ndoublyLinkedList.remove(4); // remove tail\ndoublyLinkedList.print(); // => 2\nconsole.log(\"length is 1:\", doublyLinkedList.length()); // => 1\ndoublyLinkedList.remove(2); // remove tail, the list should be empty\ndoublyLinkedList.print(); // => ''\nconsole.log(\"length is 0:\", doublyLinkedList.length()); // => 0\ndoublyLinkedList.add(2);\ndoublyLinkedList.add(6);\ndoublyLinkedList.print(); // => 2 6\ndoublyLinkedList.insertAfter(3, 2);\ndoublyLinkedList.print(); // => 2 3 6\ndoublyLinkedList.traverseReverse(function (node) {\n    console.log(node.data);\n});\ndoublyLinkedList.insertAfter(4, 3);\ndoublyLinkedList.print(); // => 2 3 4 6\ndoublyLinkedList.insertAfter(5, 9); // insertAfter a non existing node\ndoublyLinkedList.print(); // => 2 3 4 6\ndoublyLinkedList.insertAfter(5, 4);\ndoublyLinkedList.insertAfter(7, 6); // insertAfter the tail\ndoublyLinkedList.print(); // => 2 3 4 5 6 7\ndoublyLinkedList.add(8); // add node with normal method\ndoublyLinkedList.print(); // => 2 3 4 5 6 7 8\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\ndoublyLinkedList.traverse(function (node) {\n    node.data = node.data + 10;\n});\ndoublyLinkedList.print(); // => 12 13 14 15 16 17 18\ndoublyLinkedList.traverse(function (node) {\n    console.log(node.data);\n}); // => 12 13 14 15 16 17 18\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\ndoublyLinkedList.traverseReverse(function (node) {\n    console.log(node.data);\n}); // => 18 17 16 15 14 13 12\ndoublyLinkedList.print(); // => 12 13 14 15 16 17 18\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\n/*\n   ~ js-files : (master) node double-linked-list.js\n\n1 2 3 4\nlength is 4: 4\n1 2 4\n1 2 4\n2 4\n2\nlength is 1: 1\n\nlength is 0: 0\n2 6\n2 3 6\n6\n3\n2\n2 3 4 6\n2 3 4 6\n2 3 4 5 6 7\n2 3 4 5 6 7 8\nlength is 7: 7\n12 13 14 15 16 17 18\n12\n13\n14\n15\n16\n17\n18\nlength is 7: 7\n18\n17\n16\n15\n14\n13\n12\n12 13 14 15 16 17 18\nlength is 7: 7\n ~ js-files : (master)\n*/\n"
                            }
                        ],
                        "position": { "start": { "line": 828, "column": 1, "offset": 26204 }, "end": { "line": 1018, "column": 7, "offset": 32091 } }
                    }
                ],
                "position": { "start": { "line": 828, "column": 1, "offset": 26204 }, "end": { "line": 1018, "column": 7, "offset": 32091 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The Stack",
                        "position": { "start": { "line": 1020, "column": 4, "offset": 32096 }, "end": { "line": 1020, "column": 13, "offset": 32105 } }
                    }
                ],
                "position": { "start": { "line": 1020, "column": 1, "offset": 32093 }, "end": { "line": 1020, "column": 13, "offset": 32105 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://cdn-images-1.medium.com/max/4050/0*qsjYW-Lvfo22ecLE.gif", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 1022, "column": 1, "offset": 32107 }, "end": { "line": 1022, "column": 69, "offset": 32175 } }
                    }
                ],
                "position": { "start": { "line": 1022, "column": 1, "offset": 32107 }, "end": { "line": 1022, "column": 69, "offset": 32175 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": { "start": { "line": 1024, "column": 5, "offset": 32181 }, "end": { "line": 1024, "column": 15, "offset": 32191 } }
                            }
                        ],
                        "position": { "start": { "line": 1024, "column": 4, "offset": 32180 }, "end": { "line": 1024, "column": 16, "offset": 32192 } }
                    }
                ],
                "position": { "start": { "line": 1024, "column": 1, "offset": 32177 }, "end": { "line": 1024, "column": 16, "offset": 32192 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Stack is an abstract data type that serves as a collection of elements, with two principal operations: push, which adds an element to the collection, and pop, which removes the most recently added element that was not yet removed. The order in which elements come off a Stack gives rise to its alternative name, LIFO (for last in, first out). From Wikipedia",
                                        "position": {
                                            "start": { "line": 1026, "column": 4, "offset": 32197 },
                                            "end": { "line": 1026, "column": 363, "offset": 32556 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 1026, "column": 3, "offset": 32196 }, "end": { "line": 1026, "column": 364, "offset": 32557 } }
                            }
                        ],
                        "position": { "start": { "line": 1026, "column": 3, "offset": 32196 }, "end": { "line": 1026, "column": 364, "offset": 32557 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 1026, "column": 1, "offset": 32194 }, "end": { "line": 1026, "column": 364, "offset": 32557 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "A Stack often has a third method peek which allows to check the last pushed element without popping it.",
                        "position": { "start": { "line": 1028, "column": 1, "offset": 32559 }, "end": { "line": 1028, "column": 104, "offset": 32662 } }
                    }
                ],
                "position": { "start": { "line": 1028, "column": 1, "offset": 32559 }, "end": { "line": 1028, "column": 104, "offset": 32662 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)",
                        "position": { "start": { "line": 1030, "column": 1, "offset": 32664 }, "end": { "line": 1033, "column": 20, "offset": 32735 } }
                    }
                ],
                "position": { "start": { "line": 1030, "column": 1, "offset": 32664 }, "end": { "line": 1033, "column": 20, "offset": 32735 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The code",
                                        "position": {
                                            "start": { "line": 1035, "column": 4, "offset": 32740 },
                                            "end": { "line": 1035, "column": 12, "offset": 32748 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 1035, "column": 3, "offset": 32739 }, "end": { "line": 1035, "column": 13, "offset": 32749 } }
                            }
                        ],
                        "position": { "start": { "line": 1035, "column": 3, "offset": 32739 }, "end": { "line": 1035, "column": 13, "offset": 32749 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 1035, "column": 1, "offset": 32737 }, "end": { "line": 1035, "column": 13, "offset": 32749 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "function Stack() {\n  this.stack = [];\n}\n\nStack.prototype.push = function(value) {\n  this.stack.push(value);\n};\nStack.prototype.pop = function() {\n  return this.stack.pop();\n};\nStack.prototype.peek = function() {\n  return this.stack[this.stack.length - 1];\n};\nStack.prototype.length = function() {\n  return this.stack.length;\n};\nStack.prototype.print = function() {\n  console.log(this.stack.join(' '));\n};\n\nlet stack = new Stack();\nstack.push(1);\nstack.push(2);\nstack.push(3);\nstack.print(); // => 1 2 3\nconsole.log('length is 3:', stack.length()); // => 3\nconsole.log('peek is 3:', stack.peek()); // => 3\nconsole.log('pop is 3:', stack.pop()); // => 3\nstack.print(); // => 1 2\nconsole.log('pop is 2:', stack.pop());  // => 2\nconsole.log('length is 1:', stack.length()); // => 1\nconsole.log('pop is 1:', stack.pop()); // => 1\nstack.print(); // => ''\nconsole.log('peek is undefined:', stack.peek()); // => undefined\nconsole.log('pop is undefined:', stack.pop()); // => undefined\n"
                            }
                        ],
                        "position": { "start": { "line": 1037, "column": 1, "offset": 32751 }, "end": { "line": 1071, "column": 67, "offset": 33859 } }
                    }
                ],
                "position": { "start": { "line": 1037, "column": 1, "offset": 32751 }, "end": { "line": 1071, "column": 67, "offset": 33859 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The Queue",
                        "position": { "start": { "line": 1073, "column": 4, "offset": 33864 }, "end": { "line": 1073, "column": 13, "offset": 33873 } }
                    }
                ],
                "position": { "start": { "line": 1073, "column": 1, "offset": 33861 }, "end": { "line": 1073, "column": 13, "offset": 33873 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://cdn-images-1.medium.com/max/4050/0*YvfuX5tKP7-V0p7v.gif", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 1075, "column": 1, "offset": 33875 }, "end": { "line": 1075, "column": 69, "offset": 33943 } }
                    }
                ],
                "position": { "start": { "line": 1075, "column": 1, "offset": 33875 }, "end": { "line": 1075, "column": 69, "offset": 33943 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": { "start": { "line": 1077, "column": 5, "offset": 33949 }, "end": { "line": 1077, "column": 15, "offset": 33959 } }
                            }
                        ],
                        "position": { "start": { "line": 1077, "column": 4, "offset": 33948 }, "end": { "line": 1077, "column": 16, "offset": 33960 } }
                    }
                ],
                "position": { "start": { "line": 1077, "column": 1, "offset": 33945 }, "end": { "line": 1077, "column": 16, "offset": 33960 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Queue is a particular kind of abstract data type or collection in which the entities in the collection are kept in order and the principal operations are the addition of entities to the rear terminal position, known as enqueue, and removal of entities from the front terminal position, known as dequeue. This makes the Queue a First-In-First-Out (FIFO) data structure. In a FIFO data structure, the first element added to the Queue will be the first one to be removed.",
                                        "position": {
                                            "start": { "line": 1079, "column": 4, "offset": 33965 },
                                            "end": { "line": 1079, "column": 474, "offset": 34435 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 1079, "column": 3, "offset": 33964 }, "end": { "line": 1079, "column": 475, "offset": 34436 } }
                            }
                        ],
                        "position": { "start": { "line": 1079, "column": 3, "offset": 33964 }, "end": { "line": 1079, "column": 475, "offset": 34436 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 1079, "column": 1, "offset": 33962 }, "end": { "line": 1079, "column": 475, "offset": 34436 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "As for the Stack data structure, a peek operation is often added to the Queue data structure. It returns the value of the front element without dequeuing it.",
                        "position": { "start": { "line": 1081, "column": 1, "offset": 34438 }, "end": { "line": 1081, "column": 158, "offset": 34595 } }
                    }
                ],
                "position": { "start": { "line": 1081, "column": 1, "offset": 34438 }, "end": { "line": 1081, "column": 158, "offset": 34595 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(n)",
                        "position": { "start": { "line": 1083, "column": 1, "offset": 34597 }, "end": { "line": 1086, "column": 20, "offset": 34668 } }
                    }
                ],
                "position": { "start": { "line": 1083, "column": 1, "offset": 34597 }, "end": { "line": 1086, "column": 20, "offset": 34668 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The code",
                                        "position": {
                                            "start": { "line": 1088, "column": 4, "offset": 34673 },
                                            "end": { "line": 1088, "column": 12, "offset": 34681 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 1088, "column": 3, "offset": 34672 }, "end": { "line": 1088, "column": 13, "offset": 34682 } }
                            }
                        ],
                        "position": { "start": { "line": 1088, "column": 3, "offset": 34672 }, "end": { "line": 1088, "column": 13, "offset": 34682 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 1088, "column": 1, "offset": 34670 }, "end": { "line": 1088, "column": 13, "offset": 34682 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "function Queue() {\n  this.queue = [];\n}\n\nQueue.prototype.enqueue = function(value) {\n  this.queue.push(value);\n};\nQueue.prototype.dequeue = function() {\n  return this.queue.shift();\n};\nQueue.prototype.peek = function() {\n  return this.queue[0];\n};\nQueue.prototype.length = function() {\n  return this.queue.length;\n};\nQueue.prototype.print = function() {\n  console.log(this.queue.join(' '));\n};\n\nlet queue = new Queue();\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nqueue.print(); // => 1 2 3\nconsole.log('length is 3:', queue.length()); // => 3\nconsole.log('peek is 1:', queue.peek()); // => 3\nconsole.log('dequeue is 1:', queue.dequeue()); // => 1\nqueue.print(); // => 2 3\nconsole.log('dequeue is 2:', queue.dequeue());  // => 2\nconsole.log('length is 1:', queue.length()); // => 1\nconsole.log('dequeue is 3:', queue.dequeue()); // => 3\nqueue.print(); // => ''\nconsole.log('peek is undefined:', queue.peek()); // => undefined\nconsole.log('dequeue is undefined:', queue.dequeue()); // => undefined\n"
                            }
                        ],
                        "position": { "start": { "line": 1090, "column": 1, "offset": 34684 }, "end": { "line": 1124, "column": 75, "offset": 35822 } }
                    }
                ],
                "position": { "start": { "line": 1090, "column": 1, "offset": 34684 }, "end": { "line": 1124, "column": 75, "offset": 35822 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The Tree",
                        "position": { "start": { "line": 1126, "column": 4, "offset": 35827 }, "end": { "line": 1126, "column": 12, "offset": 35835 } }
                    }
                ],
                "position": { "start": { "line": 1126, "column": 1, "offset": 35824 }, "end": { "line": 1126, "column": 12, "offset": 35835 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://cdn-images-1.medium.com/max/2000/0*yUiQ-NaPKeLQnN7n", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 1128, "column": 1, "offset": 35837 }, "end": { "line": 1128, "column": 65, "offset": 35901 } }
                    }
                ],
                "position": { "start": { "line": 1128, "column": 1, "offset": 35837 }, "end": { "line": 1128, "column": 65, "offset": 35901 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": { "start": { "line": 1130, "column": 5, "offset": 35907 }, "end": { "line": 1130, "column": 15, "offset": 35917 } }
                            }
                        ],
                        "position": { "start": { "line": 1130, "column": 4, "offset": 35906 }, "end": { "line": 1130, "column": 16, "offset": 35918 } }
                    }
                ],
                "position": { "start": { "line": 1130, "column": 1, "offset": 35903 }, "end": { "line": 1130, "column": 16, "offset": 35918 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Tree is a widely used data structure that simulates a hierarchical tree structure, with a root value and subtrees of children with a parent node. A tree data structure can be defined recursively as a collection of nodes (starting at a root node), where each node is a data structure consisting of a value, together with a list of references to nodes (the \"children\"), with the constraints that no reference is duplicated, and none points to the root node. From Wikipedia",
                                        "position": {
                                            "start": { "line": 1132, "column": 4, "offset": 35923 },
                                            "end": { "line": 1132, "column": 476, "offset": 36395 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 1132, "column": 3, "offset": 35922 }, "end": { "line": 1132, "column": 477, "offset": 36396 } }
                            }
                        ],
                        "position": { "start": { "line": 1132, "column": 3, "offset": 35922 }, "end": { "line": 1132, "column": 477, "offset": 36396 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 1132, "column": 1, "offset": 35920 }, "end": { "line": 1132, "column": 477, "offset": 36396 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(n) O(n)\nTo get a full overview of the time and space complexity of the Tree data structure, have a look to this excellent Big O cheat sheet.",
                        "position": { "start": { "line": 1134, "column": 1, "offset": 36398 }, "end": { "line": 1138, "column": 133, "offset": 36602 } }
                    }
                ],
                "position": { "start": { "line": 1134, "column": 1, "offset": 36398 }, "end": { "line": 1138, "column": 133, "offset": 36602 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://cdn-images-1.medium.com/max/2000/1*DCdQiB6XqBJCrFRz12BwqA.png", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 1140, "column": 1, "offset": 36604 }, "end": { "line": 1140, "column": 75, "offset": 36678 } }
                    }
                ],
                "position": { "start": { "line": 1140, "column": 1, "offset": 36604 }, "end": { "line": 1140, "column": 75, "offset": 36678 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The code",
                                        "position": {
                                            "start": { "line": 1142, "column": 4, "offset": 36683 },
                                            "end": { "line": 1142, "column": 12, "offset": 36691 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 1142, "column": 3, "offset": 36682 }, "end": { "line": 1142, "column": 13, "offset": 36692 } }
                            }
                        ],
                        "position": { "start": { "line": 1142, "column": 3, "offset": 36682 }, "end": { "line": 1142, "column": 13, "offset": 36692 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 1142, "column": 1, "offset": 36680 }, "end": { "line": 1142, "column": 13, "offset": 36692 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "function Node(data) {\n  this.data = data;\n  this.children = [];\n}\n\nfunction Tree() {\n  this.root = null;\n}\n\nTree.prototype.add = function(data, toNodeData) {\n  let node = new Node(data);\n  let parent = toNodeData ? this.findBFS(toNodeData) : null;\n  if(parent) {\n    parent.children.push(node);\n  } else {\n    if(!this.root) {\n      this.root = node;\n    } else {\n      return 'Root node is already assigned';\n    }\n  }\n};\nTree.prototype.remove = function(data) {\n  if(this.root.data === data) {\n    this.root = null;\n  }\n\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    for(let i = 0; i < node.children.length; i++) {\n      if(node.children[i].data === data) {\n        node.children.splice(i, 1);\n      } else {\n        queue.push(node.children[i]);\n      }\n    }\n  }\n};\nTree.prototype.contains = function(data) {\n  return this.findBFS(data) ? true : false;\n};\nTree.prototype.findBFS = function(data) {\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    if(node.data === data) {\n      return node;\n    }\n    for(let i = 0; i < node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  return null;\n};\nTree.prototype._preOrder = function(node, fn) {\n  if(node) {\n    if(fn) {\n      fn(node);\n    }\n    for(let i = 0; i < node.children.length; i++) {\n      this._preOrder(node.children[i], fn);\n    }\n  }\n};\nTree.prototype._postOrder = function(node, fn) {\n  if(node) {\n    for(let i = 0; i < node.children.length; i++) {\n      this._postOrder(node.children[i], fn);\n    }\n    if(fn) {\n      fn(node);\n    }\n  }\n};\nTree.prototype.traverseDFS = function(fn, method) {\n  let current = this.root;\n  if(method) {\n    this['_' + method](current, fn);\n  } else {\n    this._preOrder(current, fn);\n  }\n};\nTree.prototype.traverseBFS = function(fn) {\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    if(fn) {\n      fn(node);\n    }\n    for(let i = 0; i < node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n};\nTree.prototype.print = function() {\n  if(!this.root) {\n    return console.log('No root node found');\n  }\n  let newline = new Node('|');\n  let queue = [this.root, newline];\n  let string = '';\n  while(queue.length) {\n    let node = queue.shift();\n    string += node.data.toString() + ' ';\n    if(node === newline && queue.length) {\n      queue.push(newline);\n    }\n    for(let i = 0; i < node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  console.log(string.slice(0, -2).trim());\n};\nTree.prototype.printByLevel = function() {\n  if(!this.root) {\n    return console.log('No root node found');\n  }\n  let newline = new Node('\\n');\n  let queue = [this.root, newline];\n  let string = '';\n  while(queue.length) {\n    let node = queue.shift();\n    string += node.data.toString() + (node.data !== '\\n' ? ' ' : '');\n    if(node === newline && queue.length) {\n      queue.push(newline);\n    }\n    for(let i = 0; i < node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  console.log(string.trim());\n};\n\nlet tree = new Tree();\ntree.add('ceo');\ntree.add('cto', 'ceo');\ntree.add('dev1', 'cto');\ntree.add('dev2', 'cto');\ntree.add('dev3', 'cto');\ntree.add('cfo', 'ceo');\ntree.add('accountant', 'cfo');\ntree.add('cmo', 'ceo');\ntree.print(); // => ceo | cto cfo cmo | dev1 dev2 dev3 accountant\ntree.printByLevel();  // => ceo \\n cto cfo cmo \\n dev1 dev2 dev3 accountant\nconsole.log('tree contains dev1 is true:', tree.contains('dev1')); // => true\nconsole.log('tree contains dev4 is false:', tree.contains('dev4')); // => false\nconsole.log('--- BFS');\ntree.traverseBFS(function(node) { console.log(node.data); }); // => ceo cto cfo cmo dev1 dev2 dev3 accountant\nconsole.log('--- DFS preOrder');\ntree.traverseDFS(function(node) { console.log(node.data); }, 'preOrder'); // => ceo cto dev1 dev2 dev3 cfo accountant cmo\nconsole.log('--- DFS postOrder');\ntree.traverseDFS(function(node) { console.log(node.data); }, 'postOrder'); // => dev1 dev2 dev3 cto accountant cfo cmo ceo\ntree.remove('cmo');\ntree.print(); // => ceo | cto cfo | dev1 dev2 dev3 accountant\ntree.remove('cfo');\ntree.print(); // => ceo | cto | dev1 dev2 dev3\n"
                            }
                        ],
                        "position": { "start": { "line": 1144, "column": 1, "offset": 36694 }, "end": { "line": 1300, "column": 51, "offset": 41503 } }
                    }
                ],
                "position": { "start": { "line": 1144, "column": 1, "offset": 36694 }, "end": { "line": 1300, "column": 51, "offset": 41503 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "The Graph",
                        "position": { "start": { "line": 1302, "column": 4, "offset": 41508 }, "end": { "line": 1302, "column": 13, "offset": 41517 } }
                    }
                ],
                "position": { "start": { "line": 1302, "column": 1, "offset": 41505 }, "end": { "line": 1302, "column": 13, "offset": 41517 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "img",
                        "properties": { "src": "https://cdn-images-1.medium.com/max/2000/0*q31mL1kjFWlIzw3l.gif", "alt": null },
                        "children": [],
                        "position": { "start": { "line": 1304, "column": 1, "offset": 41519 }, "end": { "line": 1304, "column": 69, "offset": 41587 } }
                    }
                ],
                "position": { "start": { "line": 1304, "column": 1, "offset": 41519 }, "end": { "line": 1304, "column": 69, "offset": 41587 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "h2",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "em",
                        "properties": {},
                        "children": [
                            {
                                "type": "text",
                                "value": "Definition",
                                "position": { "start": { "line": 1306, "column": 5, "offset": 41593 }, "end": { "line": 1306, "column": 15, "offset": 41603 } }
                            }
                        ],
                        "position": { "start": { "line": 1306, "column": 4, "offset": 41592 }, "end": { "line": 1306, "column": 16, "offset": 41604 } }
                    }
                ],
                "position": { "start": { "line": 1306, "column": 1, "offset": 41589 }, "end": { "line": 1306, "column": 16, "offset": 41604 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "A Graph data structure consists of a finite (and possibly mutable) set of vertices or nodes or points, together with a set of unordered pairs of these vertices for an undirected Graph or a set of ordered pairs for a directed Graph. These pairs are known as edges, arcs, or lines for an undirected Graph and as arrows, directed edges, directed arcs, or directed lines for a directed Graph. The vertices may be part of the Graph structure, or may be external entities represented by integer indices or references. From Wikipedia",
                                        "position": {
                                            "start": { "line": 1308, "column": 4, "offset": 41609 },
                                            "end": { "line": 1308, "column": 530, "offset": 42135 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 1308, "column": 3, "offset": 41608 }, "end": { "line": 1308, "column": 531, "offset": 42136 } }
                            }
                        ],
                        "position": { "start": { "line": 1308, "column": 3, "offset": 41608 }, "end": { "line": 1308, "column": 531, "offset": 42136 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 1308, "column": 1, "offset": 41606 }, "end": { "line": 1308, "column": 531, "offset": 42136 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "A Graph data structure may also associate to each edge some edge value, such as a symbolic label or a numeric attribute (cost, capacity, length, etc.).",
                        "position": { "start": { "line": 1310, "column": 1, "offset": 42138 }, "end": { "line": 1310, "column": 152, "offset": 42289 } }
                    }
                ],
                "position": { "start": { "line": 1310, "column": 1, "offset": 42138 }, "end": { "line": 1310, "column": 152, "offset": 42289 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Representation\nThere are different ways of representing a graph, each of them with its own advantages and disadvantages. Here are the main 2:",
                        "position": { "start": { "line": 1312, "column": 1, "offset": 42291 }, "end": { "line": 1313, "column": 127, "offset": 42432 } }
                    }
                ],
                "position": { "start": { "line": 1312, "column": 1, "offset": 42291 }, "end": { "line": 1313, "column": 127, "offset": 42432 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Adjacency list: For every vertex a list of adjacent vertices is stored. This can be viewed as storing the list of edges. This data structure allows the storage of additional data on the vertices and edges.\nAdjacency matrix: Data are stored in a two-dimensional matrix, in which the rows represent source vertices and columns represent destination vertices. The data on the edges and vertices must be stored externally.\nComplexity\nAdjacency list\nStorage Add Vertex Add Edge Query\nO( V + E\nAdjacency matrix\nStorage Add Vertex Add Edge Query\nO( V ^2) O(",
                        "position": { "start": { "line": 1315, "column": 1, "offset": 42434 }, "end": { "line": 1323, "column": 12, "offset": 42984 } }
                    }
                ],
                "position": { "start": { "line": 1315, "column": 1, "offset": 42434 }, "end": { "line": 1323, "column": 12, "offset": 42984 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Graph",
                        "position": { "start": { "line": 1325, "column": 1, "offset": 42986 }, "end": { "line": 1325, "column": 6, "offset": 42991 } }
                    }
                ],
                "position": { "start": { "line": 1325, "column": 1, "offset": 42986 }, "end": { "line": 1325, "column": 6, "offset": 42991 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "blockquote",
                "properties": {},
                "children": [
                    { "type": "text", "value": "\n" },
                    {
                        "type": "element",
                        "tagName": "p",
                        "properties": {},
                        "children": [
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "The code",
                                        "position": {
                                            "start": { "line": 1327, "column": 4, "offset": 42996 },
                                            "end": { "line": 1327, "column": 12, "offset": 43004 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 1327, "column": 3, "offset": 42995 }, "end": { "line": 1327, "column": 13, "offset": 43005 } }
                            }
                        ],
                        "position": { "start": { "line": 1327, "column": 3, "offset": 42995 }, "end": { "line": 1327, "column": 13, "offset": 43005 } }
                    },
                    { "type": "text", "value": "\n" }
                ],
                "position": { "start": { "line": 1327, "column": 1, "offset": 42993 }, "end": { "line": 1327, "column": 13, "offset": 43005 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": {},
                        "children": [{ "type": "text", "value": "//below uses the adjacency list representation.\n" }],
                        "position": { "start": { "line": 1329, "column": 1, "offset": 43007 }, "end": { "line": 1329, "column": 52, "offset": 43058 } }
                    }
                ],
                "position": { "start": { "line": 1329, "column": 1, "offset": 43007 }, "end": { "line": 1329, "column": 52, "offset": 43058 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "pre",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "code",
                        "properties": { "className": ["language-js"] },
                        "children": [
                            {
                                "type": "text",
                                "value": "        function Graph() {\n          this.vertices = [];\n          this.edges = [];\n          this.numberOfEdges = 0;\n        }\n\n        Graph.prototype.addVertex = function(vertex) {\n          this.vertices.push(vertex);\n          this.edges[vertex] = [];\n        };\n        Graph.prototype.removeVertex = function(vertex) {\n          let index = this.vertices.indexOf(vertex);\n          if(~index) {\n            this.vertices.splice(index, 1);\n          }\n          while(this.edges[vertex].length) {\n            let adjacentVertex = this.edges[vertex].pop();\n            this.removeEdge(adjacentVertex, vertex);\n          }\n        };\n        Graph.prototype.addEdge = function(vertex1, vertex2) {\n          this.edges[vertex1].push(vertex2);\n          this.edges[vertex2].push(vertex1);\n          this.numberOfEdges++;\n        };\n        Graph.prototype.removeEdge = function(vertex1, vertex2) {\n          let index1 = this.edges[vertex1] ? this.edges[vertex1].indexOf(vertex2) : -1;\n          let index2 = this.edges[vertex2] ? this.edges[vertex2].indexOf(vertex1) : -1;\n          if(~index1) {\n            this.edges[vertex1].splice(index1, 1);\n            this.numberOfEdges--;\n          }\n          if(~index2) {\n            this.edges[vertex2].splice(index2, 1);\n          }\n        };\n        Graph.prototype.size = function() {\n          return this.vertices.length;\n        };\n        Graph.prototype.relations = function() {\n          return this.numberOfEdges;\n        };\n        Graph.prototype.traverseDFS = function(vertex, fn) {\n          if(!~this.vertices.indexOf(vertex)) {\n            return console.log('Vertex not found');\n          }\n          let visited = [];\n          this._traverseDFS(vertex, visited, fn);\n        };\n        Graph.prototype._traverseDFS = function(vertex, visited, fn) {\n          visited[vertex] = true;\n          if(this.edges[vertex] !== undefined) {\n            fn(vertex);\n          }\n          for(let i = 0; i < this.edges[vertex].length; i++) {\n            if(!visited[this.edges[vertex][i]]) {\n              this._traverseDFS(this.edges[vertex][i], visited, fn);\n            }\n          }\n        };\n        Graph.prototype.traverseBFS = function(vertex, fn) {\n          if(!~this.vertices.indexOf(vertex)) {\n            return console.log('Vertex not found');\n          }\n          let queue = [];\n          queue.push(vertex);\n          let visited = [];\n          visited[vertex] = true;\n\n          while(queue.length) {\n            vertex = queue.shift();\n            fn(vertex);\n            for(let i = 0; i < this.edges[vertex].length; i++) {\n              if(!visited[this.edges[vertex][i]]) {\n                visited[this.edges[vertex][i]] = true;\n                queue.push(this.edges[vertex][i]);\n              }\n            }\n          }\n        };\n        Graph.prototype.pathFromTo = function(vertexSource, vertexDestination) {\n          if(!~this.vertices.indexOf(vertexSource)) {\n            return console.log('Vertex not found');\n          }\n          let queue = [];\n          queue.push(vertexSource);\n          let visited = [];\n          visited[vertexSource] = true;\n          let paths = [];\n\n          while(queue.length) {\n            let vertex = queue.shift();\n            for(let i = 0; i < this.edges[vertex].length; i++) {\n              if(!visited[this.edges[vertex][i]]) {\n                visited[this.edges[vertex][i]] = true;\n                queue.push(this.edges[vertex][i]);\n                // save paths between vertices\n                paths[this.edges[vertex][i]] = vertex;\n              }\n            }\n          }\n          if(!visited[vertexDestination]) {\n            return undefined;\n          }\n\n          let path = [];\n          for(let j = vertexDestination; j != vertexSource; j = paths[j]) {\n            path.push(j);\n          }\n          path.push(j);\n          return path.reverse().join('-');\n        };\n        Graph.prototype.print = function() {\n          console.log(this.vertices.map(function(vertex) {\n            return (vertex + ' -> ' + this.edges[vertex].join(', ')).trim();\n          }, this).join(' | '));\n        };\n        ```\n        let graph = new Graph();\n        graph.addVertex(1);\n        graph.addVertex(2);\n        graph.addVertex(3);\n        graph.addVertex(4);\n        graph.addVertex(5);\n        graph.addVertex(6);\n        graph.print(); // 1 -> | 2 -> | 3 -> | 4 -> | 5 -> | 6 ->\n        graph.addEdge(1, 2);\n        graph.addEdge(1, 5);\n        graph.addEdge(2, 3);\n        graph.addEdge(2, 5);\n        graph.addEdge(3, 4);\n        graph.addEdge(4, 5);\n        graph.addEdge(4, 6);\n        graph.print(); // 1 -> 2, 5 | 2 -> 1, 3, 5 | 3 -> 2, 4 | 4 -> 3, 5, 6 | 5 -> 1, 2, 4 | 6 -> 4\n        console.log('graph size (number of vertices):', graph.size()); // => 6\n        console.log('graph relations (number of edges):', graph.relations()); // => 7\n        graph.traverseDFS(1, function(vertex) { console.log(vertex); }); // => 1 2 3 4 5 6\n        console.log('---');\n        graph.traverseBFS(1, function(vertex) { console.log(vertex); }); // => 1 2 5 3 4 6\n        graph.traverseDFS(0, function(vertex) { console.log(vertex); }); // => 'Vertex not found'\n        graph.traverseBFS(0, function(vertex) { console.log(vertex); }); // => 'Vertex not found'\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-5-1\n        console.log('path from 3 to 5:', graph.pathFromTo(3, 5)); // => 3-2-5\n        graph.removeEdge(1, 2);\n        graph.removeEdge(4, 5);\n        graph.removeEdge(10, 11);\n        console.log('graph relations (number of edges):', graph.relations()); // => 5\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-3-2-5-1\n        graph.addEdge(1, 2);\n        graph.addEdge(4, 5);\n        console.log('graph relations (number of edges):', graph.relations()); // => 7\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-5-1\n        graph.removeVertex(5);\n        console.log('graph size (number of vertices):', graph.size()); // => 5\n        console.log('graph relations (number of edges):', graph.relations()); // => 4\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-3-2-1\n"
                            }
                        ],
                        "position": { "start": { "line": 1331, "column": 1, "offset": 43060 }, "end": { "line": 1488, "column": 5, "offset": 49295 } }
                    }
                ],
                "position": { "start": { "line": 1331, "column": 1, "offset": 43060 }, "end": { "line": 1488, "column": 5, "offset": 49295 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "â‰¡If you found this guide helpful feel free to checkout my github/gists where I host similar content:",
                        "position": { "start": { "line": 1490, "column": 1, "offset": 49297 }, "end": { "line": 1490, "column": 101, "offset": 49397 } }
                    }
                ],
                "position": { "start": { "line": 1490, "column": 1, "offset": 49297 }, "end": { "line": 1490, "column": 101, "offset": 49397 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "element",
                        "tagName": "a",
                        "properties": { "href": "https://gist.github.com/bgoonz" },
                        "children": [
                            {
                                "type": "text",
                                "value": "bgoonz's gists Â· GitHub",
                                "position": { "start": { "line": 1492, "column": 2, "offset": 49400 }, "end": { "line": 1492, "column": 25, "offset": 49423 } }
                            }
                        ],
                        "position": { "start": { "line": 1492, "column": 1, "offset": 49399 }, "end": { "line": 1492, "column": 58, "offset": 49456 } }
                    },
                    {
                        "type": "text",
                        "value": "\n",
                        "position": { "start": { "line": 1492, "column": 58, "offset": 49456 }, "end": { "line": 1493, "column": 1, "offset": 49457 } }
                    },
                    {
                        "type": "element",
                        "tagName": "a",
                        "properties": { "href": "https://github.com/bgoonz" },
                        "children": [
                            {
                                "type": "element",
                                "tagName": "strong",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "bgoonz â€” Overview",
                                        "position": {
                                            "start": { "line": 1493, "column": 4, "offset": 49460 },
                                            "end": { "line": 1493, "column": 21, "offset": 49477 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 1493, "column": 2, "offset": 49458 }, "end": { "line": 1493, "column": 23, "offset": 49479 } }
                            },
                            {
                                "type": "text",
                                "value": "\n",
                                "position": { "start": { "line": 1493, "column": 23, "offset": 49479 }, "end": { "line": 1494, "column": 1, "offset": 49480 } }
                            },
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelizeâ€¦",
                                        "position": {
                                            "start": { "line": 1494, "column": 2, "offset": 49481 },
                                            "end": { "line": 1494, "column": 115, "offset": 49594 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 1494, "column": 1, "offset": 49480 }, "end": { "line": 1494, "column": 116, "offset": 49595 } }
                            },
                            {
                                "type": "text",
                                "value": "github.com",
                                "position": {
                                    "start": { "line": 1494, "column": 116, "offset": 49595 },
                                    "end": { "line": 1494, "column": 126, "offset": 49605 }
                                }
                            }
                        ],
                        "position": { "start": { "line": 1493, "column": 1, "offset": 49457 }, "end": { "line": 1494, "column": 154, "offset": 49633 } }
                    }
                ],
                "position": { "start": { "line": 1492, "column": 1, "offset": 49399 }, "end": { "line": 1494, "column": 154, "offset": 49633 } }
            },
            { "type": "text", "value": "\n" },
            {
                "type": "element",
                "tagName": "p",
                "properties": {},
                "children": [
                    {
                        "type": "text",
                        "value": "Or Checkout my personal Resource Site:\n",
                        "position": { "start": { "line": 1496, "column": 1, "offset": 49635 }, "end": { "line": 1497, "column": 1, "offset": 49674 } }
                    },
                    {
                        "type": "element",
                        "tagName": "a",
                        "properties": { "href": "https://goofy-euclid-1cd736.netlify.app/" },
                        "children": [
                            {
                                "type": "element",
                                "tagName": "strong",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "a/A-Student-Resources",
                                        "position": {
                                            "start": { "line": 1497, "column": 4, "offset": 49677 },
                                            "end": { "line": 1497, "column": 25, "offset": 49698 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 1497, "column": 2, "offset": 49675 }, "end": { "line": 1497, "column": 27, "offset": 49700 } }
                            },
                            {
                                "type": "text",
                                "value": "\n",
                                "position": { "start": { "line": 1497, "column": 27, "offset": 49700 }, "end": { "line": 1498, "column": 1, "offset": 49701 } }
                            },
                            {
                                "type": "element",
                                "tagName": "em",
                                "properties": {},
                                "children": [
                                    {
                                        "type": "text",
                                        "value": "Edit description",
                                        "position": {
                                            "start": { "line": 1498, "column": 2, "offset": 49702 },
                                            "end": { "line": 1498, "column": 18, "offset": 49718 }
                                        }
                                    }
                                ],
                                "position": { "start": { "line": 1498, "column": 1, "offset": 49701 }, "end": { "line": 1498, "column": 19, "offset": 49719 } }
                            },
                            {
                                "type": "text",
                                "value": "goofy-euclid-1cd736.netlify.app",
                                "position": { "start": { "line": 1498, "column": 19, "offset": 49719 }, "end": { "line": 1498, "column": 50, "offset": 49750 } }
                            }
                        ],
                        "position": { "start": { "line": 1497, "column": 1, "offset": 49674 }, "end": { "line": 1498, "column": 93, "offset": 49793 } }
                    }
                ],
                "position": { "start": { "line": 1496, "column": 1, "offset": 49635 }, "end": { "line": 1498, "column": 93, "offset": 49793 } }
            }
        ],
        "position": { "start": { "line": 1, "column": 1, "offset": 0 }, "end": { "line": 1499, "column": 1, "offset": 49794 } }
    }
}
