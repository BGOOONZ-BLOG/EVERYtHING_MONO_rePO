{"version":3,"sources":["webpack:///./src/components/TaggedList/index.jsx","webpack:///./src/templates/TaggedList.jsx"],"names":["TaggedList","data","location","page","getPage","tag","pathname","split","allPosts","getPosts","filter","node","frontmatter","tags","includes","postCount","length","posts","slice","CONTENT_PER_PAGE","PostsWrapper","PREFIX","toUpperCase","name","content","map","images","path","otherProps","Card","key","Pagination","prefix","propTypes","PropTypes","shape","isRequired","TaggedListTemplate","props"],"mappings":"k/DAUA,IAAMA,EAAa,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACpBC,EAAOC,YAAQF,GACVG,EAAX,EAAkBH,EAASI,SAASC,MAAM,KAA1C,MACMC,GAAQ,EAAGP,EACZQ,YADS,GAEOC,QAAO,qBAAGC,KAAQC,YAAeC,KAAoBC,SAAST,OAC7EU,EAAYP,EAASQ,OACrBC,EAAQT,EAASU,OAAOf,EAAO,GAAKgB,mBAAkBhB,EAAOgB,oBAEnE,OACE,oCACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,yCACMC,UADN,OACehB,EAAIiB,gBAEnB,0BAAMC,KAAK,WAAWC,QAAO,UAAKH,UAAL,OAAchB,EAAIiB,kBAE/B,IAAjBL,EAAMD,OACL,0CAGE,KACHC,EAAMQ,KAAI,oBAAGd,KAAQC,YAAec,EAA1B,EAA0BA,OAAQb,EAAlC,EAAkCA,KAAMc,EAAxC,EAAwCA,KAASC,EAAjD,cACT,kBAACC,EAAA,EAAD,GAAMC,IAAKH,EAAMA,KAAMA,EAAMd,KAAMA,EAAMa,OAAQA,GAAYE,QAGjE,kBAACG,EAAA,EAAD,CACEC,OAAM,gBAAW3B,EAAX,KACNU,UAAWA,EACXb,SAAUA,MAMlBF,EAAWiC,UAAY,CACrBhC,KAAMiC,IAAUC,MAAM,IAAIC,WAC1BlC,SAAUgC,IAAUC,MAAM,IAAIC,YAGjBpC,QCxCAqC,UANY,SAAAC,GAAK,OAC9B,kBAAC,IAAWA,EACV,kBAAC,EAAeA","file":"component---src-templates-tagged-list-jsx-53a1ba5dfec0ccbd43c6.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport PostsWrapper from '~/components/Common/PostsWrapper';\nimport Card from '~/components/Common/Card';\nimport Pagination from '~/components/Common/Pagination';\nimport getPosts from '~/utils/getPosts';\nimport getPage from '~/utils/getPage';\nimport { PREFIX, CONTENT_PER_PAGE } from '~/constants';\n\nconst TaggedList = ({ data, location }) => {\n  const page = getPage(location);\n  const [, , tag] = location.pathname.split('/');\n  const allPosts = data\n    |> getPosts\n    |> (posts => posts.filter(({ node: { frontmatter: { tags } } }) => tags.includes(tag)));\n  const postCount = allPosts.length;\n  const posts = allPosts.slice((page - 1) * CONTENT_PER_PAGE, page * CONTENT_PER_PAGE);\n\n  return (\n    <>\n      <PostsWrapper>\n        <Helmet>\n          <title>\n            {`${PREFIX}${tag.toUpperCase()}`}\n          </title>\n          <meta name=\"og:title\" content={`${PREFIX}${tag.toUpperCase()}`} />\n        </Helmet>\n        {posts.length === 0 ? (\n          <div>\n            No posts.\n          </div>\n        ) : null}\n        {posts.map(({ node: { frontmatter: { images, tags, path, ...otherProps } } }) => (\n          <Card key={path} path={path} tags={tags} images={images} {...otherProps} />\n        ))}\n      </PostsWrapper>\n      <Pagination\n        prefix={`/tags/${tag}/`}\n        postCount={postCount}\n        location={location}\n      />\n    </>\n  );\n};\n\nTaggedList.propTypes = {\n  data: PropTypes.shape({}).isRequired,\n  location: PropTypes.shape({}).isRequired,\n};\n\nexport default TaggedList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '~/components/layout';\nimport TaggedList from '~/components/TaggedList';\n\nconst TaggedListTemplate = props => (\n  <Layout {...props}>\n    <TaggedList {...props} />\n  </Layout>\n);\n\nexport default TaggedListTemplate;\n\nexport const pageQuery = graphql`\n  query TaggedListQuery {\n    site {\n      siteMetadata {\n        title\n        author\n        homepage\n      }\n    }\n    posts: allMarkdownRemark (\n      filter: { frontmatter: { hide: { ne: true } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            type\n            title\n            images\n            path\n            tags\n            date\n            summary\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}