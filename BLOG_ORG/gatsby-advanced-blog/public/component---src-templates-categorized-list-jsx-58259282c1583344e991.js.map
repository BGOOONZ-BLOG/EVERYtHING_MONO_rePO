{"version":3,"sources":["webpack:///./src/components/CategorizedList/index.jsx","webpack:///./src/templates/CategorizedList.jsx"],"names":["CategorizedList","data","location","page","getPage","category","pathname","split","allPosts","getPosts","filter","c","node","frontmatter","postCount","length","posts","slice","CONTENT_PER_PAGE","PostsWrapper","PREFIX","toUpperCase","name","content","map","images","tags","path","otherProps","Card","key","Pagination","prefix","propTypes","PropTypes","shape","isRequired","CategorizedListTemplate","props"],"mappings":"69DAUA,IAAMA,EAAkB,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACzBC,EAAOC,YAAQF,GACVG,EAAX,EAAuBH,EAASI,SAASC,MAAM,KAA/C,MACMC,GAAQ,EAAGP,EACZQ,YADS,GAEOC,QAAO,gBAAoCC,EAApC,EAAGC,KAAQC,YAAeR,SAA1B,OAAgDA,IAAaM,MACnFG,EAAYN,EAASO,OACrBC,EAAQR,EAASS,OAAOd,EAAO,GAAKe,mBAAkBf,EAAOe,oBAEnE,OACE,oCACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,yCACMC,UADN,OACef,EAASgB,gBAExB,0BAAMC,KAAK,WAAWC,QAAO,UAAKH,UAAL,OAAcf,EAASgB,kBAEpC,IAAjBL,EAAMD,OACL,0CAGE,KACHC,EAAMQ,KAAI,oBAAGZ,KAAQC,YAAeY,EAA1B,EAA0BA,OAAQC,EAAlC,EAAkCA,KAAMC,EAAxC,EAAwCA,KAASC,EAAjD,cACT,kBAACC,EAAA,EAAD,GAAMC,IAAKH,EAAMA,KAAMA,EAAMF,OAAQA,EAAQC,KAAMA,GAAUE,QAGjE,kBAACG,EAAA,EAAD,CACEC,OAAM,sBAAiB3B,EAAjB,KACNS,UAAWA,EACXZ,SAAUA,MAMlBF,EAAgBiC,UAAY,CAC1BhC,KAAMiC,IAAUC,MAAM,IAAIC,WAC1BlC,SAAUgC,IAAUC,MAAM,IAAIC,YAGjBpC,QCxCAqC,UANiB,SAAAC,GAAK,OACnC,kBAAC,IAAWA,EACV,kBAAC,EAAoBA","file":"component---src-templates-categorized-list-jsx-58259282c1583344e991.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport PostsWrapper from '~/components/Common/PostsWrapper';\nimport Card from '~/components/Common/Card';\nimport Pagination from '~/components/Common/Pagination';\nimport getPosts from '~/utils/getPosts';\nimport getPage from '~/utils/getPage';\nimport { PREFIX, CONTENT_PER_PAGE } from '~/constants';\n\nconst CategorizedList = ({ data, location }) => {\n  const page = getPage(location);\n  const [, , category] = location.pathname.split('/');\n  const allPosts = data\n    |> getPosts\n    |> (posts => posts.filter(({ node: { frontmatter: { category: c } } }) => category === c));\n  const postCount = allPosts.length;\n  const posts = allPosts.slice((page - 1) * CONTENT_PER_PAGE, page * CONTENT_PER_PAGE);\n\n  return (\n    <>\n      <PostsWrapper>\n        <Helmet>\n          <title>\n            {`${PREFIX}${category.toUpperCase()}`}\n          </title>\n          <meta name=\"og:title\" content={`${PREFIX}${category.toUpperCase()}`} />\n        </Helmet>\n        {posts.length === 0 ? (\n          <div>\n            No posts.\n          </div>\n        ) : null}\n        {posts.map(({ node: { frontmatter: { images, tags, path, ...otherProps } } }) => (\n          <Card key={path} path={path} images={images} tags={tags} {...otherProps} />\n        ))}\n      </PostsWrapper>\n      <Pagination\n        prefix={`/categories/${category}/`}\n        postCount={postCount}\n        location={location}\n      />\n    </>\n  );\n};\n\nCategorizedList.propTypes = {\n  data: PropTypes.shape({}).isRequired,\n  location: PropTypes.shape({}).isRequired,\n};\n\nexport default CategorizedList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '~/components/layout';\nimport CategorizedList from '~/components/CategorizedList';\n\nconst CategorizedListTemplate = props => (\n  <Layout {...props}>\n    <CategorizedList {...props} />\n  </Layout>\n);\n\nexport default CategorizedListTemplate;\n\nexport const pageQuery = graphql`\n  query CategorizedListQuery {\n    site {\n      siteMetadata {\n        title\n        author\n        homepage\n      }\n    }\n    posts: allMarkdownRemark (\n      filter: { frontmatter: { hide: { ne: true } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            type\n            title\n            category\n            images\n            path\n            tags\n            date\n            summary\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}