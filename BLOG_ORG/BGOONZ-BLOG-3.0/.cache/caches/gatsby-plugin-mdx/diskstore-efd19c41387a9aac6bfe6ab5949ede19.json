{"expireTime":9007200896510407000,"key":"gatsby-plugin-mdx-entire-payload-09f76177c339aa0373eb9a4c9ce4c0ba-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import bimodalProps from './bimodal'","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":37,"offset":37},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This post is a guide on how to use the ","position":{"start":{"line":4,"column":1,"offset":39},"end":{"line":4,"column":40,"offset":78},"indent":[]}},{"type":"link","title":null,"url":"https://tensorflow.org/probability/api_docs/python/tfp/mcmc/HamiltonianMonteCarlo","children":[{"type":"text","value":"Hamiltonian Monte Carlo (HMC) transition kernel","position":{"start":{"line":4,"column":41,"offset":79},"end":{"line":4,"column":88,"offset":126},"indent":[]}}],"position":{"start":{"line":4,"column":40,"offset":78},"end":{"line":4,"column":172,"offset":210},"indent":[]}},{"type":"text","value":" provided by ","position":{"start":{"line":4,"column":172,"offset":210},"end":{"line":4,"column":185,"offset":223},"indent":[]}},{"type":"link","title":null,"url":"https://tensorflow.org/probability","children":[{"type":"text","value":"TensorFlow Probability","position":{"start":{"line":4,"column":186,"offset":224},"end":{"line":4,"column":208,"offset":246},"indent":[]}}],"position":{"start":{"line":4,"column":185,"offset":223},"end":{"line":4,"column":245,"offset":283},"indent":[]}},{"type":"text","value":" to train Bayesian neural networks (BNN) by sampling from their posterior distribution. If you haven't heard of HMC before, check out this ","position":{"start":{"line":4,"column":245,"offset":283},"end":{"line":4,"column":384,"offset":422},"indent":[]}},{"type":"link","title":null,"url":"/blog/hmc-intro","children":[{"type":"text","value":"short introduction","position":{"start":{"line":4,"column":385,"offset":423},"end":{"line":4,"column":403,"offset":441},"indent":[]}}],"position":{"start":{"line":4,"column":384,"offset":422},"end":{"line":4,"column":421,"offset":459},"indent":[]}},{"type":"text","value":". Or, if you just want the 30-second elevator pitch: HMC is a Markov chain Monte Carlo (MCMC) algorithm that avoids the random walk behavior of simpler MCMC methods (such as Metropolis-Hastings or Gibbs sampling) by using Hamilton's equations of classical mechanics to take a series of first-order-gradient-informed steps through an auxiliary phase space which can be projected down onto the probability density you care about. This allows it to massively speed up mixing (i.e. generating a Markov chain of less correlated samples) and converge on higher dimensional target distributions. Although -- upfront disclaimer -- not necessarily all the way up to the tens of thousands to several million dimensions of the posterior distribution of typical neural networks. Whether or not you'll be able to achieve mixing over such huge numbers of dimensions depends strongly on the shape and complexity of the network's posterior and, of course, on your computational resources.","position":{"start":{"line":4,"column":421,"offset":459},"end":{"line":4,"column":1393,"offset":1431},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":39},"end":{"line":4,"column":1393,"offset":1431},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The code in this guide was written for ","position":{"start":{"line":6,"column":3,"offset":1435},"end":{"line":6,"column":42,"offset":1474},"indent":[]}},{"type":"link","title":null,"url":"https://pypi.org/project/tensorflow","children":[{"type":"text","value":"TensorFlow (TF) v2.1","position":{"start":{"line":6,"column":43,"offset":1475},"end":{"line":6,"column":63,"offset":1495},"indent":[]}}],"position":{"start":{"line":6,"column":42,"offset":1474},"end":{"line":6,"column":101,"offset":1533},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":6,"column":101,"offset":1533},"end":{"line":6,"column":106,"offset":1538},"indent":[]}},{"type":"link","title":null,"url":"https://pypi.org/project/tensorflow-probability","children":[{"type":"text","value":"TensorFlow Probability (TFP) v0.9","position":{"start":{"line":6,"column":107,"offset":1539},"end":{"line":6,"column":140,"offset":1572},"indent":[]}}],"position":{"start":{"line":6,"column":106,"offset":1538},"end":{"line":6,"column":190,"offset":1622},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":6,"column":190,"offset":1622},"end":{"line":6,"column":191,"offset":1623},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":1435},"end":{"line":6,"column":191,"offset":1623},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":1433},"end":{"line":6,"column":191,"offset":1623},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Simple Example","position":{"start":{"line":8,"column":4,"offset":1628},"end":{"line":8,"column":18,"offset":1642},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":1625},"end":{"line":8,"column":18,"offset":1642},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To first get a feel for what HMC is doing, let's start with a simple example and visualize it. Let's define a two-dimensional bimodal distribution ","position":{"start":{"line":10,"column":1,"offset":1644},"end":{"line":10,"column":148,"offset":1791},"indent":[]}},{"type":"inlineMath","value":"\\pi(\\vec x)","data":{"hName":"span","hProperties":{"className":"inlineMath"},"hChildren":[{"type":"text","value":"\\pi(\\vec x)"}]},"position":{"start":{"line":10,"column":148,"offset":1791},"end":{"line":10,"column":161,"offset":1804},"indent":[]}},{"type":"text","value":" consisting of two Gaussians that are almost completely disjoint,","position":{"start":{"line":10,"column":161,"offset":1804},"end":{"line":10,"column":226,"offset":1869},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1644},"end":{"line":10,"column":226,"offset":1869},"indent":[]}},{"type":"math","value":"\\pi(\\vec x) = \\Ncal(\\vec\\mu_1, \\mat\\Sigma) + \\Ncal(\\vec\\mu_2, \\mat\\Sigma)","data":{"hName":"div","hProperties":{"className":"math"},"hChildren":[{"type":"text","value":"\\pi(\\vec x) = \\Ncal(\\vec\\mu_1, \\mat\\Sigma) + \\Ncal(\\vec\\mu_2, \\mat\\Sigma)"}]},"position":{"start":{"line":12,"column":1,"offset":1871},"end":{"line":14,"column":3,"offset":1950},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"where","position":{"start":{"line":16,"column":1,"offset":1952},"end":{"line":16,"column":6,"offset":1957},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1952},"end":{"line":16,"column":6,"offset":1957},"indent":[]}},{"type":"math","value":"\\vec\\mu_1 = (2,-2)^T,\n\\quad\n\\vec\\mu_2 = (-2,2)^T,\n\\quad\n\\mat\\Sigma = I_2 = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix}.","data":{"hName":"div","hProperties":{"className":"math"},"hChildren":[{"type":"text","value":"\\vec\\mu_1 = (2,-2)^T,\n\\quad\n\\vec\\mu_2 = (-2,2)^T,\n\\quad\n\\mat\\Sigma = I_2 = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix}."}]},"position":{"start":{"line":18,"column":1,"offset":1959},"end":{"line":24,"column":3,"offset":2085},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Multimodal distributions where the modes barely overlap typically pose difficulties to MCMC algorithms. This is because exploring them fully requires entering and passing through a region of low probability density which, by the very nature of MCMC, is a rare event.","position":{"start":{"line":26,"column":1,"offset":2087},"end":{"line":26,"column":267,"offset":2353},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":2087},"end":{"line":26,"column":267,"offset":2353},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's see how many samples HMC requires to achieve mixing, i.e. to jump from whichever mode we sample first to the other. Once both modes are covered with roughly equal numbers of samples, we can use the generated Markov chain ","position":{"start":{"line":28,"column":1,"offset":2355},"end":{"line":28,"column":228,"offset":2582},"indent":[]}},{"type":"inlineMath","value":"\\Ccal","data":{"hName":"span","hProperties":{"className":"inlineMath"},"hChildren":[{"type":"text","value":"\\Ccal"}]},"position":{"start":{"line":28,"column":228,"offset":2582},"end":{"line":28,"column":235,"offset":2589},"indent":[]}},{"type":"text","value":" to compute accurate expectation values with respect to ","position":{"start":{"line":28,"column":235,"offset":2589},"end":{"line":28,"column":291,"offset":2645},"indent":[]}},{"type":"inlineMath","value":"\\pi","data":{"hName":"span","hProperties":{"className":"inlineMath"},"hChildren":[{"type":"text","value":"\\pi"}]},"position":{"start":{"line":28,"column":291,"offset":2645},"end":{"line":28,"column":296,"offset":2650},"indent":[]}},{"type":"text","value":". For example, say we have an observable ","position":{"start":{"line":28,"column":296,"offset":2650},"end":{"line":28,"column":337,"offset":2691},"indent":[]}},{"type":"inlineMath","value":"f(\\vec x)","data":{"hName":"span","hProperties":{"className":"inlineMath"},"hChildren":[{"type":"text","value":"f(\\vec x)"}]},"position":{"start":{"line":28,"column":337,"offset":2691},"end":{"line":28,"column":348,"offset":2702},"indent":[]}},{"type":"text","value":" and we're interested in the value it's likely to take given the probabilities for different ","position":{"start":{"line":28,"column":348,"offset":2702},"end":{"line":28,"column":441,"offset":2795},"indent":[]}},{"type":"inlineMath","value":"\\vec x","data":{"hName":"span","hProperties":{"className":"inlineMath"},"hChildren":[{"type":"text","value":"\\vec x"}]},"position":{"start":{"line":28,"column":441,"offset":2795},"end":{"line":28,"column":449,"offset":2803},"indent":[]}},{"type":"text","value":" under ","position":{"start":{"line":28,"column":449,"offset":2803},"end":{"line":28,"column":456,"offset":2810},"indent":[]}},{"type":"inlineMath","value":"\\pi(\\vec x)","data":{"hName":"span","hProperties":{"className":"inlineMath"},"hChildren":[{"type":"text","value":"\\pi(\\vec x)"}]},"position":{"start":{"line":28,"column":456,"offset":2810},"end":{"line":28,"column":469,"offset":2823},"indent":[]}},{"type":"text","value":",","position":{"start":{"line":28,"column":469,"offset":2823},"end":{"line":28,"column":470,"offset":2824},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":2355},"end":{"line":28,"column":470,"offset":2824},"indent":[]}},{"type":"math","value":"\\expec_\\pi[f] = \\int_{\\Rbb^2} \\pi(\\vec x) \\, f(\\vec x) \\, \\dif\\vec x.","data":{"hName":"div","hProperties":{"className":"math"},"hChildren":[{"type":"text","value":"\\expec_\\pi[f] = \\int_{\\Rbb^2} \\pi(\\vec x) \\, f(\\vec x) \\, \\dif\\vec x."}]},"position":{"start":{"line":30,"column":1,"offset":2826},"end":{"line":32,"column":3,"offset":2901},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If the Markov chain has converged, we can get an unbiased estimate for this expectation value, by averaging over samples in the chain,","position":{"start":{"line":34,"column":1,"offset":2903},"end":{"line":34,"column":135,"offset":3037},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":2903},"end":{"line":34,"column":135,"offset":3037},"indent":[]}},{"type":"math","value":"\\expec_\\pi[f] \\approx \\hat f = \\frac{1}{|\\Ccal|} \\sum_{\\vec x \\in \\Ccal} f(\\vec x),","data":{"hName":"div","hProperties":{"className":"math"},"hChildren":[{"type":"text","value":"\\expec_\\pi[f] \\approx \\hat f = \\frac{1}{|\\Ccal|} \\sum_{\\vec x \\in \\Ccal} f(\\vec x),"}]},"position":{"start":{"line":36,"column":1,"offset":3039},"end":{"line":38,"column":3,"offset":3128},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here's the code to generate ","position":{"start":{"line":40,"column":1,"offset":3130},"end":{"line":40,"column":29,"offset":3158},"indent":[]}},{"type":"inlineMath","value":"\\Ccal","data":{"hName":"span","hProperties":{"className":"inlineMath"},"hChildren":[{"type":"text","value":"\\Ccal"}]},"position":{"start":{"line":40,"column":29,"offset":3158},"end":{"line":40,"column":36,"offset":3165},"indent":[]}},{"type":"text","value":" using TFP:","position":{"start":{"line":40,"column":36,"offset":3165},"end":{"line":40,"column":47,"offset":3176},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":3130},"end":{"line":40,"column":47,"offset":3176},"indent":[]}},{"type":"code","lang":"py:title=bimodal.py","meta":null,"value":"import numpy as np\nimport plotly.graph_objects as go\nimport tensorflow as tf\nimport tensorflow_probability as tfp\n\ntfd = tfp.distributions\n\nnormals_2d = [\n    tfd.MultivariateNormalDiag([2, -2]),\n    tfd.MultivariateNormalDiag([-2, 2]),\n]\nbimodal = tfd.Mixture(tfd.Categorical([0.5, 0.5]), normals_2d)\n\n\n@tf.function(experimental_compile=True)\ndef sample_chain(*args, **kwargs):\n    \"\"\"@tf.function JIT-compiles a static graph for tfp.mcmc.sample_chain.\n    This significantly improves performance, especially when enabling XLA.\n    https://tensorflow.org/xla#explicit_compilation_with_tffunction\n    https://github.com/tensorflow/probability/issues/728#issuecomment-573704750\n    \"\"\"\n    return tfp.mcmc.sample_chain(*args, **kwargs)\n\n\nstep_size = 1e-3\nkernel = tfp.mcmc.NoUTurnSampler(bimodal.log_prob, step_size=step_size)\nadaptive_kernel = tfp.mcmc.DualAveragingStepSizeAdaptation(\n    kernel,\n    num_adaptation_steps=500,\n    # pkr: previous kernel results, new_ss: new step size\n    step_size_setter_fn=lambda pkr, new_ss: pkr._replace(step_size=new_ss),\n    step_size_getter_fn=lambda pkr: pkr.step_size,\n    log_accept_prob_getter_fn=lambda pkr: pkr.log_accept_ratio,\n)\nchain, trace, final_kernel_results = sample_chain(\n    kernel=adaptive_kernel,\n    num_results=200,\n    current_state=tf.constant([0.1, 0]),\n    return_final_kernel_results=True,\n)\n\nxr = np.linspace(-6, 6, 13)\ndomain = np.stack(np.meshgrid(xr, xr), -1).reshape(-1, 2)\n\ndensity_plot = go.Surface(\n    x=xr, y=xr, z=bimodal.prob(domain).numpy().reshape(len(xr), -1)\n)\nsamples_plot = go.Scatter3d(x=chain[:, 0], y=chain[:, 1], z=bimodal.prob(chain))\n\nfig = go.Figure(data=[density_plot, samples_plot])\nfig.update_layout(height=700, title_text=f\"step size: {step_size}\")","position":{"start":{"line":42,"column":1,"offset":3178},"end":{"line":94,"column":4,"offset":4950},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"These awkward ","position":{"start":{"line":96,"column":1,"offset":4952},"end":{"line":96,"column":15,"offset":4966},"indent":[]}},{"type":"inlineCode","value":"lambda","position":{"start":{"line":96,"column":15,"offset":4966},"end":{"line":96,"column":23,"offset":4974},"indent":[]}},{"type":"text","value":" functions passed to ","position":{"start":{"line":96,"column":23,"offset":4974},"end":{"line":96,"column":44,"offset":4995},"indent":[]}},{"type":"inlineCode","value":"adaptive_kernel","position":{"start":{"line":96,"column":44,"offset":4995},"end":{"line":96,"column":61,"offset":5012},"indent":[]}},{"type":"text","value":" are only necessary due to temporary inconsistencies in TFP's ","position":{"start":{"line":96,"column":61,"offset":5012},"end":{"line":96,"column":123,"offset":5074},"indent":[]}},{"type":"inlineCode","value":"mcmc","position":{"start":{"line":96,"column":123,"offset":5074},"end":{"line":96,"column":129,"offset":5080},"indent":[]}},{"type":"text","value":" module. They will be unnecessary once that receives a good refactor ","position":{"start":{"line":96,"column":129,"offset":5080},"end":{"line":96,"column":198,"offset":5149},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/tensorflow/probability/issues/549#issuecomment-529092462","children":[{"type":"text","value":"as stated here","position":{"start":{"line":96,"column":199,"offset":5150},"end":{"line":96,"column":213,"offset":5164},"indent":[]}}],"position":{"start":{"line":96,"column":198,"offset":5149},"end":{"line":96,"column":291,"offset":5242},"indent":[]}},{"type":"text","value":". If you're reading this post several months down the line, then perhaps all you need to write is","position":{"start":{"line":96,"column":291,"offset":5242},"end":{"line":96,"column":388,"offset":5339},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":4952},"end":{"line":96,"column":388,"offset":5339},"indent":[]}},{"type":"code","lang":"py","meta":null,"value":"adaptive_kernel = tfp.mcmc.DualAveragingStepSizeAdaptation(\n    kernel, num_adaptation_steps=adapt_steps\n)","position":{"start":{"line":98,"column":1,"offset":5341},"end":{"line":102,"column":4,"offset":5457},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The plot you get from running ","position":{"start":{"line":104,"column":1,"offset":5459},"end":{"line":104,"column":31,"offset":5489},"indent":[]}},{"type":"inlineCode","value":"bimodal.py","position":{"start":{"line":104,"column":31,"offset":5489},"end":{"line":104,"column":43,"offset":5501},"indent":[]}},{"type":"text","value":" should look similar to this.","position":{"start":{"line":104,"column":43,"offset":5501},"end":{"line":104,"column":72,"offset":5530},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":5459},"end":{"line":104,"column":72,"offset":5530},"indent":[]}},{"type":"jsx","value":"<LazyPlot {...bimodalProps} />","position":{"start":{"line":106,"column":1,"offset":5532},"end":{"line":106,"column":31,"offset":5562},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Bimodal distribution decorated by 100 HMC samples which already managed to jump the gap between modes.","position":{"start":{"line":108,"column":2,"offset":5565},"end":{"line":108,"column":104,"offset":5667},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":5564},"end":{"line":108,"column":105,"offset":5668},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":5564},"end":{"line":108,"column":105,"offset":5668},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"During the Hamiltonian evolution that's simulated to obtain each new sample in the chain ","position":{"start":{"line":110,"column":1,"offset":5670},"end":{"line":110,"column":90,"offset":5759},"indent":[]}},{"type":"inlineMath","value":"\\Ccal","data":{"hName":"span","hProperties":{"className":"inlineMath"},"hChildren":[{"type":"text","value":"\\Ccal"}]},"position":{"start":{"line":110,"column":90,"offset":5759},"end":{"line":110,"column":97,"offset":5766},"indent":[]}},{"type":"text","value":", the potential energy ","position":{"start":{"line":110,"column":97,"offset":5766},"end":{"line":110,"column":120,"offset":5789},"indent":[]}},{"type":"inlineMath","value":"V","data":{"hName":"span","hProperties":{"className":"inlineMath"},"hChildren":[{"type":"text","value":"V"}]},"position":{"start":{"line":110,"column":120,"offset":5789},"end":{"line":110,"column":123,"offset":5792},"indent":[]}},{"type":"text","value":" corresponds to the negative log of the probability density shown above, ","position":{"start":{"line":110,"column":123,"offset":5792},"end":{"line":110,"column":196,"offset":5865},"indent":[]}},{"type":"inlineMath","value":"V(\\vec x) = -\\log \\pi(\\vec x)","data":{"hName":"span","hProperties":{"className":"inlineMath"},"hChildren":[{"type":"text","value":"V(\\vec x) = -\\log \\pi(\\vec x)"}]},"position":{"start":{"line":110,"column":196,"offset":5865},"end":{"line":110,"column":227,"offset":5896},"indent":[]}},{"type":"text","value":". The two peaks thus correspond to holes (though more shallow than in the above plot due to the log) in the otherwise flat surface on which the Hamiltonian simulation takes place. The starting point from which the simulation kicks off is randomly initialized. It then takes a few iterations before the head of the chain \"falls\" into one of the holes. Once there, Hamiltonian dynamics will likely move around there for a while and gather samples from that region of increased probability/decreased potential energy. To eventually transition between the two modes requires starting out a Hamiltonian step with a particularly large initial momentum. The momenta are randomly sampled from a diagonal Gaussian, ","position":{"start":{"line":110,"column":227,"offset":5896},"end":{"line":110,"column":933,"offset":6602},"indent":[]}},{"type":"inlineMath","value":"\\vec p \\sim \\Ncal(0, \\mat\\mat\\Sigma)","data":{"hName":"span","hProperties":{"className":"inlineMath"},"hChildren":[{"type":"text","value":"\\vec p \\sim \\Ncal(0, \\mat\\mat\\Sigma)"}]},"position":{"start":{"line":110,"column":933,"offset":6602},"end":{"line":110,"column":971,"offset":6640},"indent":[]}},{"type":"text","value":", at the start of each new evolution (independent of the current position). This ensures that lower energy points are more likely to be sampled since the Gaussian has a higher density for small values of ","position":{"start":{"line":110,"column":971,"offset":6640},"end":{"line":110,"column":1175,"offset":6844},"indent":[]}},{"type":"inlineMath","value":"|\\vec p|","data":{"hName":"span","hProperties":{"className":"inlineMath"},"hChildren":[{"type":"text","value":"|\\vec p|"}]},"position":{"start":{"line":110,"column":1175,"offset":6844},"end":{"line":110,"column":1185,"offset":6854},"indent":[]}},{"type":"text","value":". Only if we happen to sample a momentum that's sufficiently large and is pointing in the right direction can we overcome the potential barrier between the two modes.","position":{"start":{"line":110,"column":1185,"offset":6854},"end":{"line":110,"column":1351,"offset":7020},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":5670},"end":{"line":110,"column":1351,"offset":7020},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"HMC Routines","position":{"start":{"line":112,"column":4,"offset":7025},"end":{"line":112,"column":16,"offset":7037},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":7022},"end":{"line":112,"column":16,"offset":7037},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now let's look at actually applying HMC to the parameters of a neural network. For each parameter, we assume a Gaussian prior. First, let's define a few functions to handle the grunt work in this exercise.","position":{"start":{"line":114,"column":1,"offset":7039},"end":{"line":114,"column":206,"offset":7244},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":7039},"end":{"line":114,"column":206,"offset":7244},"indent":[]}},{"type":"code","lang":"py:title=bnn/hmc.py","meta":null,"value":"import functools as ft\n\nimport tensorflow as tf\nimport tensorflow_probability as tfp\n\nfrom bnn import build_net, chunks, target_log_prob_fn_factory\n\n\ndef pre_train_nn(X_train, y_train, nodes_per_layer, epochs=100):\n    \"\"\"Pre-train NN to get good starting point for HMC.\n\n    Args:\n        nodes_per_layer (list): the number of nodes in each dense layer\n        X_train (Tensor or np.array): training samples\n        y_train (Tensor or np.array): training labels\n\n    Returns:\n        Tensor: list of arrays specifying the weights of the trained network\n        model: Keras Sequential model\n    \"\"\"\n    layers = [tf.keras.layers.Dense(n, activation=\"relu\") for n in nodes_per_layer]\n    layers[-1].activation = tf.identity  # Make last layer linear.\n    model = tf.keras.Sequential(layers)\n\n    model.compile(loss=\"mse\", optimizer=\"adam\")\n    model.fit(X_train, y_train, epochs=epochs, verbose=0)\n    return model.get_weights(), model\n\n\ndef trace_fn(current_state, kernel_results, summary_freq=10, callbacks=[]):\n    \"\"\"Can be passed to the HMC kernel to obtain a trace of intermediate\n    kernel results and histograms of the network parameters in Tensorboard.\n    \"\"\"\n    step = kernel_results.step\n    with tf.summary.record_if(tf.equal(step % summary_freq, 0)):\n        for idx, tensor in enumerate(current_state):\n            count = idx // 2 + 1\n            name = (\"w\" if idx % 2 == 0 else \"b\") + str(count)\n            tf.summary.histogram(name, tensor, step=step)\n        return kernel_results, [cb(*current_state) for cb in callbacks]\n\n\n@tf.function(experimental_compile=True)\ndef sample_chain(*args, **kwargs):\n    \"\"\"Compile static graph for tfp.mcmc.sample_chain to improve performance.\n    \"\"\"\n    return tfp.mcmc.sample_chain(*args, **kwargs)\n\n\ndef run_hmc(\n    target_log_prob_fn,\n    step_size=0.01,\n    num_leapfrog_steps=10,\n    num_burnin_steps=1000,\n    num_results=1000,\n    current_state=None,\n    resume=None,\n    log_dir=\"logs/hmc/\",\n    sampler=\"nuts\",\n    step_size_adapter=\"dual_averaging\",\n    **kwargs,\n):\n    \"\"\"Use adaptive HMC to generate a Markov chain of length num_results.\n\n    Args:\n        target_log_prob_fn {callable}: Determines the stationary distribution\n        the Markov chain should converge to.\n\n    Returns:\n        burnin(s): Discarded samples generated during warm-up\n        chain(s): Markov chain(s) of samples distributed according to\n            target_log_prob_fn (if converged)\n        trace: the data collected by trace_fn\n        final_kernel_result: kernel results of the last step (in case the\n            computation needs to be resumed)\n    \"\"\"\n    err = \"Either current_state or resume is required when calling run_hmc\"\n    assert current_state is not None or resume is not None, err\n\n    summary_writer = tf.summary.create_file_writer(log_dir)\n\n    step_size_adapter = {\n        \"simple\": tfp.mcmc.SimpleStepSizeAdaptation,\n        \"dual_averaging\": tfp.mcmc.DualAveragingStepSizeAdaptation,\n    }[step_size_adapter]\n    if sampler == \"nuts\":\n        kernel = tfp.mcmc.NoUTurnSampler(target_log_prob_fn, step_size=step_size)\n        adaptive_kernel = step_size_adapter(\n            kernel,\n            num_adaptation_steps=num_burnin_steps,\n            step_size_setter_fn=lambda pkr, new_step_size: pkr._replace(\n                step_size=new_step_size\n            ),\n            step_size_getter_fn=lambda pkr: pkr.step_size,\n            log_accept_prob_getter_fn=lambda pkr: pkr.log_accept_ratio,\n        )\n    elif sampler == \"hmc\":\n        kernel = tfp.mcmc.HamiltonianMonteCarlo(\n            target_log_prob_fn,\n            step_size=step_size,\n            num_leapfrog_steps=num_leapfrog_steps,\n        )\n        adaptive_kernel = step_size_adapter(\n            kernel, num_adaptation_steps=num_burnin_steps\n        )\n\n    if resume:\n        prev_chain, prev_trace, prev_kernel_results = resume\n        step = len(prev_chain)\n        current_state = tf.nest.map_structure(lambda chain: chain[-1], prev_chain)\n    else:\n        prev_kernel_results = adaptive_kernel.bootstrap_results(current_state)\n        step = 0\n\n    tf.summary.trace_on(graph=True, profiler=False)\n\n    chain, trace, final_kernel_results = sample_chain(\n        kernel=adaptive_kernel,\n        current_state=current_state,\n        previous_kernel_results=prev_kernel_results,\n        num_results=num_burnin_steps + num_results,\n        trace_fn=ft.partial(trace_fn, summary_freq=20),\n        return_final_kernel_results=True,\n        **kwargs,\n    )\n\n    with summary_writer.as_default():\n        tf.summary.trace_export(name=\"hmc_trace\", step=step)\n    summary_writer.close()\n\n    if resume:\n        chain = nest_concat(prev_chain, chain)\n        trace = nest_concat(prev_trace, trace)\n    burnin, samples = zip(*[(t[:-num_results], t[-num_results:]) for t in chain])\n    return burnin, samples, trace, final_kernel_results\n\n\ndef predict_from_chain(chain, X_test, uncertainty=\"aleatoric+epistemic\"):\n    \"\"\"Takes a Markov chain of NN configurations and does the actual\n    prediction on a test set X_test including aleatoric and optionally\n    epistemic uncertainty estimation.\n    \"\"\"\n    err = f\"unrecognized uncertainty type: {uncertainty}\"\n    assert uncertainty in [\"aleatoric\", \"aleatoric+epistemic\"], err\n\n    if uncertainty == \"aleatoric\":\n        post_params = [tf.reduce_mean(t, axis=0) for t in chain]\n        post_model = build_net(post_params)\n        y_pred, y_var = post_model(X_test, training=False)\n\n        return y_pred.numpy(), y_var.numpy()\n\n    if uncertainty == \"aleatoric+epistemic\":\n        restructured_chain = [\n            [tensor[i] for tensor in chain] for i in range(len(chain[0]))\n        ]\n\n        def predict(params):\n            post_model = build_net(params)\n            y_pred, y_var = post_model(X_test, training=False)\n            return y_pred, y_var\n\n        preds = [predict(chunks(params, 2)) for params in restructured_chain]\n        y_pred_mc_samples, y_var_mc_samples = tf.unstack(preds, axis=1,)\n        y_pred, y_var_epist = tf.nn.moments(y_pred_mc_samples, axes=0)\n        y_var_aleat = tf.reduce_mean(y_var_mc_samples, axis=0)\n        y_var_tot = y_var_epist + y_var_aleat\n        return y_pred, y_var_tot\n\n\ndef nest_concat(*args, axis=0):\n    \"\"\"Utility function for concatenating a new Markov chain or trace with\n    older ones when resuming a previous calculation.\n    \"\"\"\n    return tf.nest.map_structure(lambda *parts: tf.concat(parts, axis=axis), *args)","position":{"start":{"line":116,"column":1,"offset":7246},"end":{"line":292,"column":4,"offset":13728},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"BNN Routines","position":{"start":{"line":294,"column":4,"offset":13733},"end":{"line":294,"column":16,"offset":13745},"indent":[]}}],"position":{"start":{"line":294,"column":1,"offset":13730},"end":{"line":294,"column":16,"offset":13745},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"bnn/hmc.py","position":{"start":{"line":296,"column":1,"offset":13747},"end":{"line":296,"column":13,"offset":13759},"indent":[]}},{"type":"text","value":" imports a module containing functions for building, initializing and calculating the loss (negative log probability) of BNN's with Gaussian posterior. Here's what that module looks like.","position":{"start":{"line":296,"column":13,"offset":13759},"end":{"line":296,"column":200,"offset":13946},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":13747},"end":{"line":296,"column":200,"offset":13946},"indent":[]}},{"type":"code","lang":"py:title=bnn/__init__.py","meta":null,"value":"import functools as ft\n\nimport tensorflow as tf\nimport tensorflow_probability as tfp\n\n\ndef dense(inputs, w, b, activation=tf.identity):\n    return activation(tf.matmul(inputs, w) + b)\n\n\ndef build_net(params, activation=tf.nn.relu):\n    def model(X, training=True):\n        for w, b in params[:-1]:\n            X = dense(X, w, b, activation)\n        # final linear layer\n        X = dense(X, *params[-1])\n        y_pred, y_log_var = tf.unstack(X, axis=-1)\n        y_var = tf.exp(y_log_var)\n        if training:\n            return tfp.distributions.Normal(loc=y_pred, scale=tf.sqrt(y_var))\n        return y_pred, y_var\n\n    return model\n\n\ndef bnn_log_prob_fn(X, y, params, get_mean=False):\n    \"\"\"Compute log likelihood of predicted labels y given features X and params.\n\n    Args:\n        X (np.array): 2d feature values.\n        y (np.array): 1d labels (ground truth).\n        params (list): [[w1, b1], ...] containing 2d/1d arrays for weights/biases.\n        get_mean (bool, optional): Whether to return the mean log\n            probability over all labels for diagnostics, e.g. to\n            compare train and test set performance.\n\n    Returns:\n        tf.tensor: Sum or mean of log probabilities of all labels.\n    \"\"\"\n    net = build_net(params)\n    labels_dist = net(X)\n    if get_mean:\n        return tf.reduce_mean(labels_dist.log_prob(y))\n    return tf.reduce_sum(labels_dist.log_prob(y))\n\n\ndef prior_log_prob_fn(w_prior, b_prior, params):\n    log_prob = 0\n    for w, b in params:\n        log_prob += tf.reduce_sum(w_prior.log_prob(w))\n        log_prob += tf.reduce_sum(b_prior.log_prob(b))\n    return log_prob\n\n\ndef target_log_prob_fn_factory(w_prior, b_prior, X_train, y_train):\n    # This signature is forced by TFP's HMC kernel which calls log_prob_fn(*chains).\n    def target_log_prob_fn(*params):\n        if not isinstance(params[0], (list, tuple)):\n            params = chunks(params, 2)\n        log_prob = prior_log_prob_fn(w_prior, b_prior, params)\n        log_prob += bnn_log_prob_fn(X_train, y_train, params)\n        return log_prob\n\n    return target_log_prob_fn\n\n\ndef tracer_factory(X, y):\n    return lambda params: ft.partial(bnn_log_prob_fn, X, y, get_mean=True)(params)\n\n\ndef chunks(lst, n):\n    # Subdivide lst into successive n-sized chunks.\n    return [lst[i : i + n] for i in range(0, len(lst), n)]\n\n\ndef get_random_initial_state(w_prior, b_prior, nodes_per_layer, overdisp=1.0):\n    \"\"\"Draw random samples for weights and biases of a NN according to some\n    specified priors. distributions. This set of parameter values can serve as a\n    starting point for MCMC or gradient descent training.\n    \"\"\"\n    init_state = []\n    for n1, n2 in zip(nodes_per_layer, nodes_per_layer[1:]):\n        w_shape, b_shape = [n1, n2], n2\n        # Use overdispersion > 1 for better R-hat statistics.\n        w = w_prior.sample(w_shape) * overdisp\n        b = b_prior.sample(b_shape) * overdisp\n        init_state.append([tf.Variable(w), tf.Variable(b)])\n    return init_state","position":{"start":{"line":298,"column":1,"offset":13948},"end":{"line":387,"column":4,"offset":16971},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"MAP Routines","position":{"start":{"line":389,"column":5,"offset":16977},"end":{"line":389,"column":17,"offset":16989},"indent":[]}}],"position":{"start":{"line":389,"column":1,"offset":16973},"end":{"line":389,"column":17,"offset":16989},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, to save some time and computation let's try to initialize our Hamiltonian simulation from a good starting point by first training a maximum a posteriori (MAP) network. We can then extract its parameter values and plug them into the HMC kernel as initial state. The hope is that by doing so, HMC will require less warm up before finding its way into high-probability regions of parameter space. If you're unfamiliar with ","position":{"start":{"line":391,"column":1,"offset":16991},"end":{"line":391,"column":430,"offset":17420},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Maximum_a_posteriori_estimation","children":[{"type":"text","value":"MAP","position":{"start":{"line":391,"column":431,"offset":17421},"end":{"line":391,"column":434,"offset":17424},"indent":[]}}],"position":{"start":{"line":391,"column":430,"offset":17420},"end":{"line":391,"column":498,"offset":17488},"indent":[]}},{"type":"text","value":", it's basically just maximum likelihood inference combined with some priors for regularization.","position":{"start":{"line":391,"column":498,"offset":17488},"end":{"line":391,"column":594,"offset":17584},"indent":[]}}],"position":{"start":{"line":391,"column":1,"offset":16991},"end":{"line":391,"column":594,"offset":17584},"indent":[]}},{"type":"code","lang":"py:title=bnn/map.py","meta":null,"value":"import numpy as np\nimport tensorflow as tf\n\n\ndef get_map_trace(target_log_prob_fn, state, n_iter=1000, save_every=10, callbacks=[]):\n    optimizer = tf.optimizers.Adam()\n\n    @tf.function\n    def minimize():\n        optimizer.minimize(lambda: -target_log_prob_fn(*state), state)\n\n    state_trace, cb_trace = [], [[] for _ in callbacks]\n    for i in range(n_iter):\n        if i % save_every == 0:\n            state_trace.append(state)\n            for trace, cb in zip(cb_trace, callbacks):\n                trace.append(cb(state).numpy())\n        minimize()\n\n    return state_trace, cb_trace\n\n\ndef get_best_map_state(map_trace, map_log_probs):\n    # map_log_probs[0/1]: train/test log probability\n    test_set_max_log_prob_idx = np.argmax(map_log_probs[1])\n    # Return MAP params that achieved highest test set likelihood.\n    return map_trace[test_set_max_log_prob_idx]\n\n\ndef get_nodes_per_layer(n_features, net_taper=(1, 0.5, 0.2, 0.1)):\n    nodes_per_layer = [int(n_features * x) for x in net_taper]\n    # Ensure the last layer has two nodes so that output can be split into\n    # predictive mean and learned loss attenuation (see eq. (7) of\n    # https://arxiv.org/abs/1703.04977) which the network learns individually.\n    nodes_per_layer.append(2)\n    return nodes_per_layer","position":{"start":{"line":393,"column":1,"offset":17586},"end":{"line":430,"column":4,"offset":18892},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Boston Housing","position":{"start":{"line":432,"column":4,"offset":18897},"end":{"line":432,"column":18,"offset":18911},"indent":[]}}],"position":{"start":{"line":432,"column":1,"offset":18894},"end":{"line":432,"column":18,"offset":18911},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, let's look at a concrete example by training a network with HMC to predict Boston housing prices and compare its performance with the MAP network. (The following is a ","position":{"start":{"line":434,"column":1,"offset":18913},"end":{"line":434,"column":177,"offset":19089},"indent":[]}},{"type":"link","title":null,"url":"https://code.visualstudio.com/docs/python/jupyter-support-py","children":[{"type":"text","value":"VS Code-style Jupyter notebook","position":{"start":{"line":434,"column":178,"offset":19090},"end":{"line":434,"column":208,"offset":19120},"indent":[]}}],"position":{"start":{"line":434,"column":177,"offset":19089},"end":{"line":434,"column":271,"offset":19183},"indent":[]}},{"type":"text","value":", the ","position":{"start":{"line":434,"column":271,"offset":19183},"end":{"line":434,"column":277,"offset":19189},"indent":[]}},{"type":"inlineCode","value":"# %%","position":{"start":{"line":434,"column":277,"offset":19189},"end":{"line":434,"column":283,"offset":19195},"indent":[]}},{"type":"text","value":" are cell delimiters.)","position":{"start":{"line":434,"column":283,"offset":19195},"end":{"line":434,"column":305,"offset":19217},"indent":[]}}],"position":{"start":{"line":434,"column":1,"offset":18913},"end":{"line":434,"column":305,"offset":19217},"indent":[]}},{"type":"code","lang":"py:title=boston-housing-hmc.py","meta":null,"value":"# %%\nimport tensorflow as tf\nimport tensorflow_probability as tfp\n\nfrom bnn import (\n    get_random_initial_state,\n    target_log_prob_fn_factory,\n    tracer_factory,\n)\nfrom bnn.hmc import predict_from_chain, run_hmc\nfrom bnn.map import get_best_map_state, get_map_trace, get_nodes_per_layer\n\n# %%\n# About the data: https://kaggle.com/c/boston-housing\ntrain, test = tf.keras.datasets.boston_housing.load_data()\nX_train, y_train, X_test, y_test = [arr.astype(\"float32\") for arr in [*train, *test]]\n\n\n# %%\nweight_prior = tfp.distributions.Normal(0, 0.2)\nbias_prior = tfp.distributions.Normal(0, 0.2)\n\n\n# %%\nlog_prob_tracers = (\n    tracer_factory(X_train, y_train),\n    tracer_factory(X_test, y_test),\n)\n\nn_features = X_train.shape[-1]\nrandom_initial_state = get_random_initial_state(\n    weight_prior, bias_prior, get_nodes_per_layer(n_features)\n)\n\ntrace, log_probs = get_map_trace(\n    target_log_prob_fn_factory(weight_prior, bias_prior, X_train, y_train),\n    random_initial_state,\n    n_iter=3000,\n    callbacks=log_prob_tracers,\n)\nbest_map_params = get_best_map_state(trace, log_probs)\n\n\n# %%\nmap_nn = bnn.build_net(best_map_params)\nmap_y_pred, map_y_var = map_nn(X_test, training=False)\n\n\n# %%\nbnn_log_prob_fn = target_log_prob_fn_factory(weight_prior, bias_prior, X_train, y_train)\n_, samples, _, _ = run_hmc(bnn_log_prob_fn, current_state=best_map_params)\nhmc_y_pred, hmc_y_var = predict_from_chain(samples, X_test)","position":{"start":{"line":436,"column":1,"offset":19219},"end":{"line":489,"column":4,"offset":20679},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can plot the predicted means (","position":{"start":{"line":491,"column":1,"offset":20681},"end":{"line":491,"column":34,"offset":20714},"indent":[]}},{"type":"inlineCode","value":"map_y_pred","position":{"start":{"line":491,"column":34,"offset":20714},"end":{"line":491,"column":46,"offset":20726},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":491,"column":46,"offset":20726},"end":{"line":491,"column":48,"offset":20728},"indent":[]}},{"type":"inlineCode","value":"hmc_y_pred","position":{"start":{"line":491,"column":48,"offset":20728},"end":{"line":491,"column":60,"offset":20740},"indent":[]}},{"type":"text","value":") against the test set's ground truth (","position":{"start":{"line":491,"column":60,"offset":20740},"end":{"line":491,"column":99,"offset":20779},"indent":[]}},{"type":"inlineCode","value":"y_test","position":{"start":{"line":491,"column":99,"offset":20779},"end":{"line":491,"column":107,"offset":20787},"indent":[]}},{"type":"text","value":") to get an idea of the quality of predictions. Moreover, let's plot the predicted standard deviation (","position":{"start":{"line":491,"column":107,"offset":20787},"end":{"line":491,"column":210,"offset":20890},"indent":[]}},{"type":"inlineCode","value":"map_y_var ** 0.5","position":{"start":{"line":491,"column":210,"offset":20890},"end":{"line":491,"column":228,"offset":20908},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":491,"column":228,"offset":20908},"end":{"line":491,"column":230,"offset":20910},"indent":[]}},{"type":"inlineCode","value":"hmc_y_var ** 0.5","position":{"start":{"line":491,"column":230,"offset":20910},"end":{"line":491,"column":248,"offset":20928},"indent":[]}},{"type":"text","value":") as error bars to see if the network's Bayesian nature affords as any useful information about the confidence in its predictions. If it's any good at estimating its own uncertainty, we'd expect points deviating from the parity line (","position":{"start":{"line":491,"column":248,"offset":20928},"end":{"line":491,"column":482,"offset":21162},"indent":[]}},{"type":"inlineMath","value":"y_\\text{test} = y_\\text{pred}","data":{"hName":"span","hProperties":{"className":"inlineMath"},"hChildren":[{"type":"text","value":"y_\\text{test} = y_\\text{pred}"}]},"position":{"start":{"line":491,"column":482,"offset":21162},"end":{"line":491,"column":513,"offset":21193},"indent":[]}},{"type":"text","value":") to exhibit increased predicted variance. And indeed, with a few exceptions, that's what we get for both MAP and HMC.","position":{"start":{"line":491,"column":513,"offset":21193},"end":{"line":491,"column":631,"offset":21311},"indent":[]}}],"position":{"start":{"line":491,"column":1,"offset":20681},"end":{"line":491,"column":631,"offset":21311},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"boston-test-vs-pred-map.svg","alt":"MAP Prediction vs ground truth","position":{"start":{"line":493,"column":1,"offset":21313},"end":{"line":493,"column":63,"offset":21375},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":493,"column":63,"offset":21375},"end":{"line":494,"column":1,"offset":21376},"indent":[1]}},{"type":"emphasis","children":[{"type":"strong","children":[{"type":"text","value":"MAP","position":{"start":{"line":494,"column":4,"offset":21379},"end":{"line":494,"column":7,"offset":21382},"indent":[]}}],"position":{"start":{"line":494,"column":2,"offset":21377},"end":{"line":494,"column":9,"offset":21384},"indent":[]}},{"type":"text","value":" predictions vs ground truth","position":{"start":{"line":494,"column":9,"offset":21384},"end":{"line":494,"column":37,"offset":21412},"indent":[]}}],"position":{"start":{"line":494,"column":1,"offset":21376},"end":{"line":494,"column":38,"offset":21413},"indent":[]}}],"position":{"start":{"line":493,"column":1,"offset":21313},"end":{"line":494,"column":38,"offset":21413},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"boston-test-vs-pred-hmc.svg","alt":"HMC predictions vs ground truth","position":{"start":{"line":496,"column":1,"offset":21415},"end":{"line":496,"column":64,"offset":21478},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":496,"column":64,"offset":21478},"end":{"line":497,"column":1,"offset":21479},"indent":[1]}},{"type":"emphasis","children":[{"type":"strong","children":[{"type":"text","value":"HMC","position":{"start":{"line":497,"column":4,"offset":21482},"end":{"line":497,"column":7,"offset":21485},"indent":[]}}],"position":{"start":{"line":497,"column":2,"offset":21480},"end":{"line":497,"column":9,"offset":21487},"indent":[]}},{"type":"text","value":" predictions vs ground truth","position":{"start":{"line":497,"column":9,"offset":21487},"end":{"line":497,"column":37,"offset":21515},"indent":[]}}],"position":{"start":{"line":497,"column":1,"offset":21479},"end":{"line":497,"column":38,"offset":21516},"indent":[]}}],"position":{"start":{"line":496,"column":1,"offset":21415},"end":{"line":497,"column":38,"offset":21516},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The full code including the boring parts for generating plots can be found on ","position":{"start":{"line":499,"column":1,"offset":21518},"end":{"line":499,"column":79,"offset":21596},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/janosh/thermo/blob/main/src/bnn/hmc.py","children":[{"type":"text","value":"GitHub","position":{"start":{"line":499,"column":80,"offset":21597},"end":{"line":499,"column":86,"offset":21603},"indent":[]}}],"position":{"start":{"line":499,"column":79,"offset":21596},"end":{"line":499,"column":146,"offset":21663},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":499,"column":146,"offset":21663},"end":{"line":499,"column":147,"offset":21664},"indent":[]}}],"position":{"start":{"line":499,"column":1,"offset":21518},"end":{"line":499,"column":147,"offset":21664},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Future prospects","position":{"start":{"line":501,"column":4,"offset":21669},"end":{"line":501,"column":20,"offset":21685},"indent":[]}}],"position":{"start":{"line":501,"column":1,"offset":21666},"end":{"line":501,"column":20,"offset":21685},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"TFP is still in the process of adding more functionality to its ","position":{"start":{"line":503,"column":1,"offset":21687},"end":{"line":503,"column":65,"offset":21751},"indent":[]}},{"type":"inlineCode","value":"mcmc","position":{"start":{"line":503,"column":65,"offset":21751},"end":{"line":503,"column":71,"offset":21757},"indent":[]}},{"type":"text","value":" module. For instance, both the ","position":{"start":{"line":503,"column":71,"offset":21757},"end":{"line":503,"column":103,"offset":21789},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/tensorflow/probability/blob/23573a10f203bf740e69f52387bbe8070703eda5/tensorflow_probability/python/experimental/mcmc/nuts.py#L75","children":[{"type":"inlineCode","value":"NoUTurnSampler","position":{"start":{"line":503,"column":104,"offset":21790},"end":{"line":503,"column":120,"offset":21806},"indent":[]}}],"position":{"start":{"line":503,"column":103,"offset":21789},"end":{"line":503,"column":270,"offset":21956},"indent":[]}},{"type":"text","value":" and the ","position":{"start":{"line":503,"column":270,"offset":21956},"end":{"line":503,"column":279,"offset":21965},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/tensorflow/probability/blob/23573a10f203bf740e69f52387bbe8070703eda5/tensorflow_probability/python/mcmc/dual_averaging_step_size_adaptation.py#L97","children":[{"type":"inlineCode","value":"DualAveragingStepSizeAdaptation","position":{"start":{"line":503,"column":280,"offset":21966},"end":{"line":503,"column":313,"offset":21999},"indent":[]}}],"position":{"start":{"line":503,"column":279,"offset":21965},"end":{"line":503,"column":481,"offset":22167},"indent":[]}},{"type":"text","value":" appeared only days before this post was published. They're both great improvements over the regular ","position":{"start":{"line":503,"column":481,"offset":22167},"end":{"line":503,"column":582,"offset":22268},"indent":[]}},{"type":"link","title":null,"url":"https://tensorflow.org/probability/api_docs/python/tfp/mcmc/HamiltonianMonteCarlo","children":[{"type":"inlineCode","value":"HamiltonianMonteCarlo","position":{"start":{"line":503,"column":583,"offset":22269},"end":{"line":503,"column":606,"offset":22292},"indent":[]}}],"position":{"start":{"line":503,"column":582,"offset":22268},"end":{"line":503,"column":690,"offset":22376},"indent":[]}},{"type":"text","value":" kernel and ","position":{"start":{"line":503,"column":690,"offset":22376},"end":{"line":503,"column":702,"offset":22388},"indent":[]}},{"type":"link","title":null,"url":"https://tensorflow.org/probability/api_docs/python/tfp/mcmc/SimpleStepSizeAdaptation","children":[{"type":"inlineCode","value":"SimpleStepSizeAdaptation","position":{"start":{"line":503,"column":703,"offset":22389},"end":{"line":503,"column":729,"offset":22415},"indent":[]}}],"position":{"start":{"line":503,"column":702,"offset":22388},"end":{"line":503,"column":816,"offset":22502},"indent":[]}},{"type":"text","value":", respectively. The former enables HMC to scale to even larger problems in terms of state space dimensionality while the latter should allow the kernel to converge to optimal step sizes faster. I'm excited to see where this is headed.","position":{"start":{"line":503,"column":816,"offset":22502},"end":{"line":503,"column":1050,"offset":22736},"indent":[]}}],"position":{"start":{"line":503,"column":1,"offset":21687},"end":{"line":503,"column":1050,"offset":22736},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Further reading","position":{"start":{"line":505,"column":4,"offset":22741},"end":{"line":505,"column":19,"offset":22756},"indent":[]}}],"position":{"start":{"line":505,"column":1,"offset":22738},"end":{"line":505,"column":19,"offset":22756},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://colcarroll.github.io/ppl-api","children":[{"type":"text","value":"A tour of probabilistic programming language APIs","position":{"start":{"line":507,"column":4,"offset":22761},"end":{"line":507,"column":53,"offset":22810},"indent":[]}}],"position":{"start":{"line":507,"column":3,"offset":22760},"end":{"line":507,"column":92,"offset":22849},"indent":[]}},{"type":"text","value":" by Colin Carroll. His entire blog is about MCMC and probabilistic programming and he has a bunch more really interesting posts on those topics. I highly recommend checking those out.","position":{"start":{"line":507,"column":92,"offset":22849},"end":{"line":507,"column":275,"offset":23032},"indent":[]}}],"position":{"start":{"line":507,"column":3,"offset":22760},"end":{"line":507,"column":275,"offset":23032},"indent":[]}}],"position":{"start":{"line":507,"column":1,"offset":22758},"end":{"line":507,"column":275,"offset":23032},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"There's also an interesting ","position":{"start":{"line":508,"column":3,"offset":23035},"end":{"line":508,"column":31,"offset":23063},"indent":[]}},{"type":"link","title":null,"url":"https://arxiv.org/abs/2002.01184","children":[{"type":"text","value":"arXiv paper by the TFP team","position":{"start":{"line":508,"column":32,"offset":23064},"end":{"line":508,"column":59,"offset":23091},"indent":[]}}],"position":{"start":{"line":508,"column":31,"offset":23063},"end":{"line":508,"column":94,"offset":23126},"indent":[]}},{"type":"text","value":" published in Feb 2020 that explains what motivated the design decisions in their ","position":{"start":{"line":508,"column":94,"offset":23126},"end":{"line":508,"column":176,"offset":23208},"indent":[]}},{"type":"inlineCode","value":"mcmc","position":{"start":{"line":508,"column":176,"offset":23208},"end":{"line":508,"column":182,"offset":23214},"indent":[]}},{"type":"text","value":" module.","position":{"start":{"line":508,"column":182,"offset":23214},"end":{"line":508,"column":190,"offset":23222},"indent":[]}}],"position":{"start":{"line":508,"column":3,"offset":23035},"end":{"line":508,"column":190,"offset":23222},"indent":[]}}],"position":{"start":{"line":508,"column":1,"offset":23033},"end":{"line":508,"column":190,"offset":23222},"indent":[]}}],"position":{"start":{"line":507,"column":1,"offset":22758},"end":{"line":508,"column":190,"offset":23222},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Training BNNs with HMC\",\"slug\":\"/hmc-bnn\",\"date\":\"2019-09-05T00:00:00.000Z\",\"cover\":{\"img\":\"hmc-bnn.svg\"},\"tags\":[\"Python\",\"Machine Learning\",\"Statistics\",\"Science\"],\"showToc\":true}","position":{"start":{"line":511,"column":1,"offset":23225},"end":{"line":511,"column":220,"offset":23444},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":511,"column":220,"offset":23444}}},"scopeImports":["import bimodalProps from './bimodal'","import * as React from 'react'"],"scopeIdentifiers":["bimodalProps","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Training BNNs with HMC\",\n  \"slug\": \"/hmc-bnn\",\n  \"date\": \"2019-09-05T00:00:00.000Z\",\n  \"cover\": {\n    \"img\": \"hmc-bnn.svg\"\n  },\n  \"tags\": [\"Python\", \"Machine Learning\", \"Statistics\", \"Science\"],\n  \"showToc\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar LazyPlot = makeShortcode(\"LazyPlot\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This post is a guide on how to use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tensorflow.org/probability/api_docs/python/tfp/mcmc/HamiltonianMonteCarlo\"\n  }), \"Hamiltonian Monte Carlo (HMC) transition kernel\"), \" provided by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tensorflow.org/probability\"\n  }), \"TensorFlow Probability\"), \" to train Bayesian neural networks (BNN) by sampling from their posterior distribution. If you haven\\u2019t heard of HMC before, check out this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/blog/hmc-intro\"\n  }), \"short introduction\"), \". Or, if you just want the 30-second elevator pitch: HMC is a Markov chain Monte Carlo (MCMC) algorithm that avoids the random walk behavior of simpler MCMC methods (such as Metropolis-Hastings or Gibbs sampling) by using Hamilton\\u2019s equations of classical mechanics to take a series of first-order-gradient-informed steps through an auxiliary phase space which can be projected down onto the probability density you care about. This allows it to massively speed up mixing (i.e. generating a Markov chain of less correlated samples) and converge on higher dimensional target distributions. Although \\u2014 upfront disclaimer \\u2014 not necessarily all the way up to the tens of thousands to several million dimensions of the posterior distribution of typical neural networks. Whether or not you\\u2019ll be able to achieve mixing over such huge numbers of dimensions depends strongly on the shape and complexity of the network\\u2019s posterior and, of course, on your computational resources.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The code in this guide was written for \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pypi.org/project/tensorflow\"\n  }), \"TensorFlow (TF) v2.1\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pypi.org/project/tensorflow-probability\"\n  }), \"TensorFlow Probability (TFP) v0.9\"), \".\")), mdx(\"h2\", {\n    \"id\": \"simple-example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simple-example\",\n    \"aria-label\": \"simple example permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Simple Example\"), mdx(\"p\", null, \"To first get a feel for what HMC is doing, let\\u2019s start with a simple example and visualize it. Let\\u2019s define a two-dimensional bimodal distribution \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"\\u03C0\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"x\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"\\\\pi(\\\\vec x)\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.03588em\"\n    }\n  }), \"\\u03C0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"x\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\")))), \" consisting of two Gaussians that are almost completely disjoint,\"), mdx(\"span\", {\n    \"className\": \"katex-display\"\n  }, mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\",\n    \"display\": \"block\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"\\u03C0\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"x\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"=\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"script\"\n  }), \"N\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"msub\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"msub\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"\\u03BC\"), mdx(\"mn\", {\n    parentName: \"msub\"\n  }, \"1\")), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"separator\": \"true\"\n  }), \",\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold\"\n  }), \"\\u03A3\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"+\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"script\"\n  }), \"N\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"msub\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"msub\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"\\u03BC\"), mdx(\"mn\", {\n    parentName: \"msub\"\n  }, \"2\")), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"separator\": \"true\"\n  }), \",\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold\"\n  }), \"\\u03A3\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"\\\\pi(\\\\vec x) = \\\\Ncal(\\\\vec\\\\mu_1, \\\\mat\\\\Sigma) + \\\\Ncal(\\\\vec\\\\mu_2, \\\\mat\\\\Sigma)\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.03588em\"\n    }\n  }), \"\\u03C0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"x\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mrel\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathcal\",\n    \"style\": {\n      \"marginRight\": \"0.14736em\"\n    }\n  }), \"N\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"\\u03BC\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.20696799999999996em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-2.4558600000000004em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), \"1\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.24414em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mpunct\"\n  }), \",\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathbf\"\n  }), \"\\u03A3\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mbin\"\n  }), \"+\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathcal\",\n    \"style\": {\n      \"marginRight\": \"0.14736em\"\n    }\n  }), \"N\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"\\u03BC\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.20696799999999996em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-2.4558600000000004em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), \"2\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.24414em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mpunct\"\n  }), \",\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathbf\"\n  }), \"\\u03A3\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\"))))), mdx(\"p\", null, \"where\"), mdx(\"span\", {\n    \"className\": \"katex-display\"\n  }, mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\",\n    \"display\": \"block\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"msub\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"msub\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"\\u03BC\"), mdx(\"mn\", {\n    parentName: \"msub\"\n  }, \"1\")), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"=\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"2\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"separator\": \"true\"\n  }), \",\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2212\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"2\"), mdx(\"msup\", {\n    parentName: \"mrow\"\n  }, mdx(\"mo\", _extends({\n    parentName: \"msup\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\"), mdx(\"mi\", {\n    parentName: \"msup\"\n  }, \"T\")), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"separator\": \"true\"\n  }), \",\"), mdx(\"mspace\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"width\": \"1em\"\n  })), mdx(\"msub\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"msub\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"\\u03BC\"), mdx(\"mn\", {\n    parentName: \"msub\"\n  }, \"2\")), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"=\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2212\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"2\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"separator\": \"true\"\n  }), \",\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"2\"), mdx(\"msup\", {\n    parentName: \"mrow\"\n  }, mdx(\"mo\", _extends({\n    parentName: \"msup\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\"), mdx(\"mi\", {\n    parentName: \"msup\"\n  }, \"T\")), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"separator\": \"true\"\n  }), \",\"), mdx(\"mspace\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"width\": \"1em\"\n  })), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold\"\n  }), \"\\u03A3\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"=\"), mdx(\"msub\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", {\n    parentName: \"msub\"\n  }, \"I\"), mdx(\"mn\", {\n    parentName: \"msub\"\n  }, \"2\")), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"=\"), mdx(\"mrow\", {\n    parentName: \"mrow\"\n  }, mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"fence\": \"true\"\n  }), \"(\"), mdx(\"mtable\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"rowspacing\": \"0.15999999999999992em\",\n    \"columnspacing\": \"1em\"\n  }), mdx(\"mtr\", {\n    parentName: \"mtable\"\n  }, mdx(\"mtd\", {\n    parentName: \"mtr\"\n  }, mdx(\"mstyle\", _extends({\n    parentName: \"mtd\"\n  }, {\n    \"scriptlevel\": \"0\",\n    \"displaystyle\": \"false\"\n  }), mdx(\"mn\", {\n    parentName: \"mstyle\"\n  }, \"1\"))), mdx(\"mtd\", {\n    parentName: \"mtr\"\n  }, mdx(\"mstyle\", _extends({\n    parentName: \"mtd\"\n  }, {\n    \"scriptlevel\": \"0\",\n    \"displaystyle\": \"false\"\n  }), mdx(\"mn\", {\n    parentName: \"mstyle\"\n  }, \"0\")))), mdx(\"mtr\", {\n    parentName: \"mtable\"\n  }, mdx(\"mtd\", {\n    parentName: \"mtr\"\n  }, mdx(\"mstyle\", _extends({\n    parentName: \"mtd\"\n  }, {\n    \"scriptlevel\": \"0\",\n    \"displaystyle\": \"false\"\n  }), mdx(\"mn\", {\n    parentName: \"mstyle\"\n  }, \"0\"))), mdx(\"mtd\", {\n    parentName: \"mtr\"\n  }, mdx(\"mstyle\", _extends({\n    parentName: \"mtd\"\n  }, {\n    \"scriptlevel\": \"0\",\n    \"displaystyle\": \"false\"\n  }), mdx(\"mn\", {\n    parentName: \"mstyle\"\n  }, \"1\"))))), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"fence\": \"true\"\n  }), \")\")), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \".\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"\\\\vec\\\\mu_1 = (2,-2)^T,\\n\\\\quad\\n\\\\vec\\\\mu_2 = (-2,2)^T,\\n\\\\quad\\n\\\\mat\\\\Sigma = I_2 = \\\\begin{pmatrix} 1 & 0 \\\\\\\\ 0 & 1 \\\\end{pmatrix}.\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.68858em\",\n      \"verticalAlign\": \"-0.24414em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"\\u03BC\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.20696799999999996em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-2.4558600000000004em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), \"1\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.24414em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mrel\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1.1413309999999999em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mpunct\"\n  }), \",\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2212\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.8913309999999999em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-3.113em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal mtight\",\n    \"style\": {\n      \"marginRight\": \"0.13889em\"\n    }\n  }), \"T\")))))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mpunct\"\n  }), \",\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"1em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"\\u03BC\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.20696799999999996em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-2.4558600000000004em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), \"2\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.24414em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mrel\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1.1413309999999999em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2212\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mpunct\"\n  }), \",\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.8913309999999999em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-3.113em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal mtight\",\n    \"style\": {\n      \"marginRight\": \"0.13889em\"\n    }\n  }), \"T\")))))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mpunct\"\n  }), \",\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"1em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathbf\"\n  }), \"\\u03A3\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mrel\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.83333em\",\n      \"verticalAlign\": \"-0.15em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.07847em\"\n    }\n  }), \"I\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.30110799999999993em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-2.5500000000000003em\",\n      \"marginLeft\": \"-0.07847em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), \"2\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.15em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mrel\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"2.40003em\",\n      \"verticalAlign\": \"-0.95003em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"minner\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen delimcenter\",\n    \"style\": {\n      \"top\": \"0em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"delimsizing size3\"\n  }), \"(\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtable\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"col-align-c\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"1.45em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-3.61em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"3em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"1\"))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-2.4099999999999997em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"3em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"0\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.9500000000000004em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"arraycolsep\",\n    \"style\": {\n      \"width\": \"0.5em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"arraycolsep\",\n    \"style\": {\n      \"width\": \"0.5em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"col-align-c\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"1.45em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-3.61em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"3em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"0\"))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-2.4099999999999997em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"3em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"1\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.9500000000000004em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }))))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose delimcenter\",\n    \"style\": {\n      \"top\": \"0em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"delimsizing size3\"\n  }), \")\"))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \".\"))))), mdx(\"p\", null, \"Multimodal distributions where the modes barely overlap typically pose difficulties to MCMC algorithms. This is because exploring them fully requires entering and passing through a region of low probability density which, by the very nature of MCMC, is a rare event.\"), mdx(\"p\", null, \"Let\\u2019s see how many samples HMC requires to achieve mixing, i.e. to jump from whichever mode we sample first to the other. Once both modes are covered with roughly equal numbers of samples, we can use the generated Markov chain \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"script\"\n  }), \"C\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"\\\\Ccal\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.68333em\",\n      \"verticalAlign\": \"0em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathcal\",\n    \"style\": {\n      \"marginRight\": \"0.05834em\"\n    }\n  }), \"C\"))))), \" to compute accurate expectation values with respect to \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"\\u03C0\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"\\\\pi\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.43056em\",\n      \"verticalAlign\": \"0em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.03588em\"\n    }\n  }), \"\\u03C0\")))), \". For example, say we have an observable \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"f\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"x\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"f(\\\\vec x)\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.10764em\"\n    }\n  }), \"f\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"x\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\")))), \" and we\\u2019re interested in the value it\\u2019s likely to take given the probabilities for different \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"x\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"\\\\vec x\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.44444em\",\n      \"verticalAlign\": \"0em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"x\"))))))), \" under \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"\\u03C0\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"x\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"\\\\pi(\\\\vec x)\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.03588em\"\n    }\n  }), \"\\u03C0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"x\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\")))), \",\"), mdx(\"span\", {\n    \"className\": \"katex-display\"\n  }, mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\",\n    \"display\": \"block\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"msub\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"msub\"\n  }, {\n    \"mathvariant\": \"double-struck\"\n  }), \"E\"), mdx(\"mi\", {\n    parentName: \"msub\"\n  }, \"\\u03C0\")), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"[\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"f\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"]\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"=\"), mdx(\"msub\", {\n    parentName: \"mrow\"\n  }, mdx(\"mo\", {\n    parentName: \"msub\"\n  }, \"\\u222B\"), mdx(\"msup\", {\n    parentName: \"msub\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"msup\"\n  }, {\n    \"mathvariant\": \"double-struck\"\n  }), \"R\"), mdx(\"mn\", {\n    parentName: \"msup\"\n  }, \"2\"))), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"\\u03C0\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"x\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\"), mdx(\"mtext\", {\n    parentName: \"mrow\"\n  }, \"\\u2009\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"f\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"x\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\"), mdx(\"mtext\", {\n    parentName: \"mrow\"\n  }, \"\\u2009\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"d\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"x\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \".\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"\\\\expec_\\\\pi[f] = \\\\int_{\\\\Rbb^2} \\\\pi(\\\\vec x) \\\\, f(\\\\vec x) \\\\, \\\\dif\\\\vec x.\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathbb\"\n  }), \"E\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.151392em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-2.5500000000000003em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal mtight\",\n    \"style\": {\n      \"marginRight\": \"0.03588em\"\n    }\n  }), \"\\u03C0\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.15em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"[\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.10764em\"\n    }\n  }), \"f\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \"]\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mrel\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"2.27195em\",\n      \"verticalAlign\": \"-0.9119499999999999em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mop\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mop op-symbol large-op\",\n    \"style\": {\n      \"marginRight\": \"0.44445em\",\n      \"position\": \"relative\",\n      \"top\": \"-0.0011249999999999316em\"\n    }\n  }), \"\\u222B\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"-0.38952999999999993em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-1.7880500000000001em\",\n      \"marginLeft\": \"-0.44445em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathbb mtight\"\n  }), \"R\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.7463142857142857em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-2.786em\",\n      \"marginRight\": \"0.07142857142857144em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.5em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size3 size1 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), \"2\")))))))))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.9119499999999999em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.03588em\"\n    }\n  }), \"\\u03C0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"x\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.10764em\"\n    }\n  }), \"f\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"x\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathrm\"\n  }), \"d\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"x\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \".\"))))), mdx(\"p\", null, \"If the Markov chain has converged, we can get an unbiased estimate for this expectation value, by averaging over samples in the chain,\"), mdx(\"span\", {\n    \"className\": \"katex-display\"\n  }, mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\",\n    \"display\": \"block\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"msub\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"msub\"\n  }, {\n    \"mathvariant\": \"double-struck\"\n  }), \"E\"), mdx(\"mi\", {\n    parentName: \"msub\"\n  }, \"\\u03C0\")), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"[\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"f\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"]\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2248\"), mdx(\"mover\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"accent\": \"true\"\n  }), mdx(\"mi\", {\n    parentName: \"mover\"\n  }, \"f\"), mdx(\"mo\", {\n    parentName: \"mover\"\n  }, \"^\")), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"=\"), mdx(\"mfrac\", {\n    parentName: \"mrow\"\n  }, mdx(\"mn\", {\n    parentName: \"mfrac\"\n  }, \"1\"), mdx(\"mrow\", {\n    parentName: \"mfrac\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"\\u2223\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"script\"\n  }), \"C\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"\\u2223\"))), mdx(\"munder\", {\n    parentName: \"mrow\"\n  }, mdx(\"mo\", {\n    parentName: \"munder\"\n  }, \"\\u2211\"), mdx(\"mrow\", {\n    parentName: \"munder\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"x\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2208\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"script\"\n  }), \"C\"))), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"f\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"x\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"separator\": \"true\"\n  }), \",\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"\\\\expec_\\\\pi[f] \\\\approx \\\\hat f = \\\\frac{1}{|\\\\Ccal|} \\\\sum_{\\\\vec x \\\\in \\\\Ccal} f(\\\\vec x),\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathbb\"\n  }), \"E\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.151392em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-2.5500000000000003em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal mtight\",\n    \"style\": {\n      \"marginRight\": \"0.03588em\"\n    }\n  }), \"\\u03C0\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.15em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"[\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.10764em\"\n    }\n  }), \"f\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \"]\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mrel\"\n  }), \"\\u2248\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1.1523199999999998em\",\n      \"verticalAlign\": \"-0.19444em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord accent\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.9578799999999998em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-3em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"3em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.10764em\"\n    }\n  }), \"f\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-3.26344em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"3em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"accent-body\",\n    \"style\": {\n      \"left\": \"-0.08332999999999999em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"^\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.19444em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mrel\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"2.6431459999999998em\",\n      \"verticalAlign\": \"-1.321706em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen nulldelimiter\"\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mfrac\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"1.32144em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-2.314em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"3em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2223\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathcal\",\n    \"style\": {\n      \"marginRight\": \"0.05834em\"\n    }\n  }), \"C\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2223\"))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-3.23em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"3em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"frac-line\",\n    \"style\": {\n      \"borderBottomWidth\": \"0.04em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-3.677em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"3em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"1\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.936em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose nulldelimiter\"\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mop op-limits\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"1.050005em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-1.8556639999999998em\",\n      \"marginLeft\": \"0em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"3.05em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol mtight\"\n  }), \"x\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mrel mtight\"\n  }), \"\\u2208\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathcal mtight\",\n    \"style\": {\n      \"marginRight\": \"0.05834em\"\n    }\n  }), \"C\"))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-3.0500049999999996em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"3.05em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\"\n  }, mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mop op-symbol large-op\"\n  }), \"\\u2211\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"1.321706em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.10764em\"\n    }\n  }), \"f\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"x\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mpunct\"\n  }), \",\"))))), mdx(\"p\", null, \"Here\\u2019s the code to generate \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"script\"\n  }), \"C\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"\\\\Ccal\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.68333em\",\n      \"verticalAlign\": \"0em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathcal\",\n    \"style\": {\n      \"marginRight\": \"0.05834em\"\n    }\n  }), \"C\"))))), \" using TFP:\"), mdx(\"div\", {\n    \"className\": \"gatsby-code-title\"\n  }, \"bimodal.py\"), mdx(\"pre\", {\n    \"className\": \"grvsc-container default-dark\",\n    \"data-language\": \"py\",\n    \"data-index\": \"0\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"grvsc-code\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" numpy \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"as\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" np\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" plotly.graph_objects \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"as\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" go\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tensorflow \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"as\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tf\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tensorflow_probability \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"as\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tfp\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"tfd = tfp.distributions\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"normals_2d = [\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    tfd.MultivariateNormalDiag([\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", -\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"]),\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    tfd.MultivariateNormalDiag([-\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"]),\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"]\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"bimodal = tfd.Mixture(tfd.Categorical([\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0.5\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0.5\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"]), normals_2d)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"@tf.function\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"experimental_compile\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"True\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"sample_chain\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(*\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"args\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", **\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"kwargs\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"\\\"\\\"@tf.function JIT-compiles a static graph for tfp.mcmc.sample_chain.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    This significantly improves performance, especially when enabling XLA.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    https://tensorflow.org/xla#explicit_compilation_with_tffunction\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    https://github.com/tensorflow/probability/issues/728#issuecomment-573704750\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    \\\"\\\"\\\"\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tfp.mcmc.sample_chain(*args, **kwargs)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"step_size = \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1e-3\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"kernel = tfp.mcmc.NoUTurnSampler(bimodal.log_prob, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"step_size\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=step_size)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"adaptive_kernel = tfp.mcmc.DualAveragingStepSizeAdaptation(\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    kernel,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"num_adaptation_steps\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"500\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# pkr: previous kernel results, new_ss: new step size\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"step_size_setter_fn\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"lambda\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"pkr\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"new_ss\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \": pkr._replace(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"step_size\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=new_ss),\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"step_size_getter_fn\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"lambda\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"pkr\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \": pkr.step_size,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"log_accept_prob_getter_fn\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"lambda\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"pkr\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \": pkr.log_accept_ratio,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"chain, trace, final_kernel_results = sample_chain(\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"kernel\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=adaptive_kernel,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"num_results\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"200\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"current_state\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=tf.constant([\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0.1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"]),\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"return_final_kernel_results\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"True\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"xr = np.linspace(-\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"6\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"6\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"13\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"domain = np.stack(np.meshgrid(xr, xr), -\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \").reshape(-\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"density_plot = go.Surface(\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"x\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=xr, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"y\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=xr, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"z\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=bimodal.prob(domain).numpy().reshape(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"len\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(xr), -\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"samples_plot = go.Scatter3d(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"x\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=chain[:, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"], \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"y\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=chain[:, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"], \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"z\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=bimodal.prob(chain))\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"fig = go.Figure(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"data\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=[density_plot, samples_plot])\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"fig.update_layout(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"height\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"700\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"title_text\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"f\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"step size: \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"{\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"step_size\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))))), mdx(\"p\", null, \"These awkward \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lambda\"), \" functions passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"adaptive_kernel\"), \" are only necessary due to temporary inconsistencies in TFP\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mcmc\"), \" module. They will be unnecessary once that receives a good refactor \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/tensorflow/probability/issues/549#issuecomment-529092462\"\n  }), \"as stated here\"), \". If you\\u2019re reading this post several months down the line, then perhaps all you need to write is\"), mdx(\"pre\", {\n    \"className\": \"grvsc-container default-dark\",\n    \"data-language\": \"py\",\n    \"data-index\": \"1\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"grvsc-code\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"adaptive_kernel = tfp.mcmc.DualAveragingStepSizeAdaptation(\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    kernel, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"num_adaptation_steps\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=adapt_steps\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))))), mdx(\"p\", null, \"The plot you get from running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bimodal.py\"), \" should look similar to this.\"), mdx(LazyPlot, _extends({}, bimodalProps, {\n    mdxType: \"LazyPlot\"\n  })), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Bimodal distribution decorated by 100 HMC samples which already managed to jump the gap between modes.\")), mdx(\"p\", null, \"During the Hamiltonian evolution that\\u2019s simulated to obtain each new sample in the chain \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"script\"\n  }), \"C\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"\\\\Ccal\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.68333em\",\n      \"verticalAlign\": \"0em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathcal\",\n    \"style\": {\n      \"marginRight\": \"0.05834em\"\n    }\n  }), \"C\"))))), \", the potential energy \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"V\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"V\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.68333em\",\n      \"verticalAlign\": \"0em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.22222em\"\n    }\n  }), \"V\")))), \" corresponds to the negative log of the probability density shown above, \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"V\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"x\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"=\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2212\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"log\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2061\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"\\u03C0\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"x\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"V(\\\\vec x) = -\\\\log \\\\pi(\\\\vec x)\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.22222em\"\n    }\n  }), \"V\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"x\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mrel\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2212\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mop\"\n  }), \"lo\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"marginRight\": \"0.01389em\"\n    }\n  }), \"g\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.03588em\"\n    }\n  }), \"\\u03C0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"x\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\")))), \". The two peaks thus correspond to holes (though more shallow than in the above plot due to the log) in the otherwise flat surface on which the Hamiltonian simulation takes place. The starting point from which the simulation kicks off is randomly initialized. It then takes a few iterations before the head of the chain \\u201Cfalls\\u201D into one of the holes. Once there, Hamiltonian dynamics will likely move around there for a while and gather samples from that region of increased probability/decreased potential energy. To eventually transition between the two modes requires starting out a Hamiltonian step with a particularly large initial momentum. The momenta are randomly sampled from a diagonal Gaussian, \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"p\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u223C\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"script\"\n  }), \"N\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"0\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"separator\": \"true\"\n  }), \",\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", {\n    parentName: \"mi\"\n  }, mdx(\"mrow\", {\n    parentName: \"mi\"\n  }))), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"\\u03A3\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"\\\\vec p \\\\sim \\\\Ncal(0, \\\\mat\\\\mat\\\\Sigma)\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.63888em\",\n      \"verticalAlign\": \"-0.19444em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"p\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mrel\"\n  }), \"\\u223C\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathcal\",\n    \"style\": {\n      \"marginRight\": \"0.14736em\"\n    }\n  }), \"N\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mpunct\"\n  }), \",\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }))))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u03A3\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\")))), \", at the start of each new evolution (independent of the current position). This ensures that lower energy points are more likely to be sampled since the Gaussian has a higher density for small values of \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"\\u2223\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"bold-italic\"\n  }), \"p\"), mdx(\"mi\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"mathvariant\": \"normal\"\n  }), \"\\u2223\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"|\\\\vec p|\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2223\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord boldsymbol\"\n  }), \"p\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), \"\\u2223\")))), \". Only if we happen to sample a momentum that\\u2019s sufficiently large and is pointing in the right direction can we overcome the potential barrier between the two modes.\"), mdx(\"h2\", {\n    \"id\": \"hmc-routines\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#hmc-routines\",\n    \"aria-label\": \"hmc routines permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"HMC Routines\"), mdx(\"p\", null, \"Now let\\u2019s look at actually applying HMC to the parameters of a neural network. For each parameter, we assume a Gaussian prior. First, let\\u2019s define a few functions to handle the grunt work in this exercise.\"), mdx(\"div\", {\n    \"className\": \"gatsby-code-title\"\n  }, \"bnn/hmc.py\"), mdx(\"pre\", {\n    \"className\": \"grvsc-container default-dark\",\n    \"data-language\": \"py\",\n    \"data-index\": \"2\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"grvsc-code\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" functools \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"as\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" ft\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tensorflow \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"as\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tf\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tensorflow_probability \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"as\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tfp\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"from\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" bnn \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" build_net, chunks, target_log_prob_fn_factory\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"pre_train_nn\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"X_train\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"y_train\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"nodes_per_layer\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"epochs\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"100\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"\\\"\\\"Pre-train NN to get good starting point for HMC.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    Args:\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        nodes_per_layer (list): the number of nodes in each dense layer\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        X_train (Tensor or np.array): training samples\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        y_train (Tensor or np.array): training labels\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    Returns:\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        Tensor: list of arrays specifying the weights of the trained network\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        model: Keras Sequential model\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    \\\"\\\"\\\"\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    layers = [tf.keras.layers.Dense(n, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"activation\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"relu\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \") \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" n \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" nodes_per_layer]\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    layers[-\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"].activation = tf.identity  \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# Make last layer linear.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    model = tf.keras.Sequential(layers)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    model.compile(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"loss\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"mse\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"optimizer\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"adam\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    model.fit(X_train, y_train, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"epochs\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=epochs, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"verbose\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" model.get_weights(), model\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"trace_fn\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"current_state\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"kernel_results\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"summary_freq\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"10\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"callbacks\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=[]):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"\\\"\\\"Can be passed to the HMC kernel to obtain a trace of intermediate\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    kernel results and histograms of the network parameters in Tensorboard.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    \\\"\\\"\\\"\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    step = kernel_results.step\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"with\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tf.summary.record_if(tf.equal(step % summary_freq, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" idx, tensor \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"enumerate\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(current_state):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            count = idx // \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" + \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            name = (\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"w\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"if\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" idx % \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" == \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"else\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"b\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \") + \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk10\"\n  }), \"str\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(count)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            tf.summary.histogram(name, tensor, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"step\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=step)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" kernel_results, [cb(*current_state) \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" cb \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" callbacks]\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"@tf.function\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"experimental_compile\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"True\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"sample_chain\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(*\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"args\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", **\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"kwargs\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"\\\"\\\"Compile static graph for tfp.mcmc.sample_chain to improve performance.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    \\\"\\\"\\\"\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tfp.mcmc.sample_chain(*args, **kwargs)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"run_hmc\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"target_log_prob_fn\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"step_size\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0.01\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"num_leapfrog_steps\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"10\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"num_burnin_steps\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1000\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"num_results\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1000\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"current_state\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"None\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"resume\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"None\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"log_dir\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"logs/hmc/\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"sampler\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"nuts\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"step_size_adapter\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"dual_averaging\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    **\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"kwargs\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"\\\"\\\"Use adaptive HMC to generate a Markov chain of length num_results.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    Args:\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        target_log_prob_fn {callable}: Determines the stationary distribution\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        the Markov chain should converge to.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    Returns:\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        burnin(s): Discarded samples generated during warm-up\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        chain(s): Markov chain(s) of samples distributed according to\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"            target_log_prob_fn (if converged)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        trace: the data collected by trace_fn\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        final_kernel_result: kernel results of the last step (in case the\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"            computation needs to be resumed)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    \\\"\\\"\\\"\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    err = \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"Either current_state or resume is required when calling run_hmc\\\"\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"assert\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" current_state \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"is\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"not\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"None\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"or\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" resume \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"is\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"not\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"None\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", err\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    summary_writer = tf.summary.create_file_writer(log_dir)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    step_size_adapter = {\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"simple\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \": tfp.mcmc.SimpleStepSizeAdaptation,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"dual_averaging\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \": tfp.mcmc.DualAveragingStepSizeAdaptation,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    }[step_size_adapter]\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"if\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" sampler == \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"nuts\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \":\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        kernel = tfp.mcmc.NoUTurnSampler(target_log_prob_fn, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"step_size\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=step_size)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        adaptive_kernel = step_size_adapter(\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            kernel,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"num_adaptation_steps\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=num_burnin_steps,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"step_size_setter_fn\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"lambda\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"pkr\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"new_step_size\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \": pkr._replace(\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"                \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"step_size\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=new_step_size\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            ),\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"step_size_getter_fn\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"lambda\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"pkr\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \": pkr.step_size,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"log_accept_prob_getter_fn\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"lambda\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"pkr\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \": pkr.log_accept_ratio,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        )\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"elif\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" sampler == \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"hmc\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \":\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        kernel = tfp.mcmc.HamiltonianMonteCarlo(\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            target_log_prob_fn,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"step_size\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=step_size,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"num_leapfrog_steps\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=num_leapfrog_steps,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        )\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        adaptive_kernel = step_size_adapter(\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            kernel, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"num_adaptation_steps\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=num_burnin_steps\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        )\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"if\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" resume:\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        prev_chain, prev_trace, prev_kernel_results = resume\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        step = \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"len\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(prev_chain)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        current_state = tf.nest.map_structure(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"lambda\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"chain\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \": chain[-\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"], prev_chain)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"else\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \":\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        prev_kernel_results = adaptive_kernel.bootstrap_results(current_state)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        step = \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    tf.summary.trace_on(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"graph\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"True\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"profiler\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"False\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    chain, trace, final_kernel_results = sample_chain(\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"kernel\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=adaptive_kernel,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"current_state\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=current_state,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"previous_kernel_results\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=prev_kernel_results,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"num_results\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=num_burnin_steps + num_results,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"trace_fn\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=ft.partial(trace_fn, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"summary_freq\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"20\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"),\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"return_final_kernel_results\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"True\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        **kwargs,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    )\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"with\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" summary_writer.as_default():\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        tf.summary.trace_export(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"name\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"hmc_trace\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"step\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=step)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    summary_writer.close()\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"if\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" resume:\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        chain = nest_concat(prev_chain, chain)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        trace = nest_concat(prev_trace, trace)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    burnin, samples = \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"zip\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(*[(t[:-num_results], t[-num_results:]) \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" t \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" chain])\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" burnin, samples, trace, final_kernel_results\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"predict_from_chain\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"chain\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"X_test\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"uncertainty\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"aleatoric+epistemic\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"\\\"\\\"Takes a Markov chain of NN configurations and does the actual\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    prediction on a test set X_test including aleatoric and optionally\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    epistemic uncertainty estimation.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    \\\"\\\"\\\"\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    err = \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"f\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"unrecognized uncertainty type: \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"{\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"uncertainty\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"assert\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" uncertainty \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" [\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"aleatoric\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"aleatoric+epistemic\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"], err\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"if\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" uncertainty == \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"aleatoric\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \":\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        post_params = [tf.reduce_mean(t, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"axis\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \") \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" t \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" chain]\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        post_model = build_net(post_params)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        y_pred, y_var = post_model(X_test, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"training\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"False\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" y_pred.numpy(), y_var.numpy()\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"if\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" uncertainty == \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"aleatoric+epistemic\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \":\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        restructured_chain = [\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            [tensor[i] \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tensor \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" chain] \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" i \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"range\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"len\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(chain[\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"]))\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        ]\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"predict\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"params\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            post_model = build_net(params)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            y_pred, y_var = post_model(X_test, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"training\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"False\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" y_pred, y_var\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        preds = [predict(chunks(params, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")) \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" params \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" restructured_chain]\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        y_pred_mc_samples, y_var_mc_samples = tf.unstack(preds, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"axis\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        y_pred, y_var_epist = tf.nn.moments(y_pred_mc_samples, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"axes\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        y_var_aleat = tf.reduce_mean(y_var_mc_samples, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"axis\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        y_var_tot = y_var_epist + y_var_aleat\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" y_pred, y_var_tot\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"nest_concat\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(*\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"args\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"axis\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"\\\"\\\"Utility function for concatenating a new Markov chain or trace with\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    older ones when resuming a previous calculation.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    \\\"\\\"\\\"\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tf.nest.map_structure(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"lambda\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" *\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"parts\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \": tf.concat(parts, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"axis\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=axis), *args)\"))))), mdx(\"h2\", {\n    \"id\": \"bnn-routines\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#bnn-routines\",\n    \"aria-label\": \"bnn routines permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"BNN Routines\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bnn/hmc.py\"), \" imports a module containing functions for building, initializing and calculating the loss (negative log probability) of BNN\\u2019s with Gaussian posterior. Here\\u2019s what that module looks like.\"), mdx(\"div\", {\n    \"className\": \"gatsby-code-title\"\n  }, \"bnn/__init__.py\"), mdx(\"pre\", {\n    \"className\": \"grvsc-container default-dark\",\n    \"data-language\": \"py\",\n    \"data-index\": \"3\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"grvsc-code\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" functools \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"as\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" ft\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tensorflow \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"as\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tf\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tensorflow_probability \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"as\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tfp\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"dense\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"inputs\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"w\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"b\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"activation\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=tf.identity):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" activation(tf.matmul(inputs, w) + b)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"build_net\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"params\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"activation\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=tf.nn.relu):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"model\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"X\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"training\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"True\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" w, b \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" params[:-\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"]:\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            X = dense(X, w, b, activation)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# final linear layer\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        X = dense(X, *params[-\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"])\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        y_pred, y_log_var = tf.unstack(X, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"axis\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=-\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        y_var = tf.exp(y_log_var)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"if\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" training:\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tfp.distributions.Normal(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"loc\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=y_pred, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"scale\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=tf.sqrt(y_var))\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" y_pred, y_var\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" model\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"bnn_log_prob_fn\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"X\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"y\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"params\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"get_mean\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"False\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"\\\"\\\"Compute log likelihood of predicted labels y given features X and params.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    Args:\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        X (np.array): 2d feature values.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        y (np.array): 1d labels (ground truth).\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        params (list): [[w1, b1], ...] containing 2d/1d arrays for weights/biases.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        get_mean (bool, optional): Whether to return the mean log\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"            probability over all labels for diagnostics, e.g. to\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"            compare train and test set performance.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    Returns:\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"        tf.tensor: Sum or mean of log probabilities of all labels.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    \\\"\\\"\\\"\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    net = build_net(params)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    labels_dist = net(X)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"if\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" get_mean:\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tf.reduce_mean(labels_dist.log_prob(y))\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tf.reduce_sum(labels_dist.log_prob(y))\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"prior_log_prob_fn\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"w_prior\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"b_prior\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"params\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    log_prob = \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" w, b \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" params:\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        log_prob += tf.reduce_sum(w_prior.log_prob(w))\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        log_prob += tf.reduce_sum(b_prior.log_prob(b))\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" log_prob\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"target_log_prob_fn_factory\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"w_prior\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"b_prior\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"X_train\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"y_train\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# This signature is forced by TFP's HMC kernel which calls log_prob_fn(*chains).\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"target_log_prob_fn\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(*\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"params\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"if\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"not\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"isinstance\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(params[\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"], (\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk10\"\n  }), \"list\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk10\"\n  }), \"tuple\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            params = chunks(params, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        log_prob = prior_log_prob_fn(w_prior, b_prior, params)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        log_prob += bnn_log_prob_fn(X_train, y_train, params)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" log_prob\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" target_log_prob_fn\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"tracer_factory\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"X\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"y\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"lambda\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"params\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \": ft.partial(bnn_log_prob_fn, X, y, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"get_mean\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"True\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")(params)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"chunks\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"lst\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"n\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# Subdivide lst into successive n-sized chunks.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" [lst[i : i + n] \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" i \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"range\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"len\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(lst), n)]\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"get_random_initial_state\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"w_prior\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"b_prior\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"nodes_per_layer\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"overdisp\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1.0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"\\\"\\\"Draw random samples for weights and biases of a NN according to some\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    specified priors. distributions. This set of parameter values can serve as a\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    starting point for MCMC or gradient descent training.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"    \\\"\\\"\\\"\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    init_state = []\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" n1, n2 \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"zip\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(nodes_per_layer, nodes_per_layer[\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \":]):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        w_shape, b_shape = [n1, n2], n2\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# Use overdispersion > 1 for better R-hat statistics.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        w = w_prior.sample(w_shape) * overdisp\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        b = b_prior.sample(b_shape) * overdisp\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        init_state.append([tf.Variable(w), tf.Variable(b)])\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" init_state\"))))), mdx(\"h3\", {\n    \"id\": \"map-routines\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#map-routines\",\n    \"aria-label\": \"map routines permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"MAP Routines\"), mdx(\"p\", null, \"Finally, to save some time and computation let\\u2019s try to initialize our Hamiltonian simulation from a good starting point by first training a maximum a posteriori (MAP) network. We can then extract its parameter values and plug them into the HMC kernel as initial state. The hope is that by doing so, HMC will require less warm up before finding its way into high-probability regions of parameter space. If you\\u2019re unfamiliar with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Maximum_a_posteriori_estimation\"\n  }), \"MAP\"), \", it\\u2019s basically just maximum likelihood inference combined with some priors for regularization.\"), mdx(\"div\", {\n    \"className\": \"gatsby-code-title\"\n  }, \"bnn/map.py\"), mdx(\"pre\", {\n    \"className\": \"grvsc-container default-dark\",\n    \"data-language\": \"py\",\n    \"data-index\": \"4\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"grvsc-code\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" numpy \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"as\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" np\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tensorflow \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"as\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tf\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"get_map_trace\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"target_log_prob_fn\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"state\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"n_iter\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1000\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"save_every\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"10\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"callbacks\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=[]):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    optimizer = tf.optimizers.Adam()\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"@tf.function\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"minimize\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"():\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        optimizer.minimize(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"lambda\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \": -target_log_prob_fn(*state), state)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    state_trace, cb_trace = [], [[] \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" _ \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" callbacks]\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" i \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"range\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(n_iter):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"if\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" i % save_every == \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \":\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            state_trace.append(state)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"            \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" trace, cb \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"zip\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(cb_trace, callbacks):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"                trace.append(cb(state).numpy())\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"        minimize()\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" state_trace, cb_trace\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"get_best_map_state\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"map_trace\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"map_log_probs\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# map_log_probs[0/1]: train/test log probability\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    test_set_max_log_prob_idx = np.argmax(map_log_probs[\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"])\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# Return MAP params that achieved highest test set likelihood.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" map_trace[test_set_max_log_prob_idx]\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"def\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk11\"\n  }), \"get_nodes_per_layer\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"n_features\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"net_taper\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0.5\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0.2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0.1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")):\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    nodes_per_layer = [\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk10\"\n  }), \"int\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"(n_features * x) \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" x \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" net_taper]\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# Ensure the last layer has two nodes so that output can be split into\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# predictive mean and learned loss attenuation (see eq. (7) of\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# https://arxiv.org/abs/1703.04977) which the network learns individually.\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    nodes_per_layer.append(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"return\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" nodes_per_layer\"))))), mdx(\"h2\", {\n    \"id\": \"boston-housing\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#boston-housing\",\n    \"aria-label\": \"boston housing permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Boston Housing\"), mdx(\"p\", null, \"Finally, let\\u2019s look at a concrete example by training a network with HMC to predict Boston housing prices and compare its performance with the MAP network. (The following is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://code.visualstudio.com/docs/python/jupyter-support-py\"\n  }), \"VS Code-style Jupyter notebook\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"# %%\"), \" are cell delimiters.)\"), mdx(\"div\", {\n    \"className\": \"gatsby-code-title\"\n  }, \"boston-housing-hmc.py\"), mdx(\"pre\", {\n    \"className\": \"grvsc-container default-dark\",\n    \"data-language\": \"py\",\n    \"data-index\": \"5\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"grvsc-code\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# %%\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tensorflow \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"as\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tf\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tensorflow_probability \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"as\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" tfp\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"from\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" bnn \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" (\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    get_random_initial_state,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    target_log_prob_fn_factory,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    tracer_factory,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"from\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" bnn.hmc \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" predict_from_chain, run_hmc\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"from\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" bnn.map \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"import\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" get_best_map_state, get_map_trace, get_nodes_per_layer\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# %%\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# About the data: https://kaggle.com/c/boston-housing\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"train, test = tf.keras.datasets.boston_housing.load_data()\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"X_train, y_train, X_test, y_test = [arr.astype(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk8\"\n  }), \"\\\"float32\\\"\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \") \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk15\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" arr \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"in\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \" [*train, *test]]\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# %%\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"weight_prior = tfp.distributions.Normal(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0.2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"bias_prior = tfp.distributions.Normal(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \", \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"0.2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# %%\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"log_prob_tracers = (\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    tracer_factory(X_train, y_train),\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    tracer_factory(X_test, y_test),\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"n_features = X_train.shape[-\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"]\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"random_initial_state = get_random_initial_state(\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    weight_prior, bias_prior, get_nodes_per_layer(n_features)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"trace, log_probs = get_map_trace(\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    target_log_prob_fn_factory(weight_prior, bias_prior, X_train, y_train),\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    random_initial_state,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"n_iter\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk7\"\n  }), \"3000\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \",\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"    \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"callbacks\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=log_prob_tracers,\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"best_map_params = get_best_map_state(trace, log_probs)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# %%\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"map_nn = bnn.build_net(best_map_params)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"map_y_pred, map_y_var = map_nn(X_test, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"training\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk4\"\n  }), \"False\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \")\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk3\"\n  }), \"# %%\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"bnn_log_prob_fn = target_log_prob_fn_factory(weight_prior, bias_prior, X_train, y_train)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"_, samples, _, _ = run_hmc(bnn_log_prob_fn, \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk12\"\n  }), \"current_state\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"=best_map_params)\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mtk1\"\n  }), \"hmc_y_pred, hmc_y_var = predict_from_chain(samples, X_test)\"))))), mdx(\"p\", null, \"We can plot the predicted means (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map_y_pred\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hmc_y_pred\"), \") against the test set\\u2019s ground truth (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y_test\"), \") to get an idea of the quality of predictions. Moreover, let\\u2019s plot the predicted standard deviation (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map_y_var ** 0.5\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hmc_y_var ** 0.5\"), \") as error bars to see if the network\\u2019s Bayesian nature affords as any useful information about the confidence in its predictions. If it\\u2019s any good at estimating its own uncertainty, we\\u2019d expect points deviating from the parity line (\", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"msub\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", {\n    parentName: \"msub\"\n  }, \"y\"), mdx(\"mtext\", {\n    parentName: \"msub\"\n  }, \"test\")), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"=\"), mdx(\"msub\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", {\n    parentName: \"msub\"\n  }, \"y\"), mdx(\"mtext\", {\n    parentName: \"msub\"\n  }, \"pred\"))), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"y_\\\\text{test} = y_\\\\text{pred}\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.625em\",\n      \"verticalAlign\": \"-0.19444em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.03588em\"\n    }\n  }), \"y\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.2805559999999999em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-2.5500000000000003em\",\n      \"marginLeft\": \"-0.03588em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord text mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), \"test\"))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.15em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mrel\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.716668em\",\n      \"verticalAlign\": \"-0.286108em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.03588em\"\n    }\n  }), \"y\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.3361079999999999em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-2.5500000000000003em\",\n      \"marginLeft\": \"-0.03588em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord text mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), \"pred\"))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.286108em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }))))))))), \") to exhibit increased predicted variance. And indeed, with a few exceptions, that\\u2019s what we get for both MAP and HMC.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/06afecc44b031bb113c881cc468c799e/boston-test-vs-pred-map.svg\",\n    \"alt\": \"MAP Prediction vs ground truth\"\n  })), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"strong\", {\n    parentName: \"em\"\n  }, \"MAP\"), \" predictions vs ground truth\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/76ae5e9384b65dc46eda62de070d8b7d/boston-test-vs-pred-hmc.svg\",\n    \"alt\": \"HMC predictions vs ground truth\"\n  })), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"strong\", {\n    parentName: \"em\"\n  }, \"HMC\"), \" predictions vs ground truth\")), mdx(\"p\", null, \"The full code including the boring parts for generating plots can be found on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/janosh/thermo/blob/main/src/bnn/hmc.py\"\n  }), \"GitHub\"), \".\"), mdx(\"h2\", {\n    \"id\": \"future-prospects\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#future-prospects\",\n    \"aria-label\": \"future prospects permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Future prospects\"), mdx(\"p\", null, \"TFP is still in the process of adding more functionality to its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mcmc\"), \" module. For instance, both the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/tensorflow/probability/blob/23573a10f203bf740e69f52387bbe8070703eda5/tensorflow_probability/python/experimental/mcmc/nuts.py#L75\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"NoUTurnSampler\")), \" and the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/tensorflow/probability/blob/23573a10f203bf740e69f52387bbe8070703eda5/tensorflow_probability/python/mcmc/dual_averaging_step_size_adaptation.py#L97\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"DualAveragingStepSizeAdaptation\")), \" appeared only days before this post was published. They\\u2019re both great improvements over the regular \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tensorflow.org/probability/api_docs/python/tfp/mcmc/HamiltonianMonteCarlo\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"HamiltonianMonteCarlo\")), \" kernel and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tensorflow.org/probability/api_docs/python/tfp/mcmc/SimpleStepSizeAdaptation\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"SimpleStepSizeAdaptation\")), \", respectively. The former enables HMC to scale to even larger problems in terms of state space dimensionality while the latter should allow the kernel to converge to optimal step sizes faster. I\\u2019m excited to see where this is headed.\"), mdx(\"h2\", {\n    \"id\": \"further-reading\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#further-reading\",\n    \"aria-label\": \"further reading permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Further reading\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://colcarroll.github.io/ppl-api\"\n  }), \"A tour of probabilistic programming language APIs\"), \" by Colin Carroll. His entire blog is about MCMC and probabilistic programming and he has a bunch more really interesting posts on those topics. I highly recommend checking those out.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There\\u2019s also an interesting \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://arxiv.org/abs/2002.01184\"\n  }), \"arXiv paper by the TFP team\"), \" published in Feb 2020 that explains what motivated the design decisions in their \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mcmc\"), \" module.\")), mdx(\"style\", {\n    \"className\": \"grvsc-styles\"\n  }, \"\\n  .grvsc-container {\\n    overflow: auto;\\n    position: relative;\\n    -webkit-overflow-scrolling: touch;\\n    padding-top: 1rem;\\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\\n    padding-bottom: 1rem;\\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\\n    border-radius: 8px;\\n    border-radius: var(--grvsc-border-radius, 8px);\\n    font-feature-settings: normal;\\n    line-height: 1.4;\\n  }\\n  \\n  .grvsc-code {\\n    display: table;\\n  }\\n  \\n  .grvsc-line {\\n    display: table-row;\\n    box-sizing: border-box;\\n    width: 100%;\\n    position: relative;\\n  }\\n  \\n  .grvsc-line > * {\\n    position: relative;\\n  }\\n  \\n  .grvsc-gutter-pad {\\n    display: table-cell;\\n    padding-left: 0.75rem;\\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\\n  }\\n  \\n  .grvsc-gutter {\\n    display: table-cell;\\n    -webkit-user-select: none;\\n    -moz-user-select: none;\\n    user-select: none;\\n  }\\n  \\n  .grvsc-gutter::before {\\n    content: attr(data-content);\\n  }\\n  \\n  .grvsc-source {\\n    display: table-cell;\\n    padding-left: 1.5rem;\\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\\n    padding-right: 1.5rem;\\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\\n  }\\n  \\n  .grvsc-source:empty::after {\\n    content: ' ';\\n    -webkit-user-select: none;\\n    -moz-user-select: none;\\n    user-select: none;\\n  }\\n  \\n  .grvsc-gutter + .grvsc-source {\\n    padding-left: 0.75rem;\\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\\n  }\\n  \\n  /* Line transformer styles */\\n  \\n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\\n    content: ' ';\\n    position: absolute;\\n    width: 100%;\\n  }\\n  \\n  .grvsc-line-diff-add::before {\\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\\n  }\\n  \\n  .grvsc-line-diff-del::before {\\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\\n  }\\n  \\n  .grvsc-line-number {\\n    padding: 0 2px;\\n    text-align: right;\\n    opacity: 0.7;\\n  }\\n  \\n  .default-dark {\\n    background-color: #1E1E1E;\\n    color: #D4D4D4;\\n  }\\n  .default-dark .mtk15 { color: #C586C0; }\\n  .default-dark .mtk1 { color: #D4D4D4; }\\n  .default-dark .mtk7 { color: #B5CEA8; }\\n  .default-dark .mtk11 { color: #DCDCAA; }\\n  .default-dark .mtk12 { color: #9CDCFE; }\\n  .default-dark .mtk4 { color: #569CD6; }\\n  .default-dark .mtk8 { color: #CE9178; }\\n  .default-dark .mtk3 { color: #6A9955; }\\n  .default-dark .mtk10 { color: #4EC9B0; }\\n  .default-dark .grvsc-line-highlighted::before {\\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\\n  }\\n\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport bimodalProps from './bimodal'\nexport const _frontmatter = {\n  \"title\": \"Training BNNs with HMC\",\n  \"slug\": \"/hmc-bnn\",\n  \"date\": \"2019-09-05T00:00:00.000Z\",\n  \"cover\": {\n    \"img\": \"hmc-bnn.svg\"\n  },\n  \"tags\": [\"Python\", \"Machine Learning\", \"Statistics\", \"Science\"],\n  \"showToc\": true\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst LazyPlot = makeShortcode(\"LazyPlot\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`This post is a guide on how to use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://tensorflow.org/probability/api_docs/python/tfp/mcmc/HamiltonianMonteCarlo\"\n      }}>{`Hamiltonian Monte Carlo (HMC) transition kernel`}</a>{` provided by `}<a parentName=\"p\" {...{\n        \"href\": \"https://tensorflow.org/probability\"\n      }}>{`TensorFlow Probability`}</a>{` to train Bayesian neural networks (BNN) by sampling from their posterior distribution. If you haven’t heard of HMC before, check out this `}<a parentName=\"p\" {...{\n        \"href\": \"/blog/hmc-intro\"\n      }}>{`short introduction`}</a>{`. Or, if you just want the 30-second elevator pitch: HMC is a Markov chain Monte Carlo (MCMC) algorithm that avoids the random walk behavior of simpler MCMC methods (such as Metropolis-Hastings or Gibbs sampling) by using Hamilton’s equations of classical mechanics to take a series of first-order-gradient-informed steps through an auxiliary phase space which can be projected down onto the probability density you care about. This allows it to massively speed up mixing (i.e. generating a Markov chain of less correlated samples) and converge on higher dimensional target distributions. Although — upfront disclaimer — not necessarily all the way up to the tens of thousands to several million dimensions of the posterior distribution of typical neural networks. Whether or not you’ll be able to achieve mixing over such huge numbers of dimensions depends strongly on the shape and complexity of the network’s posterior and, of course, on your computational resources.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The code in this guide was written for `}<a parentName=\"p\" {...{\n          \"href\": \"https://pypi.org/project/tensorflow\"\n        }}>{`TensorFlow (TF) v2.1`}</a>{` and `}<a parentName=\"p\" {...{\n          \"href\": \"https://pypi.org/project/tensorflow-probability\"\n        }}>{`TensorFlow Probability (TFP) v0.9`}</a>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"simple-example\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#simple-example\",\n        \"aria-label\": \"simple example permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Simple Example`}</h2>\n    <p>{`To first get a feel for what HMC is doing, let’s start with a simple example and visualize it. Let’s define a two-dimensional bimodal distribution `}<span parentName=\"p\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><mi parentName=\"mrow\">{`π`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`(`}</mo><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold-italic\"\n                }}>{`x`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`)`}</mo></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`\\\\pi(\\\\vec x)`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1em\",\n                \"verticalAlign\": \"-0.25em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord mathnormal\",\n              \"style\": {\n                \"marginRight\": \"0.03588em\"\n              }\n            }}>{`π`}</span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord boldsymbol\"\n                  }}>{`x`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}>{`)`}</span></span></span></span>{` consisting of two Gaussians that are almost completely disjoint,`}</p>\n    <span {...{\n      \"className\": \"katex-display\"\n    }}><span parentName=\"span\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\",\n            \"display\": \"block\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><mi parentName=\"mrow\">{`π`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`(`}</mo><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold-italic\"\n                }}>{`x`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`)`}</mo><mo parentName=\"mrow\">{`=`}</mo><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"script\"\n                }}>{`N`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`(`}</mo><msub parentName=\"mrow\"><mi parentName=\"msub\" {...{\n                    \"mathvariant\": \"bold-italic\"\n                  }}>{`μ`}</mi><mn parentName=\"msub\">{`1`}</mn></msub><mo parentName=\"mrow\" {...{\n                  \"separator\": \"true\"\n                }}>{`,`}</mo><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold\"\n                }}>{`Σ`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`)`}</mo><mo parentName=\"mrow\">{`+`}</mo><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"script\"\n                }}>{`N`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`(`}</mo><msub parentName=\"mrow\"><mi parentName=\"msub\" {...{\n                    \"mathvariant\": \"bold-italic\"\n                  }}>{`μ`}</mi><mn parentName=\"msub\">{`2`}</mn></msub><mo parentName=\"mrow\" {...{\n                  \"separator\": \"true\"\n                }}>{`,`}</mo><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold\"\n                }}>{`Σ`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`)`}</mo></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`\\\\pi(\\\\vec x) = \\\\Ncal(\\\\vec\\\\mu_1, \\\\mat\\\\Sigma) + \\\\Ncal(\\\\vec\\\\mu_2, \\\\mat\\\\Sigma)`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1em\",\n                \"verticalAlign\": \"-0.25em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord mathnormal\",\n              \"style\": {\n                \"marginRight\": \"0.03588em\"\n              }\n            }}>{`π`}</span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord boldsymbol\"\n                  }}>{`x`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}>{`)`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mrel\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span></span><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1em\",\n                \"verticalAlign\": \"-0.25em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord mathcal\",\n                \"style\": {\n                  \"marginRight\": \"0.14736em\"\n                }\n              }}>{`N`}</span></span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"mord boldsymbol\"\n                    }}>{`μ`}</span></span></span></span><span parentName=\"span\" {...{\n                \"className\": \"msupsub\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-t vlist-t2\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.20696799999999996em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-2.4558600000000004em\",\n                          \"marginRight\": \"0.05em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"2.7em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"sizing reset-size6 size3 mtight\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord mtight\"\n                          }}>{`1`}</span></span></span></span><span parentName=\"span\" {...{\n                      \"className\": \"vlist-s\"\n                    }}>{`​`}</span></span><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.24414em\"\n                      }\n                    }}><span parentName=\"span\"></span></span></span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mpunct\"\n            }}>{`,`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord mathbf\"\n                  }}>{`Σ`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}>{`)`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2222222222222222em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mbin\"\n            }}>{`+`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2222222222222222em\"\n              }\n            }}></span></span><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1em\",\n                \"verticalAlign\": \"-0.25em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord mathcal\",\n                \"style\": {\n                  \"marginRight\": \"0.14736em\"\n                }\n              }}>{`N`}</span></span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"mord boldsymbol\"\n                    }}>{`μ`}</span></span></span></span><span parentName=\"span\" {...{\n                \"className\": \"msupsub\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-t vlist-t2\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.20696799999999996em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-2.4558600000000004em\",\n                          \"marginRight\": \"0.05em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"2.7em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"sizing reset-size6 size3 mtight\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord mtight\"\n                          }}>{`2`}</span></span></span></span><span parentName=\"span\" {...{\n                      \"className\": \"vlist-s\"\n                    }}>{`​`}</span></span><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.24414em\"\n                      }\n                    }}><span parentName=\"span\"></span></span></span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mpunct\"\n            }}>{`,`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord mathbf\"\n                  }}>{`Σ`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}>{`)`}</span></span></span></span></span>\n    <p>{`where`}</p>\n    <span {...{\n      \"className\": \"katex-display\"\n    }}><span parentName=\"span\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\",\n            \"display\": \"block\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><msub parentName=\"mrow\"><mi parentName=\"msub\" {...{\n                    \"mathvariant\": \"bold-italic\"\n                  }}>{`μ`}</mi><mn parentName=\"msub\">{`1`}</mn></msub><mo parentName=\"mrow\">{`=`}</mo><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`(`}</mo><mn parentName=\"mrow\">{`2`}</mn><mo parentName=\"mrow\" {...{\n                  \"separator\": \"true\"\n                }}>{`,`}</mo><mo parentName=\"mrow\">{`−`}</mo><mn parentName=\"mrow\">{`2`}</mn><msup parentName=\"mrow\"><mo parentName=\"msup\" {...{\n                    \"stretchy\": \"false\"\n                  }}>{`)`}</mo><mi parentName=\"msup\">{`T`}</mi></msup><mo parentName=\"mrow\" {...{\n                  \"separator\": \"true\"\n                }}>{`,`}</mo><mspace parentName=\"mrow\" {...{\n                  \"width\": \"1em\"\n                }}></mspace><msub parentName=\"mrow\"><mi parentName=\"msub\" {...{\n                    \"mathvariant\": \"bold-italic\"\n                  }}>{`μ`}</mi><mn parentName=\"msub\">{`2`}</mn></msub><mo parentName=\"mrow\">{`=`}</mo><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`(`}</mo><mo parentName=\"mrow\">{`−`}</mo><mn parentName=\"mrow\">{`2`}</mn><mo parentName=\"mrow\" {...{\n                  \"separator\": \"true\"\n                }}>{`,`}</mo><mn parentName=\"mrow\">{`2`}</mn><msup parentName=\"mrow\"><mo parentName=\"msup\" {...{\n                    \"stretchy\": \"false\"\n                  }}>{`)`}</mo><mi parentName=\"msup\">{`T`}</mi></msup><mo parentName=\"mrow\" {...{\n                  \"separator\": \"true\"\n                }}>{`,`}</mo><mspace parentName=\"mrow\" {...{\n                  \"width\": \"1em\"\n                }}></mspace><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold\"\n                }}>{`Σ`}</mi><mo parentName=\"mrow\">{`=`}</mo><msub parentName=\"mrow\"><mi parentName=\"msub\">{`I`}</mi><mn parentName=\"msub\">{`2`}</mn></msub><mo parentName=\"mrow\">{`=`}</mo><mrow parentName=\"mrow\"><mo parentName=\"mrow\" {...{\n                    \"fence\": \"true\"\n                  }}>{`(`}</mo><mtable parentName=\"mrow\" {...{\n                    \"rowspacing\": \"0.15999999999999992em\",\n                    \"columnspacing\": \"1em\"\n                  }}><mtr parentName=\"mtable\"><mtd parentName=\"mtr\"><mstyle parentName=\"mtd\" {...{\n                          \"scriptlevel\": \"0\",\n                          \"displaystyle\": \"false\"\n                        }}><mn parentName=\"mstyle\">{`1`}</mn></mstyle></mtd><mtd parentName=\"mtr\"><mstyle parentName=\"mtd\" {...{\n                          \"scriptlevel\": \"0\",\n                          \"displaystyle\": \"false\"\n                        }}><mn parentName=\"mstyle\">{`0`}</mn></mstyle></mtd></mtr><mtr parentName=\"mtable\"><mtd parentName=\"mtr\"><mstyle parentName=\"mtd\" {...{\n                          \"scriptlevel\": \"0\",\n                          \"displaystyle\": \"false\"\n                        }}><mn parentName=\"mstyle\">{`0`}</mn></mstyle></mtd><mtd parentName=\"mtr\"><mstyle parentName=\"mtd\" {...{\n                          \"scriptlevel\": \"0\",\n                          \"displaystyle\": \"false\"\n                        }}><mn parentName=\"mstyle\">{`1`}</mn></mstyle></mtd></mtr></mtable><mo parentName=\"mrow\" {...{\n                    \"fence\": \"true\"\n                  }}>{`)`}</mo></mrow><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"normal\"\n                }}>{`.`}</mi></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`\\\\vec\\\\mu_1 = (2,-2)^T,\n\\\\quad\n\\\\vec\\\\mu_2 = (-2,2)^T,\n\\\\quad\n\\\\mat\\\\Sigma = I_2 = \\\\begin{pmatrix} 1 & 0 \\\\\\\\ 0 & 1 \\\\end{pmatrix}.`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"0.68858em\",\n                \"verticalAlign\": \"-0.24414em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"mord boldsymbol\"\n                    }}>{`μ`}</span></span></span></span><span parentName=\"span\" {...{\n                \"className\": \"msupsub\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-t vlist-t2\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.20696799999999996em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-2.4558600000000004em\",\n                          \"marginRight\": \"0.05em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"2.7em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"sizing reset-size6 size3 mtight\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord mtight\"\n                          }}>{`1`}</span></span></span></span><span parentName=\"span\" {...{\n                      \"className\": \"vlist-s\"\n                    }}>{`​`}</span></span><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.24414em\"\n                      }\n                    }}><span parentName=\"span\"></span></span></span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mrel\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span></span><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1.1413309999999999em\",\n                \"verticalAlign\": \"-0.25em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}>{`2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mpunct\"\n            }}>{`,`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}>{`−`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}>{`2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mclose\"\n              }}>{`)`}</span><span parentName=\"span\" {...{\n                \"className\": \"msupsub\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-t\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.8913309999999999em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-3.113em\",\n                          \"marginRight\": \"0.05em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"2.7em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"sizing reset-size6 size3 mtight\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord mathnormal mtight\",\n                            \"style\": {\n                              \"marginRight\": \"0.13889em\"\n                            }\n                          }}>{`T`}</span></span></span></span></span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mpunct\"\n            }}>{`,`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"1em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"mord boldsymbol\"\n                    }}>{`μ`}</span></span></span></span><span parentName=\"span\" {...{\n                \"className\": \"msupsub\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-t vlist-t2\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.20696799999999996em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-2.4558600000000004em\",\n                          \"marginRight\": \"0.05em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"2.7em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"sizing reset-size6 size3 mtight\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord mtight\"\n                          }}>{`2`}</span></span></span></span><span parentName=\"span\" {...{\n                      \"className\": \"vlist-s\"\n                    }}>{`​`}</span></span><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.24414em\"\n                      }\n                    }}><span parentName=\"span\"></span></span></span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mrel\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span></span><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1.1413309999999999em\",\n                \"verticalAlign\": \"-0.25em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}>{`−`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}>{`2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mpunct\"\n            }}>{`,`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}>{`2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mclose\"\n              }}>{`)`}</span><span parentName=\"span\" {...{\n                \"className\": \"msupsub\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-t\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.8913309999999999em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-3.113em\",\n                          \"marginRight\": \"0.05em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"2.7em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"sizing reset-size6 size3 mtight\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord mathnormal mtight\",\n                            \"style\": {\n                              \"marginRight\": \"0.13889em\"\n                            }\n                          }}>{`T`}</span></span></span></span></span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mpunct\"\n            }}>{`,`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"1em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord mathbf\"\n                  }}>{`Σ`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mrel\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span></span><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"0.83333em\",\n                \"verticalAlign\": \"-0.15em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord mathnormal\",\n                \"style\": {\n                  \"marginRight\": \"0.07847em\"\n                }\n              }}>{`I`}</span><span parentName=\"span\" {...{\n                \"className\": \"msupsub\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-t vlist-t2\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.30110799999999993em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-2.5500000000000003em\",\n                          \"marginLeft\": \"-0.07847em\",\n                          \"marginRight\": \"0.05em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"2.7em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"sizing reset-size6 size3 mtight\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord mtight\"\n                          }}>{`2`}</span></span></span></span><span parentName=\"span\" {...{\n                      \"className\": \"vlist-s\"\n                    }}>{`​`}</span></span><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.15em\"\n                      }\n                    }}><span parentName=\"span\"></span></span></span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mrel\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span></span><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"2.40003em\",\n                \"verticalAlign\": \"-0.95003em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"minner\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mopen delimcenter\",\n                \"style\": {\n                  \"top\": \"0em\"\n                }\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"delimsizing size3\"\n                }}>{`(`}</span></span><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mtable\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"col-align-c\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist-t vlist-t2\"\n                    }}><span parentName=\"span\" {...{\n                        \"className\": \"vlist-r\"\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"vlist\",\n                          \"style\": {\n                            \"height\": \"1.45em\"\n                          }\n                        }}><span parentName=\"span\" {...{\n                            \"style\": {\n                              \"top\": \"-3.61em\"\n                            }\n                          }}><span parentName=\"span\" {...{\n                              \"className\": \"pstrut\",\n                              \"style\": {\n                                \"height\": \"3em\"\n                              }\n                            }}></span><span parentName=\"span\" {...{\n                              \"className\": \"mord\"\n                            }}><span parentName=\"span\" {...{\n                                \"className\": \"mord\"\n                              }}>{`1`}</span></span></span><span parentName=\"span\" {...{\n                            \"style\": {\n                              \"top\": \"-2.4099999999999997em\"\n                            }\n                          }}><span parentName=\"span\" {...{\n                              \"className\": \"pstrut\",\n                              \"style\": {\n                                \"height\": \"3em\"\n                              }\n                            }}></span><span parentName=\"span\" {...{\n                              \"className\": \"mord\"\n                            }}><span parentName=\"span\" {...{\n                                \"className\": \"mord\"\n                              }}>{`0`}</span></span></span></span><span parentName=\"span\" {...{\n                          \"className\": \"vlist-s\"\n                        }}>{`​`}</span></span><span parentName=\"span\" {...{\n                        \"className\": \"vlist-r\"\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"vlist\",\n                          \"style\": {\n                            \"height\": \"0.9500000000000004em\"\n                          }\n                        }}><span parentName=\"span\"></span></span></span></span></span><span parentName=\"span\" {...{\n                    \"className\": \"arraycolsep\",\n                    \"style\": {\n                      \"width\": \"0.5em\"\n                    }\n                  }}></span><span parentName=\"span\" {...{\n                    \"className\": \"arraycolsep\",\n                    \"style\": {\n                      \"width\": \"0.5em\"\n                    }\n                  }}></span><span parentName=\"span\" {...{\n                    \"className\": \"col-align-c\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist-t vlist-t2\"\n                    }}><span parentName=\"span\" {...{\n                        \"className\": \"vlist-r\"\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"vlist\",\n                          \"style\": {\n                            \"height\": \"1.45em\"\n                          }\n                        }}><span parentName=\"span\" {...{\n                            \"style\": {\n                              \"top\": \"-3.61em\"\n                            }\n                          }}><span parentName=\"span\" {...{\n                              \"className\": \"pstrut\",\n                              \"style\": {\n                                \"height\": \"3em\"\n                              }\n                            }}></span><span parentName=\"span\" {...{\n                              \"className\": \"mord\"\n                            }}><span parentName=\"span\" {...{\n                                \"className\": \"mord\"\n                              }}>{`0`}</span></span></span><span parentName=\"span\" {...{\n                            \"style\": {\n                              \"top\": \"-2.4099999999999997em\"\n                            }\n                          }}><span parentName=\"span\" {...{\n                              \"className\": \"pstrut\",\n                              \"style\": {\n                                \"height\": \"3em\"\n                              }\n                            }}></span><span parentName=\"span\" {...{\n                              \"className\": \"mord\"\n                            }}><span parentName=\"span\" {...{\n                                \"className\": \"mord\"\n                              }}>{`1`}</span></span></span></span><span parentName=\"span\" {...{\n                          \"className\": \"vlist-s\"\n                        }}>{`​`}</span></span><span parentName=\"span\" {...{\n                        \"className\": \"vlist-r\"\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"vlist\",\n                          \"style\": {\n                            \"height\": \"0.9500000000000004em\"\n                          }\n                        }}><span parentName=\"span\"></span></span></span></span></span></span></span><span parentName=\"span\" {...{\n                \"className\": \"mclose delimcenter\",\n                \"style\": {\n                  \"top\": \"0em\"\n                }\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"delimsizing size3\"\n                }}>{`)`}</span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}>{`.`}</span></span></span></span></span>\n    <p>{`Multimodal distributions where the modes barely overlap typically pose difficulties to MCMC algorithms. This is because exploring them fully requires entering and passing through a region of low probability density which, by the very nature of MCMC, is a rare event.`}</p>\n    <p>{`Let’s see how many samples HMC requires to achieve mixing, i.e. to jump from whichever mode we sample first to the other. Once both modes are covered with roughly equal numbers of samples, we can use the generated Markov chain `}<span parentName=\"p\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"script\"\n                }}>{`C`}</mi></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`\\\\Ccal`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"0.68333em\",\n                \"verticalAlign\": \"0em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord mathcal\",\n                \"style\": {\n                  \"marginRight\": \"0.05834em\"\n                }\n              }}>{`C`}</span></span></span></span></span>{` to compute accurate expectation values with respect to `}<span parentName=\"p\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><mi parentName=\"mrow\">{`π`}</mi></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`\\\\pi`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"0.43056em\",\n                \"verticalAlign\": \"0em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord mathnormal\",\n              \"style\": {\n                \"marginRight\": \"0.03588em\"\n              }\n            }}>{`π`}</span></span></span></span>{`. For example, say we have an observable `}<span parentName=\"p\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><mi parentName=\"mrow\">{`f`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`(`}</mo><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold-italic\"\n                }}>{`x`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`)`}</mo></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`f(\\\\vec x)`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1em\",\n                \"verticalAlign\": \"-0.25em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord mathnormal\",\n              \"style\": {\n                \"marginRight\": \"0.10764em\"\n              }\n            }}>{`f`}</span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord boldsymbol\"\n                  }}>{`x`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}>{`)`}</span></span></span></span>{` and we’re interested in the value it’s likely to take given the probabilities for different `}<span parentName=\"p\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold-italic\"\n                }}>{`x`}</mi></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`\\\\vec x`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"0.44444em\",\n                \"verticalAlign\": \"0em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord boldsymbol\"\n                  }}>{`x`}</span></span></span></span></span></span></span>{` under `}<span parentName=\"p\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><mi parentName=\"mrow\">{`π`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`(`}</mo><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold-italic\"\n                }}>{`x`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`)`}</mo></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`\\\\pi(\\\\vec x)`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1em\",\n                \"verticalAlign\": \"-0.25em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord mathnormal\",\n              \"style\": {\n                \"marginRight\": \"0.03588em\"\n              }\n            }}>{`π`}</span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord boldsymbol\"\n                  }}>{`x`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}>{`)`}</span></span></span></span>{`,`}</p>\n    <span {...{\n      \"className\": \"katex-display\"\n    }}><span parentName=\"span\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\",\n            \"display\": \"block\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><msub parentName=\"mrow\"><mi parentName=\"msub\" {...{\n                    \"mathvariant\": \"double-struck\"\n                  }}>{`E`}</mi><mi parentName=\"msub\">{`π`}</mi></msub><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`[`}</mo><mi parentName=\"mrow\">{`f`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`]`}</mo><mo parentName=\"mrow\">{`=`}</mo><msub parentName=\"mrow\"><mo parentName=\"msub\">{`∫`}</mo><msup parentName=\"msub\"><mi parentName=\"msup\" {...{\n                      \"mathvariant\": \"double-struck\"\n                    }}>{`R`}</mi><mn parentName=\"msup\">{`2`}</mn></msup></msub><mi parentName=\"mrow\">{`π`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`(`}</mo><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold-italic\"\n                }}>{`x`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`)`}</mo><mtext parentName=\"mrow\">{` `}</mtext><mi parentName=\"mrow\">{`f`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`(`}</mo><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold-italic\"\n                }}>{`x`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`)`}</mo><mtext parentName=\"mrow\">{` `}</mtext><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"normal\"\n                }}>{`d`}</mi><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold-italic\"\n                }}>{`x`}</mi><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"normal\"\n                }}>{`.`}</mi></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`\\\\expec_\\\\pi[f] = \\\\int_{\\\\Rbb^2} \\\\pi(\\\\vec x) \\\\, f(\\\\vec x) \\\\, \\\\dif\\\\vec x.`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1em\",\n                \"verticalAlign\": \"-0.25em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord mathbb\"\n                }}>{`E`}</span></span><span parentName=\"span\" {...{\n                \"className\": \"msupsub\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-t vlist-t2\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.151392em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-2.5500000000000003em\",\n                          \"marginRight\": \"0.05em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"2.7em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"sizing reset-size6 size3 mtight\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord mathnormal mtight\",\n                            \"style\": {\n                              \"marginRight\": \"0.03588em\"\n                            }\n                          }}>{`π`}</span></span></span></span><span parentName=\"span\" {...{\n                      \"className\": \"vlist-s\"\n                    }}>{`​`}</span></span><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.15em\"\n                      }\n                    }}><span parentName=\"span\"></span></span></span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`[`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord mathnormal\",\n              \"style\": {\n                \"marginRight\": \"0.10764em\"\n              }\n            }}>{`f`}</span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}>{`]`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mrel\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span></span><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"2.27195em\",\n                \"verticalAlign\": \"-0.9119499999999999em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mop\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mop op-symbol large-op\",\n                \"style\": {\n                  \"marginRight\": \"0.44445em\",\n                  \"position\": \"relative\",\n                  \"top\": \"-0.0011249999999999316em\"\n                }\n              }}>{`∫`}</span><span parentName=\"span\" {...{\n                \"className\": \"msupsub\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-t vlist-t2\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"-0.38952999999999993em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-1.7880500000000001em\",\n                          \"marginLeft\": \"-0.44445em\",\n                          \"marginRight\": \"0.05em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"2.7em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"sizing reset-size6 size3 mtight\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord mtight\"\n                          }}><span parentName=\"span\" {...{\n                              \"className\": \"mord mtight\"\n                            }}><span parentName=\"span\" {...{\n                                \"className\": \"mord mtight\"\n                              }}><span parentName=\"span\" {...{\n                                  \"className\": \"mord mathbb mtight\"\n                                }}>{`R`}</span></span><span parentName=\"span\" {...{\n                                \"className\": \"msupsub\"\n                              }}><span parentName=\"span\" {...{\n                                  \"className\": \"vlist-t\"\n                                }}><span parentName=\"span\" {...{\n                                    \"className\": \"vlist-r\"\n                                  }}><span parentName=\"span\" {...{\n                                      \"className\": \"vlist\",\n                                      \"style\": {\n                                        \"height\": \"0.7463142857142857em\"\n                                      }\n                                    }}><span parentName=\"span\" {...{\n                                        \"style\": {\n                                          \"top\": \"-2.786em\",\n                                          \"marginRight\": \"0.07142857142857144em\"\n                                        }\n                                      }}><span parentName=\"span\" {...{\n                                          \"className\": \"pstrut\",\n                                          \"style\": {\n                                            \"height\": \"2.5em\"\n                                          }\n                                        }}></span><span parentName=\"span\" {...{\n                                          \"className\": \"sizing reset-size3 size1 mtight\"\n                                        }}><span parentName=\"span\" {...{\n                                            \"className\": \"mord mtight\"\n                                          }}>{`2`}</span></span></span></span></span></span></span></span></span></span></span></span><span parentName=\"span\" {...{\n                      \"className\": \"vlist-s\"\n                    }}>{`​`}</span></span><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.9119499999999999em\"\n                      }\n                    }}><span parentName=\"span\"></span></span></span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord mathnormal\",\n              \"style\": {\n                \"marginRight\": \"0.03588em\"\n              }\n            }}>{`π`}</span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord boldsymbol\"\n                  }}>{`x`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}>{`)`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord mathnormal\",\n              \"style\": {\n                \"marginRight\": \"0.10764em\"\n              }\n            }}>{`f`}</span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord boldsymbol\"\n                  }}>{`x`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}>{`)`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord mathrm\"\n            }}>{`d`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord boldsymbol\"\n                  }}>{`x`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}>{`.`}</span></span></span></span></span>\n    <p>{`If the Markov chain has converged, we can get an unbiased estimate for this expectation value, by averaging over samples in the chain,`}</p>\n    <span {...{\n      \"className\": \"katex-display\"\n    }}><span parentName=\"span\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\",\n            \"display\": \"block\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><msub parentName=\"mrow\"><mi parentName=\"msub\" {...{\n                    \"mathvariant\": \"double-struck\"\n                  }}>{`E`}</mi><mi parentName=\"msub\">{`π`}</mi></msub><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`[`}</mo><mi parentName=\"mrow\">{`f`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`]`}</mo><mo parentName=\"mrow\">{`≈`}</mo><mover parentName=\"mrow\" {...{\n                  \"accent\": \"true\"\n                }}><mi parentName=\"mover\">{`f`}</mi><mo parentName=\"mover\">{`^`}</mo></mover><mo parentName=\"mrow\">{`=`}</mo><mfrac parentName=\"mrow\"><mn parentName=\"mfrac\">{`1`}</mn><mrow parentName=\"mfrac\"><mi parentName=\"mrow\" {...{\n                      \"mathvariant\": \"normal\"\n                    }}>{`∣`}</mi><mi parentName=\"mrow\" {...{\n                      \"mathvariant\": \"script\"\n                    }}>{`C`}</mi><mi parentName=\"mrow\" {...{\n                      \"mathvariant\": \"normal\"\n                    }}>{`∣`}</mi></mrow></mfrac><munder parentName=\"mrow\"><mo parentName=\"munder\">{`∑`}</mo><mrow parentName=\"munder\"><mi parentName=\"mrow\" {...{\n                      \"mathvariant\": \"bold-italic\"\n                    }}>{`x`}</mi><mo parentName=\"mrow\">{`∈`}</mo><mi parentName=\"mrow\" {...{\n                      \"mathvariant\": \"script\"\n                    }}>{`C`}</mi></mrow></munder><mi parentName=\"mrow\">{`f`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`(`}</mo><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold-italic\"\n                }}>{`x`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`)`}</mo><mo parentName=\"mrow\" {...{\n                  \"separator\": \"true\"\n                }}>{`,`}</mo></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`\\\\expec_\\\\pi[f] \\\\approx \\\\hat f = \\\\frac{1}{|\\\\Ccal|} \\\\sum_{\\\\vec x \\\\in \\\\Ccal} f(\\\\vec x),`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1em\",\n                \"verticalAlign\": \"-0.25em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord mathbb\"\n                }}>{`E`}</span></span><span parentName=\"span\" {...{\n                \"className\": \"msupsub\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-t vlist-t2\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.151392em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-2.5500000000000003em\",\n                          \"marginRight\": \"0.05em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"2.7em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"sizing reset-size6 size3 mtight\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord mathnormal mtight\",\n                            \"style\": {\n                              \"marginRight\": \"0.03588em\"\n                            }\n                          }}>{`π`}</span></span></span></span><span parentName=\"span\" {...{\n                      \"className\": \"vlist-s\"\n                    }}>{`​`}</span></span><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.15em\"\n                      }\n                    }}><span parentName=\"span\"></span></span></span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`[`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord mathnormal\",\n              \"style\": {\n                \"marginRight\": \"0.10764em\"\n              }\n            }}>{`f`}</span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}>{`]`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mrel\"\n            }}>{`≈`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span></span><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1.1523199999999998em\",\n                \"verticalAlign\": \"-0.19444em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord accent\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"vlist-t vlist-t2\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-r\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist\",\n                    \"style\": {\n                      \"height\": \"0.9578799999999998em\"\n                    }\n                  }}><span parentName=\"span\" {...{\n                      \"style\": {\n                        \"top\": \"-3em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"className\": \"pstrut\",\n                        \"style\": {\n                          \"height\": \"3em\"\n                        }\n                      }}></span><span parentName=\"span\" {...{\n                        \"className\": \"mord mathnormal\",\n                        \"style\": {\n                          \"marginRight\": \"0.10764em\"\n                        }\n                      }}>{`f`}</span></span><span parentName=\"span\" {...{\n                      \"style\": {\n                        \"top\": \"-3.26344em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"className\": \"pstrut\",\n                        \"style\": {\n                          \"height\": \"3em\"\n                        }\n                      }}></span><span parentName=\"span\" {...{\n                        \"className\": \"accent-body\",\n                        \"style\": {\n                          \"left\": \"-0.08332999999999999em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"mord\"\n                        }}>{`^`}</span></span></span></span><span parentName=\"span\" {...{\n                    \"className\": \"vlist-s\"\n                  }}>{`​`}</span></span><span parentName=\"span\" {...{\n                  \"className\": \"vlist-r\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist\",\n                    \"style\": {\n                      \"height\": \"0.19444em\"\n                    }\n                  }}><span parentName=\"span\"></span></span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mrel\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span></span><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"2.6431459999999998em\",\n                \"verticalAlign\": \"-1.321706em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mopen nulldelimiter\"\n              }}></span><span parentName=\"span\" {...{\n                \"className\": \"mfrac\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-t vlist-t2\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"1.32144em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-2.314em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"3em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"mord\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord\"\n                          }}>{`∣`}</span><span parentName=\"span\" {...{\n                            \"className\": \"mord\"\n                          }}><span parentName=\"span\" {...{\n                              \"className\": \"mord mathcal\",\n                              \"style\": {\n                                \"marginRight\": \"0.05834em\"\n                              }\n                            }}>{`C`}</span></span><span parentName=\"span\" {...{\n                            \"className\": \"mord\"\n                          }}>{`∣`}</span></span></span><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-3.23em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"3em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"frac-line\",\n                          \"style\": {\n                            \"borderBottomWidth\": \"0.04em\"\n                          }\n                        }}></span></span><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-3.677em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"3em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"mord\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord\"\n                          }}>{`1`}</span></span></span></span><span parentName=\"span\" {...{\n                      \"className\": \"vlist-s\"\n                    }}>{`​`}</span></span><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.936em\"\n                      }\n                    }}><span parentName=\"span\"></span></span></span></span></span><span parentName=\"span\" {...{\n                \"className\": \"mclose nulldelimiter\"\n              }}></span></span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mop op-limits\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"vlist-t vlist-t2\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-r\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist\",\n                    \"style\": {\n                      \"height\": \"1.050005em\"\n                    }\n                  }}><span parentName=\"span\" {...{\n                      \"style\": {\n                        \"top\": \"-1.8556639999999998em\",\n                        \"marginLeft\": \"0em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"className\": \"pstrut\",\n                        \"style\": {\n                          \"height\": \"3.05em\"\n                        }\n                      }}></span><span parentName=\"span\" {...{\n                        \"className\": \"sizing reset-size6 size3 mtight\"\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"mord mtight\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord mtight\"\n                          }}><span parentName=\"span\" {...{\n                              \"className\": \"mord mtight\"\n                            }}><span parentName=\"span\" {...{\n                                \"className\": \"mord mtight\"\n                              }}><span parentName=\"span\" {...{\n                                  \"className\": \"mord boldsymbol mtight\"\n                                }}>{`x`}</span></span></span></span><span parentName=\"span\" {...{\n                            \"className\": \"mrel mtight\"\n                          }}>{`∈`}</span><span parentName=\"span\" {...{\n                            \"className\": \"mord mtight\"\n                          }}><span parentName=\"span\" {...{\n                              \"className\": \"mord mathcal mtight\",\n                              \"style\": {\n                                \"marginRight\": \"0.05834em\"\n                              }\n                            }}>{`C`}</span></span></span></span></span><span parentName=\"span\" {...{\n                      \"style\": {\n                        \"top\": \"-3.0500049999999996em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"className\": \"pstrut\",\n                        \"style\": {\n                          \"height\": \"3.05em\"\n                        }\n                      }}></span><span parentName=\"span\"><span parentName=\"span\" {...{\n                          \"className\": \"mop op-symbol large-op\"\n                        }}>{`∑`}</span></span></span></span><span parentName=\"span\" {...{\n                    \"className\": \"vlist-s\"\n                  }}>{`​`}</span></span><span parentName=\"span\" {...{\n                  \"className\": \"vlist-r\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist\",\n                    \"style\": {\n                      \"height\": \"1.321706em\"\n                    }\n                  }}><span parentName=\"span\"></span></span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord mathnormal\",\n              \"style\": {\n                \"marginRight\": \"0.10764em\"\n              }\n            }}>{`f`}</span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord boldsymbol\"\n                  }}>{`x`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}>{`)`}</span><span parentName=\"span\" {...{\n              \"className\": \"mpunct\"\n            }}>{`,`}</span></span></span></span></span>\n    <p>{`Here’s the code to generate `}<span parentName=\"p\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"script\"\n                }}>{`C`}</mi></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`\\\\Ccal`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"0.68333em\",\n                \"verticalAlign\": \"0em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord mathcal\",\n                \"style\": {\n                  \"marginRight\": \"0.05834em\"\n                }\n              }}>{`C`}</span></span></span></span></span>{` using TFP:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title\"\n    }}>{`bimodal.py`}</div>\n    <pre {...{\n      \"className\": \"grvsc-container default-dark\",\n      \"data-language\": \"py\",\n      \"data-index\": \"0\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"grvsc-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` numpy `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`as`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` np`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` plotly.graph_objects `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`as`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` go`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tensorflow `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`as`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tf`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tensorflow_probability `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`as`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tfp`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`tfd = tfp.distributions`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`normals_2d = [`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    tfd.MultivariateNormalDiag([`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, -`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`]),`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    tfd.MultivariateNormalDiag([-`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`]),`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`]`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`bimodal = tfd.Mixture(tfd.Categorical([`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0.5`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0.5`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`]), normals_2d)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`@tf.function`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`experimental_compile`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`True`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`sample_chain`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(*`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`args`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, **`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`kwargs`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"\"\"@tf.function JIT-compiles a static graph for tfp.mcmc.sample_chain.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    This significantly improves performance, especially when enabling XLA.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    https://tensorflow.org/xla#explicit_compilation_with_tffunction`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    https://github.com/tensorflow/probability/issues/728#issuecomment-573704750`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    \"\"\"`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tfp.mcmc.sample_chain(*args, **kwargs)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`step_size = `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1e-3`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`kernel = tfp.mcmc.NoUTurnSampler(bimodal.log_prob, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`step_size`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=step_size)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`adaptive_kernel = tfp.mcmc.DualAveragingStepSizeAdaptation(`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    kernel,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`num_adaptation_steps`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`500`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# pkr: previous kernel results, new_ss: new step size`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`step_size_setter_fn`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`lambda`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`pkr`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`new_ss`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`: pkr._replace(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`step_size`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=new_ss),`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`step_size_getter_fn`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`lambda`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`pkr`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`: pkr.step_size,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`log_accept_prob_getter_fn`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`lambda`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`pkr`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`: pkr.log_accept_ratio,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`chain, trace, final_kernel_results = sample_chain(`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`kernel`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=adaptive_kernel,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`num_results`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`200`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`current_state`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=tf.constant([`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0.1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`]),`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`return_final_kernel_results`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`True`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`xr = np.linspace(-`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`6`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`6`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`13`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`domain = np.stack(np.meshgrid(xr, xr), -`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`).reshape(-`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`density_plot = go.Surface(`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`x`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=xr, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`y`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=xr, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`z`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=bimodal.prob(domain).numpy().reshape(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`len`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(xr), -`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`samples_plot = go.Scatter3d(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`x`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=chain[:, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`], `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`y`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=chain[:, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`], `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`z`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=bimodal.prob(chain))`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`fig = go.Figure(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`data`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=[density_plot, samples_plot])`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`fig.update_layout(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`height`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`700`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`title_text`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`f`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"step size: `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`{`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`step_size`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`}`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span></code></pre>\n    <p>{`These awkward `}<inlineCode parentName=\"p\">{`lambda`}</inlineCode>{` functions passed to `}<inlineCode parentName=\"p\">{`adaptive_kernel`}</inlineCode>{` are only necessary due to temporary inconsistencies in TFP’s `}<inlineCode parentName=\"p\">{`mcmc`}</inlineCode>{` module. They will be unnecessary once that receives a good refactor `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tensorflow/probability/issues/549#issuecomment-529092462\"\n      }}>{`as stated here`}</a>{`. If you’re reading this post several months down the line, then perhaps all you need to write is`}</p>\n    <pre {...{\n      \"className\": \"grvsc-container default-dark\",\n      \"data-language\": \"py\",\n      \"data-index\": \"1\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"grvsc-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`adaptive_kernel = tfp.mcmc.DualAveragingStepSizeAdaptation(`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    kernel, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`num_adaptation_steps`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=adapt_steps`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span></code></pre>\n    <p>{`The plot you get from running `}<inlineCode parentName=\"p\">{`bimodal.py`}</inlineCode>{` should look similar to this.`}</p>\n    <LazyPlot {...bimodalProps} mdxType=\"LazyPlot\" />\n    <p><em parentName=\"p\">{`Bimodal distribution decorated by 100 HMC samples which already managed to jump the gap between modes.`}</em></p>\n    <p>{`During the Hamiltonian evolution that’s simulated to obtain each new sample in the chain `}<span parentName=\"p\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"script\"\n                }}>{`C`}</mi></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`\\\\Ccal`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"0.68333em\",\n                \"verticalAlign\": \"0em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord mathcal\",\n                \"style\": {\n                  \"marginRight\": \"0.05834em\"\n                }\n              }}>{`C`}</span></span></span></span></span>{`, the potential energy `}<span parentName=\"p\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><mi parentName=\"mrow\">{`V`}</mi></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`V`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"0.68333em\",\n                \"verticalAlign\": \"0em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord mathnormal\",\n              \"style\": {\n                \"marginRight\": \"0.22222em\"\n              }\n            }}>{`V`}</span></span></span></span>{` corresponds to the negative log of the probability density shown above, `}<span parentName=\"p\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><mi parentName=\"mrow\">{`V`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`(`}</mo><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold-italic\"\n                }}>{`x`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`)`}</mo><mo parentName=\"mrow\">{`=`}</mo><mo parentName=\"mrow\">{`−`}</mo><mi parentName=\"mrow\">{`log`}</mi><mo parentName=\"mrow\">{`⁡`}</mo><mi parentName=\"mrow\">{`π`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`(`}</mo><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold-italic\"\n                }}>{`x`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`)`}</mo></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`V(\\\\vec x) = -\\\\log \\\\pi(\\\\vec x)`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1em\",\n                \"verticalAlign\": \"-0.25em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord mathnormal\",\n              \"style\": {\n                \"marginRight\": \"0.22222em\"\n              }\n            }}>{`V`}</span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord boldsymbol\"\n                  }}>{`x`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}>{`)`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mrel\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span></span><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1em\",\n                \"verticalAlign\": \"-0.25em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}>{`−`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mop\"\n            }}>{`lo`}<span parentName=\"span\" {...{\n                \"style\": {\n                  \"marginRight\": \"0.01389em\"\n                }\n              }}>{`g`}</span></span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord mathnormal\",\n              \"style\": {\n                \"marginRight\": \"0.03588em\"\n              }\n            }}>{`π`}</span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord boldsymbol\"\n                  }}>{`x`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}>{`)`}</span></span></span></span>{`. The two peaks thus correspond to holes (though more shallow than in the above plot due to the log) in the otherwise flat surface on which the Hamiltonian simulation takes place. The starting point from which the simulation kicks off is randomly initialized. It then takes a few iterations before the head of the chain “falls” into one of the holes. Once there, Hamiltonian dynamics will likely move around there for a while and gather samples from that region of increased probability/decreased potential energy. To eventually transition between the two modes requires starting out a Hamiltonian step with a particularly large initial momentum. The momenta are randomly sampled from a diagonal Gaussian, `}<span parentName=\"p\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold-italic\"\n                }}>{`p`}</mi><mo parentName=\"mrow\">{`∼`}</mo><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"script\"\n                }}>{`N`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`(`}</mo><mn parentName=\"mrow\">{`0`}</mn><mo parentName=\"mrow\" {...{\n                  \"separator\": \"true\"\n                }}>{`,`}</mo><mi parentName=\"mrow\"><mi parentName=\"mi\"><mrow parentName=\"mi\"></mrow></mi></mi><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"normal\"\n                }}>{`Σ`}</mi><mo parentName=\"mrow\" {...{\n                  \"stretchy\": \"false\"\n                }}>{`)`}</mo></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`\\\\vec p \\\\sim \\\\Ncal(0, \\\\mat\\\\mat\\\\Sigma)`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"0.63888em\",\n                \"verticalAlign\": \"-0.19444em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord boldsymbol\"\n                  }}>{`p`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mrel\"\n            }}>{`∼`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span></span><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1em\",\n                \"verticalAlign\": \"-0.25em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord mathcal\",\n                \"style\": {\n                  \"marginRight\": \"0.14736em\"\n                }\n              }}>{`N`}</span></span><span parentName=\"span\" {...{\n              \"className\": \"mopen\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mpunct\"\n            }}>{`,`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.16666666666666666em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"mord\"\n                    }}><span parentName=\"span\" {...{\n                        \"className\": \"mord\"\n                      }}></span></span></span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}>{`Σ`}</span><span parentName=\"span\" {...{\n              \"className\": \"mclose\"\n            }}>{`)`}</span></span></span></span>{`, at the start of each new evolution (independent of the current position). This ensures that lower energy points are more likely to be sampled since the Gaussian has a higher density for small values of `}<span parentName=\"p\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"normal\"\n                }}>{`∣`}</mi><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"bold-italic\"\n                }}>{`p`}</mi><mi parentName=\"mrow\" {...{\n                  \"mathvariant\": \"normal\"\n                }}>{`∣`}</mi></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`|\\\\vec p|`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"1em\",\n                \"verticalAlign\": \"-0.25em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}>{`∣`}</span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"mord\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"mord boldsymbol\"\n                  }}>{`p`}</span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}>{`∣`}</span></span></span></span>{`. Only if we happen to sample a momentum that’s sufficiently large and is pointing in the right direction can we overcome the potential barrier between the two modes.`}</p>\n    <h2 {...{\n      \"id\": \"hmc-routines\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#hmc-routines\",\n        \"aria-label\": \"hmc routines permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`HMC Routines`}</h2>\n    <p>{`Now let’s look at actually applying HMC to the parameters of a neural network. For each parameter, we assume a Gaussian prior. First, let’s define a few functions to handle the grunt work in this exercise.`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title\"\n    }}>{`bnn/hmc.py`}</div>\n    <pre {...{\n      \"className\": \"grvsc-container default-dark\",\n      \"data-language\": \"py\",\n      \"data-index\": \"2\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"grvsc-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` functools `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`as`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` ft`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tensorflow `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`as`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tf`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tensorflow_probability `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`as`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tfp`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`from`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` bnn `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` build_net, chunks, target_log_prob_fn_factory`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`pre_train_nn`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`X_train`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`y_train`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`nodes_per_layer`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`epochs`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`100`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"\"\"Pre-train NN to get good starting point for HMC.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    Args:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        nodes_per_layer (list): the number of nodes in each dense layer`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        X_train (Tensor or np.array): training samples`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        y_train (Tensor or np.array): training labels`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    Returns:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        Tensor: list of arrays specifying the weights of the trained network`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        model: Keras Sequential model`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    \"\"\"`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    layers = [tf.keras.layers.Dense(n, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`activation`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"relu\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`) `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` n `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` nodes_per_layer]`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    layers[-`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`].activation = tf.identity  `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# Make last layer linear.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    model = tf.keras.Sequential(layers)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    model.compile(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`loss`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"mse\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`optimizer`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"adam\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    model.fit(X_train, y_train, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`epochs`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=epochs, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`verbose`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` model.get_weights(), model`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`trace_fn`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`current_state`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`kernel_results`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`summary_freq`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`10`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`callbacks`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=[]):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"\"\"Can be passed to the HMC kernel to obtain a trace of intermediate`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    kernel results and histograms of the network parameters in Tensorboard.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    \"\"\"`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    step = kernel_results.step`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`with`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tf.summary.record_if(tf.equal(step % summary_freq, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` idx, tensor `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`enumerate`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(current_state):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            count = idx // `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` + `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            name = (`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"w\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`if`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` idx % `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` == `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`else`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"b\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`) + `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk10\"\n            }}>{`str`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(count)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            tf.summary.histogram(name, tensor, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`step`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=step)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` kernel_results, [cb(*current_state) `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` cb `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` callbacks]`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`@tf.function`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`experimental_compile`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`True`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`sample_chain`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(*`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`args`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, **`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`kwargs`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"\"\"Compile static graph for tfp.mcmc.sample_chain to improve performance.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    \"\"\"`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tfp.mcmc.sample_chain(*args, **kwargs)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`run_hmc`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`target_log_prob_fn`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`step_size`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0.01`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`num_leapfrog_steps`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`10`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`num_burnin_steps`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1000`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`num_results`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1000`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`current_state`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`None`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`resume`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`None`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`log_dir`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"logs/hmc/\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`sampler`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"nuts\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`step_size_adapter`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"dual_averaging\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    **`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`kwargs`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"\"\"Use adaptive HMC to generate a Markov chain of length num_results.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    Args:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        target_log_prob_fn {callable}: Determines the stationary distribution`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        the Markov chain should converge to.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    Returns:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        burnin(s): Discarded samples generated during warm-up`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        chain(s): Markov chain(s) of samples distributed according to`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`            target_log_prob_fn (if converged)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        trace: the data collected by trace_fn`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        final_kernel_result: kernel results of the last step (in case the`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`            computation needs to be resumed)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    \"\"\"`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    err = `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"Either current_state or resume is required when calling run_hmc\"`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`assert`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` current_state `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`is`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`not`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`None`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`or`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` resume `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`is`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`not`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`None`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, err`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    summary_writer = tf.summary.create_file_writer(log_dir)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    step_size_adapter = {`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"simple\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`: tfp.mcmc.SimpleStepSizeAdaptation,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"dual_averaging\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`: tfp.mcmc.DualAveragingStepSizeAdaptation,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    }[step_size_adapter]`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`if`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` sampler == `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"nuts\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        kernel = tfp.mcmc.NoUTurnSampler(target_log_prob_fn, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`step_size`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=step_size)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        adaptive_kernel = step_size_adapter(`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            kernel,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`num_adaptation_steps`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=num_burnin_steps,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`step_size_setter_fn`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`lambda`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`pkr`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`new_step_size`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`: pkr._replace(`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`                `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`step_size`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=new_step_size`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            ),`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`step_size_getter_fn`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`lambda`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`pkr`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`: pkr.step_size,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`log_accept_prob_getter_fn`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`lambda`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`pkr`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`: pkr.log_accept_ratio,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        )`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`elif`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` sampler == `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"hmc\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        kernel = tfp.mcmc.HamiltonianMonteCarlo(`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            target_log_prob_fn,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`step_size`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=step_size,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`num_leapfrog_steps`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=num_leapfrog_steps,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        )`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        adaptive_kernel = step_size_adapter(`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            kernel, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`num_adaptation_steps`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=num_burnin_steps`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        )`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`if`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` resume:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        prev_chain, prev_trace, prev_kernel_results = resume`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        step = `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`len`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(prev_chain)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        current_state = tf.nest.map_structure(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`lambda`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`chain`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`: chain[-`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`], prev_chain)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`else`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        prev_kernel_results = adaptive_kernel.bootstrap_results(current_state)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        step = `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    tf.summary.trace_on(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`graph`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`True`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`profiler`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`False`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    chain, trace, final_kernel_results = sample_chain(`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`kernel`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=adaptive_kernel,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`current_state`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=current_state,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`previous_kernel_results`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=prev_kernel_results,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`num_results`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=num_burnin_steps + num_results,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`trace_fn`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=ft.partial(trace_fn, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`summary_freq`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`20`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`),`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`return_final_kernel_results`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`True`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        **kwargs,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    )`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`with`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` summary_writer.as_default():`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        tf.summary.trace_export(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`name`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"hmc_trace\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`step`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=step)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    summary_writer.close()`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`if`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` resume:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        chain = nest_concat(prev_chain, chain)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        trace = nest_concat(prev_trace, trace)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    burnin, samples = `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`zip`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(*[(t[:-num_results], t[-num_results:]) `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` t `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` chain])`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` burnin, samples, trace, final_kernel_results`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`predict_from_chain`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`chain`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`X_test`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`uncertainty`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"aleatoric+epistemic\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"\"\"Takes a Markov chain of NN configurations and does the actual`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    prediction on a test set X_test including aleatoric and optionally`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    epistemic uncertainty estimation.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    \"\"\"`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    err = `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`f`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"unrecognized uncertainty type: `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`{`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`uncertainty`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`}`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`assert`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` uncertainty `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` [`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"aleatoric\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"aleatoric+epistemic\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`], err`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`if`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` uncertainty == `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"aleatoric\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        post_params = [tf.reduce_mean(t, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`axis`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`) `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` t `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` chain]`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        post_model = build_net(post_params)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        y_pred, y_var = post_model(X_test, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`training`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`False`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` y_pred.numpy(), y_var.numpy()`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`if`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` uncertainty == `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"aleatoric+epistemic\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        restructured_chain = [`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            [tensor[i] `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tensor `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` chain] `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` i `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`range`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`len`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(chain[`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`]))`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        ]`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`predict`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`params`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            post_model = build_net(params)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            y_pred, y_var = post_model(X_test, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`training`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`False`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` y_pred, y_var`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        preds = [predict(chunks(params, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)) `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` params `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` restructured_chain]`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        y_pred_mc_samples, y_var_mc_samples = tf.unstack(preds, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`axis`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        y_pred, y_var_epist = tf.nn.moments(y_pred_mc_samples, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`axes`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        y_var_aleat = tf.reduce_mean(y_var_mc_samples, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`axis`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        y_var_tot = y_var_epist + y_var_aleat`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` y_pred, y_var_tot`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`nest_concat`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(*`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`args`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`axis`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"\"\"Utility function for concatenating a new Markov chain or trace with`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    older ones when resuming a previous calculation.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    \"\"\"`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tf.nest.map_structure(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`lambda`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` *`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`parts`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`: tf.concat(parts, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`axis`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=axis), *args)`}</span></span></span></code></pre>\n    <h2 {...{\n      \"id\": \"bnn-routines\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#bnn-routines\",\n        \"aria-label\": \"bnn routines permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`BNN Routines`}</h2>\n    <p><inlineCode parentName=\"p\">{`bnn/hmc.py`}</inlineCode>{` imports a module containing functions for building, initializing and calculating the loss (negative log probability) of BNN’s with Gaussian posterior. Here’s what that module looks like.`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title\"\n    }}>{`bnn/__init__.py`}</div>\n    <pre {...{\n      \"className\": \"grvsc-container default-dark\",\n      \"data-language\": \"py\",\n      \"data-index\": \"3\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"grvsc-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` functools `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`as`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` ft`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tensorflow `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`as`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tf`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tensorflow_probability `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`as`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tfp`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`dense`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`inputs`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`w`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`b`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`activation`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=tf.identity):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` activation(tf.matmul(inputs, w) + b)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`build_net`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`params`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`activation`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=tf.nn.relu):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`model`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`X`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`training`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`True`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` w, b `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` params[:-`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`]:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            X = dense(X, w, b, activation)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# final linear layer`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        X = dense(X, *params[-`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`])`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        y_pred, y_log_var = tf.unstack(X, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`axis`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=-`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        y_var = tf.exp(y_log_var)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`if`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` training:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tfp.distributions.Normal(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`loc`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=y_pred, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`scale`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=tf.sqrt(y_var))`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` y_pred, y_var`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` model`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`bnn_log_prob_fn`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`X`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`y`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`params`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`get_mean`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`False`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"\"\"Compute log likelihood of predicted labels y given features X and params.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    Args:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        X (np.array): 2d feature values.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        y (np.array): 1d labels (ground truth).`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        params (list): [[w1, b1], ...] containing 2d/1d arrays for weights/biases.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        get_mean (bool, optional): Whether to return the mean log`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`            probability over all labels for diagnostics, e.g. to`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`            compare train and test set performance.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    Returns:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`        tf.tensor: Sum or mean of log probabilities of all labels.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    \"\"\"`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    net = build_net(params)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    labels_dist = net(X)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`if`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` get_mean:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tf.reduce_mean(labels_dist.log_prob(y))`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tf.reduce_sum(labels_dist.log_prob(y))`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`prior_log_prob_fn`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`w_prior`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`b_prior`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`params`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    log_prob = `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` w, b `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` params:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        log_prob += tf.reduce_sum(w_prior.log_prob(w))`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        log_prob += tf.reduce_sum(b_prior.log_prob(b))`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` log_prob`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`target_log_prob_fn_factory`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`w_prior`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`b_prior`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`X_train`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`y_train`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# This signature is forced by TFP's HMC kernel which calls log_prob_fn(*chains).`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`target_log_prob_fn`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(*`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`params`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`if`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`not`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`isinstance`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(params[`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`], (`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk10\"\n            }}>{`list`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk10\"\n            }}>{`tuple`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            params = chunks(params, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        log_prob = prior_log_prob_fn(w_prior, b_prior, params)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        log_prob += bnn_log_prob_fn(X_train, y_train, params)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` log_prob`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` target_log_prob_fn`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`tracer_factory`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`X`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`y`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`lambda`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`params`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`: ft.partial(bnn_log_prob_fn, X, y, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`get_mean`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`True`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)(params)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`chunks`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`lst`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`n`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# Subdivide lst into successive n-sized chunks.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` [lst[i : i + n] `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` i `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`range`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`len`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(lst), n)]`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`get_random_initial_state`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`w_prior`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`b_prior`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`nodes_per_layer`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`overdisp`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1.0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"\"\"Draw random samples for weights and biases of a NN according to some`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    specified priors. distributions. This set of parameter values can serve as a`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    starting point for MCMC or gradient descent training.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`    \"\"\"`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    init_state = []`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` n1, n2 `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`zip`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(nodes_per_layer, nodes_per_layer[`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`:]):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        w_shape, b_shape = [n1, n2], n2`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# Use overdispersion > 1 for better R-hat statistics.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        w = w_prior.sample(w_shape) * overdisp`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        b = b_prior.sample(b_shape) * overdisp`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        init_state.append([tf.Variable(w), tf.Variable(b)])`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` init_state`}</span></span></span></code></pre>\n    <h3 {...{\n      \"id\": \"map-routines\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#map-routines\",\n        \"aria-label\": \"map routines permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`MAP Routines`}</h3>\n    <p>{`Finally, to save some time and computation let’s try to initialize our Hamiltonian simulation from a good starting point by first training a maximum a posteriori (MAP) network. We can then extract its parameter values and plug them into the HMC kernel as initial state. The hope is that by doing so, HMC will require less warm up before finding its way into high-probability regions of parameter space. If you’re unfamiliar with `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Maximum_a_posteriori_estimation\"\n      }}>{`MAP`}</a>{`, it’s basically just maximum likelihood inference combined with some priors for regularization.`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title\"\n    }}>{`bnn/map.py`}</div>\n    <pre {...{\n      \"className\": \"grvsc-container default-dark\",\n      \"data-language\": \"py\",\n      \"data-index\": \"4\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"grvsc-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` numpy `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`as`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` np`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tensorflow `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`as`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tf`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`get_map_trace`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`target_log_prob_fn`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`state`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`n_iter`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1000`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`save_every`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`10`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`callbacks`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=[]):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    optimizer = tf.optimizers.Adam()`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`@tf.function`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`minimize`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`():`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        optimizer.minimize(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`lambda`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`: -target_log_prob_fn(*state), state)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    state_trace, cb_trace = [], [[] `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` _ `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` callbacks]`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` i `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`range`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(n_iter):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`if`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` i % save_every == `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`:`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            state_trace.append(state)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`            `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` trace, cb `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`zip`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(cb_trace, callbacks):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`                trace.append(cb(state).numpy())`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`        minimize()`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` state_trace, cb_trace`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`get_best_map_state`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`map_trace`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`map_log_probs`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# map_log_probs[0/1]: train/test log probability`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    test_set_max_log_prob_idx = np.argmax(map_log_probs[`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`])`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# Return MAP params that achieved highest test set likelihood.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` map_trace[test_set_max_log_prob_idx]`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`def`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk11\"\n            }}>{`get_nodes_per_layer`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`n_features`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`net_taper`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0.5`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0.2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0.1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)):`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    nodes_per_layer = [`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk10\"\n            }}>{`int`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(n_features * x) `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` x `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` net_taper]`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# Ensure the last layer has two nodes so that output can be split into`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# predictive mean and learned loss attenuation (see eq. (7) of`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# https://arxiv.org/abs/1703.04977) which the network learns individually.`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    nodes_per_layer.append(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`return`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` nodes_per_layer`}</span></span></span></code></pre>\n    <h2 {...{\n      \"id\": \"boston-housing\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#boston-housing\",\n        \"aria-label\": \"boston housing permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Boston Housing`}</h2>\n    <p>{`Finally, let’s look at a concrete example by training a network with HMC to predict Boston housing prices and compare its performance with the MAP network. (The following is a `}<a parentName=\"p\" {...{\n        \"href\": \"https://code.visualstudio.com/docs/python/jupyter-support-py\"\n      }}>{`VS Code-style Jupyter notebook`}</a>{`, the `}<inlineCode parentName=\"p\">{`# %%`}</inlineCode>{` are cell delimiters.)`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title\"\n    }}>{`boston-housing-hmc.py`}</div>\n    <pre {...{\n      \"className\": \"grvsc-container default-dark\",\n      \"data-language\": \"py\",\n      \"data-index\": \"5\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"grvsc-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# %%`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tensorflow `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`as`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tf`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tensorflow_probability `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`as`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` tfp`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`from`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` bnn `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` (`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    get_random_initial_state,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    target_log_prob_fn_factory,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    tracer_factory,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`from`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` bnn.hmc `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` predict_from_chain, run_hmc`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`from`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` bnn.map `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` get_best_map_state, get_map_trace, get_nodes_per_layer`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# %%`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# About the data: https://kaggle.com/c/boston-housing`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`train, test = tf.keras.datasets.boston_housing.load_data()`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`X_train, y_train, X_test, y_test = [arr.astype(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk8\"\n            }}>{`\"float32\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`) `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk15\"\n            }}>{`for`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` arr `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`in`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` [*train, *test]]`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# %%`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`weight_prior = tfp.distributions.Normal(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0.2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`bias_prior = tfp.distributions.Normal(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`0.2`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# %%`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`log_prob_tracers = (`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    tracer_factory(X_train, y_train),`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    tracer_factory(X_test, y_test),`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`n_features = X_train.shape[-`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`1`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`]`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`random_initial_state = get_random_initial_state(`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    weight_prior, bias_prior, get_nodes_per_layer(n_features)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`trace, log_probs = get_map_trace(`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    target_log_prob_fn_factory(weight_prior, bias_prior, X_train, y_train),`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    random_initial_state,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`n_iter`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk7\"\n            }}>{`3000`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`callbacks`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=log_prob_tracers,`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`best_map_params = get_best_map_state(trace, log_probs)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# %%`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`map_nn = bnn.build_net(best_map_params)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`map_y_pred, map_y_var = map_nn(X_test, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`training`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`False`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk3\"\n            }}>{`# %%`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`bnn_log_prob_fn = target_log_prob_fn_factory(weight_prior, bias_prior, X_train, y_train)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`_, samples, _, _ = run_hmc(bnn_log_prob_fn, `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`current_state`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`=best_map_params)`}</span></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"grvsc-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"grvsc-source\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`hmc_y_pred, hmc_y_var = predict_from_chain(samples, X_test)`}</span></span></span></code></pre>\n    <p>{`We can plot the predicted means (`}<inlineCode parentName=\"p\">{`map_y_pred`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`hmc_y_pred`}</inlineCode>{`) against the test set’s ground truth (`}<inlineCode parentName=\"p\">{`y_test`}</inlineCode>{`) to get an idea of the quality of predictions. Moreover, let’s plot the predicted standard deviation (`}<inlineCode parentName=\"p\">{`map_y_var ** 0.5`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`hmc_y_var ** 0.5`}</inlineCode>{`) as error bars to see if the network’s Bayesian nature affords as any useful information about the confidence in its predictions. If it’s any good at estimating its own uncertainty, we’d expect points deviating from the parity line (`}<span parentName=\"p\" {...{\n        \"className\": \"katex\"\n      }}><span parentName=\"span\" {...{\n          \"className\": \"katex-mathml\"\n        }}><math parentName=\"span\" {...{\n            \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n          }}><semantics parentName=\"math\"><mrow parentName=\"semantics\"><msub parentName=\"mrow\"><mi parentName=\"msub\">{`y`}</mi><mtext parentName=\"msub\">{`test`}</mtext></msub><mo parentName=\"mrow\">{`=`}</mo><msub parentName=\"mrow\"><mi parentName=\"msub\">{`y`}</mi><mtext parentName=\"msub\">{`pred`}</mtext></msub></mrow><annotation parentName=\"semantics\" {...{\n                \"encoding\": \"application/x-tex\"\n              }}>{`y_\\\\text{test} = y_\\\\text{pred}`}</annotation></semantics></math></span><span parentName=\"span\" {...{\n          \"className\": \"katex-html\",\n          \"aria-hidden\": \"true\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"0.625em\",\n                \"verticalAlign\": \"-0.19444em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord mathnormal\",\n                \"style\": {\n                  \"marginRight\": \"0.03588em\"\n                }\n              }}>{`y`}</span><span parentName=\"span\" {...{\n                \"className\": \"msupsub\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-t vlist-t2\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.2805559999999999em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-2.5500000000000003em\",\n                          \"marginLeft\": \"-0.03588em\",\n                          \"marginRight\": \"0.05em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"2.7em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"sizing reset-size6 size3 mtight\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord text mtight\"\n                          }}><span parentName=\"span\" {...{\n                              \"className\": \"mord mtight\"\n                            }}>{`test`}</span></span></span></span></span><span parentName=\"span\" {...{\n                      \"className\": \"vlist-s\"\n                    }}>{`​`}</span></span><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.15em\"\n                      }\n                    }}><span parentName=\"span\"></span></span></span></span></span></span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mrel\"\n            }}>{`=`}</span><span parentName=\"span\" {...{\n              \"className\": \"mspace\",\n              \"style\": {\n                \"marginRight\": \"0.2777777777777778em\"\n              }\n            }}></span></span><span parentName=\"span\" {...{\n            \"className\": \"base\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"strut\",\n              \"style\": {\n                \"height\": \"0.716668em\",\n                \"verticalAlign\": \"-0.286108em\"\n              }\n            }}></span><span parentName=\"span\" {...{\n              \"className\": \"mord\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"mord mathnormal\",\n                \"style\": {\n                  \"marginRight\": \"0.03588em\"\n                }\n              }}>{`y`}</span><span parentName=\"span\" {...{\n                \"className\": \"msupsub\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"vlist-t vlist-t2\"\n                }}><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.3361079999999999em\"\n                      }\n                    }}><span parentName=\"span\" {...{\n                        \"style\": {\n                          \"top\": \"-2.5500000000000003em\",\n                          \"marginLeft\": \"-0.03588em\",\n                          \"marginRight\": \"0.05em\"\n                        }\n                      }}><span parentName=\"span\" {...{\n                          \"className\": \"pstrut\",\n                          \"style\": {\n                            \"height\": \"2.7em\"\n                          }\n                        }}></span><span parentName=\"span\" {...{\n                          \"className\": \"sizing reset-size6 size3 mtight\"\n                        }}><span parentName=\"span\" {...{\n                            \"className\": \"mord text mtight\"\n                          }}><span parentName=\"span\" {...{\n                              \"className\": \"mord mtight\"\n                            }}>{`pred`}</span></span></span></span></span><span parentName=\"span\" {...{\n                      \"className\": \"vlist-s\"\n                    }}>{`​`}</span></span><span parentName=\"span\" {...{\n                    \"className\": \"vlist-r\"\n                  }}><span parentName=\"span\" {...{\n                      \"className\": \"vlist\",\n                      \"style\": {\n                        \"height\": \"0.286108em\"\n                      }\n                    }}><span parentName=\"span\"></span></span></span></span></span></span></span></span></span>{`) to exhibit increased predicted variance. And indeed, with a few exceptions, that’s what we get for both MAP and HMC.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/06afecc44b031bb113c881cc468c799e/boston-test-vs-pred-map.svg\",\n        \"alt\": \"MAP Prediction vs ground truth\"\n      }}></img>{`\n`}<em parentName=\"p\"><strong parentName=\"em\">{`MAP`}</strong>{` predictions vs ground truth`}</em></p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/76ae5e9384b65dc46eda62de070d8b7d/boston-test-vs-pred-hmc.svg\",\n        \"alt\": \"HMC predictions vs ground truth\"\n      }}></img>{`\n`}<em parentName=\"p\"><strong parentName=\"em\">{`HMC`}</strong>{` predictions vs ground truth`}</em></p>\n    <p>{`The full code including the boring parts for generating plots can be found on `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/janosh/thermo/blob/main/src/bnn/hmc.py\"\n      }}>{`GitHub`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"future-prospects\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#future-prospects\",\n        \"aria-label\": \"future prospects permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Future prospects`}</h2>\n    <p>{`TFP is still in the process of adding more functionality to its `}<inlineCode parentName=\"p\">{`mcmc`}</inlineCode>{` module. For instance, both the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tensorflow/probability/blob/23573a10f203bf740e69f52387bbe8070703eda5/tensorflow_probability/python/experimental/mcmc/nuts.py#L75\"\n      }}><inlineCode parentName=\"a\">{`NoUTurnSampler`}</inlineCode></a>{` and the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tensorflow/probability/blob/23573a10f203bf740e69f52387bbe8070703eda5/tensorflow_probability/python/mcmc/dual_averaging_step_size_adaptation.py#L97\"\n      }}><inlineCode parentName=\"a\">{`DualAveragingStepSizeAdaptation`}</inlineCode></a>{` appeared only days before this post was published. They’re both great improvements over the regular `}<a parentName=\"p\" {...{\n        \"href\": \"https://tensorflow.org/probability/api_docs/python/tfp/mcmc/HamiltonianMonteCarlo\"\n      }}><inlineCode parentName=\"a\">{`HamiltonianMonteCarlo`}</inlineCode></a>{` kernel and `}<a parentName=\"p\" {...{\n        \"href\": \"https://tensorflow.org/probability/api_docs/python/tfp/mcmc/SimpleStepSizeAdaptation\"\n      }}><inlineCode parentName=\"a\">{`SimpleStepSizeAdaptation`}</inlineCode></a>{`, respectively. The former enables HMC to scale to even larger problems in terms of state space dimensionality while the latter should allow the kernel to converge to optimal step sizes faster. I’m excited to see where this is headed.`}</p>\n    <h2 {...{\n      \"id\": \"further-reading\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#further-reading\",\n        \"aria-label\": \"further reading permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Further reading`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://colcarroll.github.io/ppl-api\"\n        }}>{`A tour of probabilistic programming language APIs`}</a>{` by Colin Carroll. His entire blog is about MCMC and probabilistic programming and he has a bunch more really interesting posts on those topics. I highly recommend checking those out.`}</li>\n      <li parentName=\"ul\">{`There’s also an interesting `}<a parentName=\"li\" {...{\n          \"href\": \"https://arxiv.org/abs/2002.01184\"\n        }}>{`arXiv paper by the TFP team`}</a>{` published in Feb 2020 that explains what motivated the design decisions in their `}<inlineCode parentName=\"li\">{`mcmc`}</inlineCode>{` module.`}</li>\n    </ul>\n\n    <style {...{\n      \"className\": \"grvsc-styles\"\n    }}>{`\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk15 { color: #C586C0; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk7 { color: #B5CEA8; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk8 { color: #CE9178; }\n  .default-dark .mtk3 { color: #6A9955; }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n`}</style>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}